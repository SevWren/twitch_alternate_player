Directory structure:
└── twitch_alternate_player/
    ├── asmjs.js
    ├── autoclaim.js
    ├── background.js
    ├── common.css
    ├── common.js
    ├── content.css
    ├── content.js
    ├── gqltoken.js
    ├── LICENSE
    ├── manifest.json
    ├── player.css
    ├── player.html
    ├── player.js
    ├── pointerevent.js
    ├── recycler.js
    ├── report.css
    ├── report.html
    ├── wasm.wasm
    ├── worker.js
    ├── _locales/
    │   ├── en/
    │   │   └── messages.json
    │   └── ru/
    │       └── messages.json
    └── sources/
        ├── README
        └── wasm.wat

================================================
FILE: asmjs.js
================================================
﻿'use strict';

function AsmjsModule(stdlib, foreign, heap)
{
	'use asm';

	var _abHeap = new stdlib.Uint8Array(heap);
	var _aiHeap = new stdlib.Int32Array(heap);

	function SearchStartCodePrefix(pStream, pStreamEnd)
	// ITU-T H.264:2014 Annex B
	// Ищет start code prefix: минимум два нулевых байта, за ними единица.
	// Состав префикса в зависимости от его длины:
	// =3 - start_code_prefix_one_3bytes
	// =4 - zero_byte + start_code_prefix_one_3bytes
	// >4 - leading_zero_8bits или trailing_zero_8bits + zero_byte + start_code_prefix_one_3bytes
	// Возвращает указатель на начало префикса. В Int32Array(heap)[0] возвращает размер префикса.
	// Если префикс не найден, то возвращает pStreamEnd. Размер не определен.
	// Если данные повреждены, то возвращает -2.
	// Выход параметров функции за пределы буфера не проверяется.
	{
		pStream = pStream|0;
		pStreamEnd = pStreamEnd|0;

		var pStreamEnd3 = 0, uByte = 0, pStart = 0;

		pStreamEnd3 = (pStreamEnd - 3)|0;
		if ((pStream|0) > (pStreamEnd3|0))
		{
			return pStreamEnd|0;
		}

		for (;;)
		{
			// Большую часть времени выполняется следующий код
			// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
			uByte = _abHeap[(pStream + 2) >> 0]|0;
			if ((uByte|0) > 1)
			{
				pStream = (pStream + 3)|0;
				if ((pStream|0) <= (pStreamEnd3|0))
				{
					continue;
				}
				return pStreamEnd|0;
			}
			// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
			if ((_abHeap[(pStream + 1) >> 0]|0) != 0)
			{
				pStream = (pStream + 2)|0;
				if ((pStream|0) <= (pStreamEnd3|0))
				{
					continue;
				}
				return pStreamEnd|0;
			}
			if ((_abHeap[pStream >> 0]|0) != 0)
			{
				pStream = (pStream + 1)|0;
				if ((pStream|0) <= (pStreamEnd3|0))
				{
					continue;
				}
				return pStreamEnd|0;
			}
			break;
		}

		pStart = pStream;
		// Chrome 67 теряет скорость если прибавить 3.
		pStream = (pStream + 2)|0;

		while ((uByte|0) == 0)
		{
			pStream = (pStream + 1)|0;
			if ((pStream|0) == (pStreamEnd|0))
			{
				return pStreamEnd|0; // trailing_zero_8bits
			}
			uByte = _abHeap[pStream >> 0]|0;
		}
		if ((uByte|0) != 1)
		{
			// Twitch: Иногда в filler data встречаются последовательности нулевых байтов произвольной длины.
			// Они не мешают просмотру, но нарушают несколько правил стандарта H.264.
			return -2|0;
		}

		_aiHeap[0 >> 2] = (pStream - pStart + 1)|0;
		return pStart|0;
	}

	return {SearchStartCodePrefix: SearchStartCodePrefix};
}



================================================
FILE: autoclaim.js
================================================
ï»¿'use strict';


setInterval(
	() =>
	{
		const e = document.getElementsByClassName('claimable-bonus__icon');
		if (e.length !== 0)
		{
			e[0].click();
		}
	},
	5000
);



================================================
FILE: background.js
================================================
'use strict';

const beforeSendHeadersOptions = [ 'requestHeaders', 'blocking' ];

for (const option of Object.keys(chrome.webRequest.OnBeforeSendHeadersOptions)) {
	if (chrome.webRequest.OnBeforeSendHeadersOptions[option] === 'extraHeaders') {
		beforeSendHeadersOptions.push('extraHeaders');
		break;
	}
}

chrome.webRequest.onBeforeSendHeaders.addListener(request => {
	if (request.frameId !== 0 || request.parentFrameId !== -1) {
		return;
	}
	const initiator = request.initiator || request.originUrl || request.documentUrl;
	if (!initiator || !initiator.startsWith(chrome.runtime.getURL('').slice(0, -1))) {
		return;
	}
	const remove = [ 'origin', 'referer' ];
	const requestHeaders = request.requestHeaders.filter(({name}) => !remove.includes(name.toLowerCase()));
	requestHeaders.push({
		name: 'Origin',
		value: 'https://www.twitch.tv'
	}, {
		name: 'Referer',
		value: 'https://www.twitch.tv/'
	});
	return {
		requestHeaders
	};
}, {
	urls: chrome.runtime.getManifest().permissions.filter(permission => permission.includes(':')),
	types: [ 'xmlhttprequest' ]
}, beforeSendHeadersOptions);

const headersReceivedOptions = [ 'responseHeaders', 'blocking' ];

for (const option of Object.keys(chrome.webRequest.OnHeadersReceivedOptions)) {
	if (chrome.webRequest.OnHeadersReceivedOptions[option] === 'extraHeaders') {
		headersReceivedOptions.push('extraHeaders');
		break;
	}
}

//! Removes HTTP response headers that prevent the document from loading into <iframe>.
chrome.webRequest.onHeadersReceived.addListener(response => {
	if (response.frameId <= 0 || response.parentFrameId !== 0) {
		return;
	}
	return {
		responseHeaders: response.responseHeaders.filter(({name, value}) => {
			const headerName = name.toLowerCase();
			return headerName !== 'x-frame-options' && (headerName !== 'content-security-policy' || !value.toLowerCase().includes('frame-ancestors'));
		})
	};
}, {
	urls: [ 'https://www.twitch.tv/popout/*/chat', 'https://www.twitch.tv/embed/*/chat', 'https://www.twitch.tv/*/chat?*', 'https://www.twitch.tv/popout/' ],
	types: [ 'sub_frame' ]
}, headersReceivedOptions);


================================================
FILE: common.css
================================================
@charset "utf-8";*{box-sizing:border-box}[hidden]{display:none!important}b{font-weight:bolder}input,button,select,textarea{font-size:inherit;font-family:inherit}svg{fill:currentColor;stroke:currentColor;stroke-width:0}html,body{width:100%;height:100%;margin:0;padding:0}svg,button>span{pointer-events:none}


================================================
FILE: common.js
================================================
'use strict';

const ЭТО_CONTENT_SCRIPT = !document.currentScript;

const АДРЕС_НЕ_ПЕРЕНАПРАВЛЯТЬ = 'twitch5=0';

const ЛЕВАЯ_КНОПКА = 0;

const СРЕДНЯЯ_КНОПКА = 1;

const ПРАВАЯ_КНОПКА = 2;

const НАЖАТА_ЛЕВАЯ_КНОПКА = 1;

const НАЖАТА_ПРАВАЯ_КНОПКА = 2;

const НАЖАТА_СРЕДНЯЯ_КНОПКА = 4;

const ПАССИВНЫЙ_ОБРАБОТЧИК = {
	passive: true
};

const МИН_ЗНАЧЕНИЕ_НАСТРОЙКИ = Number.MIN_SAFE_INTEGER + 1e3;

const МАКС_ЗНАЧЕНИЕ_НАСТРОЙКИ = Number.MAX_SAFE_INTEGER - 1e3;

const АВТОНАСТРОЙКА = Number.MIN_SAFE_INTEGER;

const МИНИМАЛЬНАЯ_ГРОМКОСТЬ = 1;

const МАКСИМАЛЬНАЯ_ГРОМКОСТЬ = 100;

const ШАГ_ПОВЫШЕНИЯ_ГРОМКОСТИ_КЛАВОЙ = 4;

const ШАГ_ПОНИЖЕНИЯ_ГРОМКОСТИ_КЛАВОЙ = 2;

const ЧАТ_ВЫГРУЖЕН = 0;

const ЧАТ_СКРЫТ = 1;

const ЧАТ_ПАНЕЛЬ = 2;

const ВЕРХНЯЯ_СТОРОНА = 1;

const ПРАВАЯ_СТОРОНА = 2;

const НИЖНЯЯ_СТОРОНА = 3;

const ЛЕВАЯ_СТОРОНА = 4;

const МИН_ДЛИТЕЛЬНОСТЬ_ПОВТОРА = 30;

const МАКС_ДЛИТЕЛЬНОСТЬ_ПОВТОРА = 300;

const МИН_РАЗМЕР_БУФЕРА = 1.5;

const МАКС_РАЗМЕР_БУФЕРА = 30;

const МИН_РАСТЯГИВАНИЕ_БУФЕРА = 9;

const МАКС_РАСТЯГИВАНИЕ_БУФЕРА = 30;

const ПЕРЕПОЛНЕНИЕ_БУФЕРА = МАКС_РАЗМЕР_БУФЕРА + МАКС_РАСТЯГИВАНИЕ_БУФЕРА;

let г_лРаботаЗавершена = false;

if (!NodeList.prototype[Symbol.iterator]) {
	NodeList.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
}

if (!HTMLCollection.prototype[Symbol.iterator]) {
	HTMLCollection.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
}

if (!ЭТО_CONTENT_SCRIPT && !window.PointerEvent) {
	const узСкрипт = document.createElement('script');
	узСкрипт.src = 'pointerevent.js';
	document.currentScript.parentNode.appendChild(узСкрипт);
}

const ЗАГЛУШКА = () => {};

function Проверить(пУсловие) {
	if (!пУсловие) {
		throw new Error('Проверка не пройдена');
	}
}

function ДобавитьОбработчикИсключений(фФункция) {
	return function() {
		if (г_лРаботаЗавершена) {
			return;
		}
		try {
			return фФункция.apply(this, arguments);
		} catch (пИсключение) {
			м_Отладка.ПойманоИсключение(пИсключение);
		}
	};
}

function ПеревестиИсключениеВСтроку(пИсключение) {
	return пИсключение instanceof Error ? пИсключение.stack : `[typeof ${typeof пИсключение}] ${new Error(пИсключение).stack}`;
}

function Тип(пЗначение) {
	return пЗначение === null ? 'null' : typeof пЗначение;
}

function ЭтоЧисло(пЗначение) {
	return typeof пЗначение == 'number' && пЗначение == пЗначение;
}

function ЭтоОбъект(пЗначение) {
	return typeof пЗначение == 'object' && пЗначение !== null;
}

function ЭтоНепустаяСтрока(пЗначение) {
	return typeof пЗначение == 'string' && пЗначение !== '';
}

function ОграничитьДлинуСтроки(сСтрока, чМаксимальнаяДлина) {
	return сСтрока.length <= чМаксимальнаяДлина ? сСтрока : `${сСтрока.slice(0, чМаксимальнаяДлина)}---8<---${сСтрока.length - чМаксимальнаяДлина}`;
}

function получитьВерсиюДвижкаБраузера() {
	if (!получитьВерсиюДвижкаБраузера._чРезультат) {
		if (navigator.userAgentData) {
			for (const {brand, version} of navigator.userAgentData.brands) {
				if (brand === 'Chromium' || brand === 'Google Chrome') {
					получитьВерсиюДвижкаБраузера._чРезультат = Number.parseInt(version, 10);
					break;
				}
			}
		}
		if (!получитьВерсиюДвижкаБраузера._чРезультат) {
			получитьВерсиюДвижкаБраузера._чРезультат = Number(/Chrome\/(\d+)/.exec(navigator.userAgent)[1]);
		}
	}
	return получитьВерсиюДвижкаБраузера._чРезультат;
}

function этоМобильноеУстройство() {
	if (!этоМобильноеУстройство.hasOwnProperty('_лРезультат')) {
		этоМобильноеУстройство._лРезультат = navigator.userAgentData ? navigator.userAgentData.mobile : navigator.userAgent.includes('Android');
	}
	return этоМобильноеУстройство._лРезультат;
}

function Узел(пЭлемент) {
	const элЭлемент = typeof пЭлемент == 'string' ? document.getElementById(пЭлемент) : пЭлемент;
	Проверить(элЭлемент.nodeType === 1);
	return элЭлемент;
}

function создатьТелоЗапросаGql(сЗапрос, оПеременные) {
	Проверить(ЭтоНепустаяСтрока(сЗапрос) && ЭтоОбъект(оПеременные));
	return `{"query":${JSON.stringify(сЗапрос)},"variables":${JSON.stringify(оПеременные)}}`;
}

function объединитьЗапросыGql(мсТелаЗапросов) {
	Проверить(мсТелаЗапросов[0][0] === '{');
	return `[${мсТелаЗапросов.join(',')}]`;
}

function ПолучитьАдресНашегоПроигрывателя(сКодКанала) {
	const сПараметры = '?channel=' + encodeURIComponent(сКодКанала);
	return chrome.runtime.getURL('player.html') + сПараметры;
}

const м_Журнал = (() => {
	const МАКС_ДЛИНА_ЗАПИСИ = 1500;
	let _мсЖурнал = null;
	let _чПоследняяЗапись = -1;
	function Добавить(сВажность, сЗапись) {
		if (_мсЖурнал) {
			Проверить(typeof сВажность == 'string' && typeof сЗапись == 'string');
			сЗапись = ОграничитьДлинуСтроки(`${сВажность} ${(performance.now() / 1e3).toFixed(3)} ${сЗапись}`, МАКС_ДЛИНА_ЗАПИСИ);
			if (++_чПоследняяЗапись === _мсЖурнал.length) {
				_чПоследняяЗапись = 0;
			}
			_мсЖурнал[_чПоследняяЗапись] = сЗапись;
		}
	}
	function ПолучитьДанныеДляОтчета() {
		if (!_мсЖурнал) {
			return null;
		}
		const чСледующаяЗапись = _чПоследняяЗапись + 1;
		if (чСледующаяЗапись === _мсЖурнал.length) {
			return _мсЖурнал;
		}
		if (_мсЖурнал[чСледующаяЗапись] === void 0) {
			return _мсЖурнал.slice(0, чСледующаяЗапись);
		}
		return _мсЖурнал.slice(чСледующаяЗапись).concat(_мсЖурнал.slice(0, чСледующаяЗапись));
	}
	function Вот(сЗапись) {
		Проверить(arguments.length === 1);
		Добавить(' ', сЗапись);
	}
	function Окак(сЗапись) {
		Проверить(arguments.length === 1);
		Добавить('~', сЗапись);
	}
	function Ой(сЗапись) {
		Проверить(arguments.length === 1);
		Добавить('@', сЗапись);
	}
	function O(пОбъект) {
		switch (Тип(пОбъект)) {
		  case 'object':
			return JSON.stringify(пОбъект);

		  case 'function':
			return `[function ${пОбъект.name}]`;

		  case 'symbol':
			return '[symbol]';

		  default:
			return String(пОбъект);
		}
	}
	function F(чТочность) {
		return чЗначение => typeof чЗначение == 'number' ? чЗначение.toFixed(чТочность) : 'NaN';
	}
	if (!ЭТО_CONTENT_SCRIPT) {
		_мсЖурнал = new Array(1500);
		Вот(`[Журнал] Журнал запущен ${performance.now().toFixed()}мс`);
	}
	return {
		Вот,
		Окак,
		Ой,
		O,
		F0: F(0),
		F1: F(1),
		F2: F(2),
		F3: F(3),
		ПолучитьДанныеДляОтчета
	};
})();

const м_i18n = (() => {
	const НАЗВАНИЯ_ЯЗЫКОВ = {
		AR: 'العربية',
		ASE: 'American Sign Language',
		ASL: 'American Sign Language',
		BG: 'Български',
		CA: 'Català',
		CS: 'Čeština',
		DA: 'Dansk',
		DE: 'Deutsch',
		EL: 'Ελληνικά',
		EN: 'English',
		EN_GB: 'English (UK)',
		ES: 'Español',
		ES_MX: 'Español (Latinoamérica)',
		FI: 'Suomi',
		FR: 'Français',
		HI: 'हिन्दी',
		HU: 'Magyar',
		ID: 'Bahasa Indonesia',
		IT: 'Italiano',
		JA: '日本語',
		KO: '한국어',
		MS: 'بهاس ملايو',
		NL: 'Nederlands',
		NO: 'Norsk',
		PL: 'Polski',
		PT: 'Português',
		PT_BR: 'Português (Brasil)',
		RO: 'Română',
		RU: 'Русский',
		SK: 'Slovenčina',
		SV: 'Svenska',
		TH: 'ภาษาไทย',
		TL: 'Tagalog',
		TR: 'Türkçe',
		UK: 'Українська',
		VI: 'Tiếng Việt',
		ZH: '中文',
		ZH_HK: '中文（香港）',
		ZH_CN: '简体中文',
		ZH_TW: '繁體中文'
	};
	const _амФорматироватьЧисло = new Map();
	let _фФорматироватьДату = null;
	function GetMessage(sMessageName, sSubstitution) {
		Проверить(ЭтоНепустаяСтрока(sMessageName));
		Проверить(sSubstitution === void 0 || typeof sSubstitution == 'string');
		const sMessageText = chrome.i18n.getMessage(sMessageName, sSubstitution);
		if (!sMessageText) {
			throw new Error(`Не найден текст ${sMessageName}`);
		}
		return sMessageText;
	}
	function FastInsertAdjacentHtmlMessage(elInsertTo, sPosition, sMessageName) {
		
		//! HTML content is taken from the file messages.json. See GetMessage().
		elInsertTo.insertAdjacentHTML(sPosition, GetMessage(sMessageName));
	}
	function InsertAdjacentHtmlMessage(vInsertTo, sPosition, sMessageName) {
		const elInsertTo = Узел(vInsertTo);
		if (sPosition === 'content') {
			sPosition = 'beforeend';
			elInsertTo.textContent = '';
		}
		FastInsertAdjacentHtmlMessage(elInsertTo, sPosition, sMessageName);
		return elInsertTo;
	}
	function TranslateDocument(оДокумент) {
		м_Журнал.Вот('[i18n] Перевод документа');
		for (let elTranslate, celTranslate = оДокумент.querySelectorAll('*[data-i18n]'), i = 0; elTranslate = celTranslate[i]; ++i) {
			const sNames = elTranslate.getAttribute('data-i18n');
			const sNamesDelimiter = sNames.indexOf('^');
			if (sNamesDelimiter !== 0) {
				FastInsertAdjacentHtmlMessage(elTranslate, 'afterbegin', sNamesDelimiter === -1 ? sNames : sNames.slice(0, sNamesDelimiter));
			}
			if (sNamesDelimiter !== -1) {
				elTranslate.title = GetMessage(sNames.slice(sNamesDelimiter + 1));
			}
		}
	}
	function ФорматироватьЧисло(пЧисло, кДробныхРазрядов) {
		Проверить(кДробныхРазрядов === void 0 || typeof кДробныхРазрядов == 'number' && кДробныхРазрядов >= 0);
		let фФорматировать = _амФорматироватьЧисло.get(кДробныхРазрядов);
		if (!фФорматировать) {
			фФорматировать = new Intl.NumberFormat([], кДробныхРазрядов === void 0 ? void 0 : {
				minimumFractionDigits: кДробныхРазрядов,
				maximumFractionDigits: кДробныхРазрядов
			}).format;
			_амФорматироватьЧисло.set(кДробныхРазрядов, фФорматировать);
		}
		return фФорматировать(пЧисло);
	}
	function ФорматироватьДату(пДата) {
		Проверить(Number.isFinite(пДата) || Number.isFinite(пДата.getTime()));
		if (!_фФорматироватьДату) {
			_фФорматироватьДату = new Intl.DateTimeFormat([], {
				timeZone: 'UTC'
			}).format;
		}
		return _фФорматироватьДату(пДата);
	}
	function ПеревестиСекундыВСтроку(кСекунды, лНужныСекунды) {
		let ч = Math.floor(кСекунды / 60 % 60);
		let с = Math.floor(кСекунды / 60 / 60) + (ч < 10 ? ' : 0' : ' : ') + ч;
		if (лНужныСекунды) {
			ч = Math.floor(кСекунды % 60);
			с += (ч < 10 ? ' : 0' : ' : ') + ч;
		}
		return с;
	}
	function ПолучитьНазваниеЯзыка(сКодЯзыка) {
		const сНазваниеЯзыка = НАЗВАНИЯ_ЯЗЫКОВ[сКодЯзыка.toUpperCase()];
		if (!сНазваниеЯзыка) {
			throw new Error(`Неизвестный код языка: ${сКодЯзыка}`);
		}
		return сНазваниеЯзыка;
	}
	return {
		GetMessage,
		InsertAdjacentHtmlMessage,
		TranslateDocument,
		ФорматироватьЧисло,
		ФорматироватьДату,
		ПеревестиСекундыВСтроку,
		ПолучитьНазваниеЯзыка
	};
})();

const м_Настройки = (() => {
	const ВЕРСИЯ_НАСТРОЕК = 2;
	const _амПредустановкиБуферизации = new Map([ [ 'J0126', {
		кОдновременныхЗагрузок: 1,
		чНачалоВоспроизведения: 3,
		чРазмерБуфера: 5,
		чРастягиваниеБуфера: 15
	} ], [ 'J0127', {
		кОдновременныхЗагрузок: 2,
		чНачалоВоспроизведения: 3,
		чРазмерБуфера: 8.5,
		чРастягиваниеБуфера: 20
	} ], [ 'J0128', {
		кОдновременныхЗагрузок: 2,
		чНачалоВоспроизведения: 17,
		чРазмерБуфера: 9.5,
		чРастягиваниеБуфера: 30
	} ] ]);
	const _амПредустановкиОформления = new Map([ [ 'J0122', {
		сЦветФона: '#282828',
		сЦветГрадиента: '#d4d4d4',
		сЦветКнопок: '#d3be96',
		сЦветЗаголовка: '#cdbdec',
		сЦветВыделения: '#ffd862',
		чПрозрачность: 25
	} ], [ 'J0121', {
		сЦветФона: '#405b77',
		сЦветГрадиента: '#aaccf2',
		сЦветКнопок: '#ffffff',
		сЦветЗаголовка: '#c2e4ff',
		сЦветВыделения: '#fef17c',
		чПрозрачность: 30
	} ], [ 'J0138', {
		сЦветФона: '#4b4b4b',
		сЦветГрадиента: '#aaaaaa',
		сЦветКнопок: '#bad4f8',
		сЦветЗаголовка: '#e2ebb4',
		сЦветВыделения: '#75a9f0',
		чПрозрачность: 5
	} ], [ 'J0125', {
		сЦветФона: '#161616',
		сЦветГрадиента: '#a0a0a0',
		сЦветКнопок: '#f0f0f0',
		сЦветЗаголовка: '#baccda',
		сЦветВыделения: '#6cb6ff',
		чПрозрачность: 20
	} ] ]);
	const _моМетаданныеПредустановок = [ {
		амДанные: _амПредустановкиБуферизации,
		сНастраиваемая: 'J0129',
		сВыбрана: 'сПредустановкаВыбрана_буферизация',
		сЗаполнена: 'лПредустановкаЗаполнена_буферизация',
		сСписок: 'предустановка-буферизация',
		сСобытие: 'настройки-измениласьпредустановка-буферизация'
	}, {
		амДанные: _амПредустановкиОформления,
		сНастраиваемая: 'J0123',
		сВыбрана: 'сПредустановкаВыбрана_оформление',
		сЗаполнена: 'лПредустановкаЗаполнена_оформление',
		сСписок: 'предустановка-оформление',
		сСобытие: 'настройки-измениласьпредустановка-оформление'
	} ];
	const _мноПостоянныеНастройки = new Set([ 'чВерсияНастроек', 'чСлучайноеЧисло', 'сПредыдущаяВерсия', 'чПоследняяПроверкаОбновленияРасширения', 'лАвтоперенаправлениеЗамечено' ]);
	const _мноНеСветить = new Set();
	class Настройка {
		constructor(пНачальное, мпПеречисление, чМинимальное, чМаксимальное, сАвтонастройка) {
			this.пТекущее = void 0;
			this.пНачальное = пНачальное;
			this.мпПеречисление = мпПеречисление;
			this.чМинимальное = чМинимальное;
			this.чМаксимальное = чМаксимальное;
			this.сАвтонастройка = сАвтонастройка;
		}
		static Создать(пНачальное) {
			return new this(пНачальное, null, МИН_ЗНАЧЕНИЕ_НАСТРОЙКИ, МАКС_ЗНАЧЕНИЕ_НАСТРОЙКИ, '');
		}
		static СоздатьПеречисление(пНачальное, мпПеречисление) {
			return new this(пНачальное, мпПеречисление, МИН_ЗНАЧЕНИЕ_НАСТРОЙКИ, МАКС_ЗНАЧЕНИЕ_НАСТРОЙКИ, '');
		}
		static СоздатьДиапазон(пНачальное, чМинимальное, чМаксимальное, сАвтонастройка = '') {
			return new this(пНачальное, null, чМинимальное, чМаксимальное, сАвтонастройка);
		}
		static ПроверитьЗначение(пЗначение) {
			Проверить(пЗначение == пЗначение && пЗначение !== Infinity && пЗначение !== -Infinity && пЗначение !== void 0 && typeof пЗначение != 'function' && typeof пЗначение != 'symbol' && typeof пЗначение != 'object');
		}
		ИсправитьЗначение(пЗначение) {
			Настройка.ПроверитьЗначение(пЗначение);
			Проверить(typeof пЗначение == typeof this.пНачальное);
			if (this.мпПеречисление) {
				if (!this.мпПеречисление.includes(пЗначение)) {
					пЗначение = this.пНачальное;
				}
			} else if (typeof пЗначение == 'number') {
				if (пЗначение === АВТОНАСТРОЙКА) {
					if (this.сАвтонастройка === '') {
						пЗначение = this.пНачальное;
					}
				} else if (пЗначение < this.чМинимальное) {
					пЗначение = this.чМинимальное;
				} else if (пЗначение > this.чМаксимальное) {
					пЗначение = this.чМаксимальное;
				}
			}
			return пЗначение;
		}
	}
	const _оНастройки = {
		чВерсияНастроек: Настройка.Создать(ВЕРСИЯ_НАСТРОЕК),
		чСлучайноеЧисло: Настройка.Создать(Math.random()),
		сПредыдущаяВерсия: Настройка.Создать('2000.1.1'),
		чПоследняяПроверкаОбновленияРасширения: Настройка.Создать(0),
		чГромкость2: Настройка.СоздатьДиапазон(МАКСИМАЛЬНАЯ_ГРОМКОСТЬ / 2, МИНИМАЛЬНАЯ_ГРОМКОСТЬ, МАКСИМАЛЬНАЯ_ГРОМКОСТЬ),
		лПриглушить: Настройка.Создать(false),
		сИдАудиоустройства: Настройка.Создать(''),
		сНазваниеВарианта: Настройка.Создать('CoolCmd'),
		чБитрейтВарианта: Настройка.Создать(МАКС_ЗНАЧЕНИЕ_НАСТРОЙКИ),
		чДлительностьПовтора2: Настройка.СоздатьДиапазон(60, МИН_ДЛИТЕЛЬНОСТЬ_ПОВТОРА, МАКС_ДЛИТЕЛЬНОСТЬ_ПОВТОРА, 'J0124'),
		лМасштабироватьИзображение: Настройка.Создать(true),
		чСостояниеЧата: Настройка.СоздатьПеречисление(ЧАТ_ВЫГРУЖЕН, [ ЧАТ_ВЫГРУЖЕН, ЧАТ_СКРЫТ, ЧАТ_ПАНЕЛЬ ]),
		чСостояниеЗакрытогоЧата: Настройка.СоздатьПеречисление(ЧАТ_ВЫГРУЖЕН, [ ЧАТ_ВЫГРУЖЕН, ЧАТ_СКРЫТ ]),
		лАвтоПоложениеЧата: Настройка.Создать(этоМобильноеУстройство()),
		чГоризонтальноеПоложениеЧата: Настройка.СоздатьПеречисление(ПРАВАЯ_СТОРОНА, [ ПРАВАЯ_СТОРОНА, ЛЕВАЯ_СТОРОНА ]),
		чВертикальноеПоложениеЧата: Настройка.СоздатьПеречисление(НИЖНЯЯ_СТОРОНА, [ ВЕРХНЯЯ_СТОРОНА, НИЖНЯЯ_СТОРОНА ]),
		чПоложениеПанелиЧата: Настройка.СоздатьПеречисление(ПРАВАЯ_СТОРОНА, [ ВЕРХНЯЯ_СТОРОНА, ПРАВАЯ_СТОРОНА, НИЖНЯЯ_СТОРОНА, ЛЕВАЯ_СТОРОНА ]),
		чШиринаПанелиЧата: Настройка.СоздатьДиапазон(340, 100, МАКС_ЗНАЧЕНИЕ_НАСТРОЙКИ),
		чВысотаПанелиЧата: Настройка.СоздатьДиапазон(250, 100, МАКС_ЗНАЧЕНИЕ_НАСТРОЙКИ),
		лПолноценныйЧат: Настройка.Создать(true),
		лЗатемнитьЧат: Настройка.Создать(false),
		чРазмерИнтерфейса: Настройка.СоздатьДиапазон(этоМобильноеУстройство() ? 115 : 100, 50, 200),
		чИнтервалАвтоскрытия: Настройка.СоздатьДиапазон(4, .5, 60),
		лАнимацияИнтерфейса: Настройка.Создать(!этоМобильноеУстройство()),
		лМенятьГромкостьКолесом: Настройка.Создать(true),
		чШагИзмененияГромкостиКолесом: Настройка.СоздатьДиапазон(5, -10, 10),
		лПоказатьСтатистику: Настройка.Создать(false),
		сПредустановкаВыбрана_буферизация: Настройка.Создать('J0127'),
		лПредустановкаЗаполнена_буферизация: Настройка.Создать(false),
		кОдновременныхЗагрузок: Настройка.СоздатьДиапазон(0, 1, 3),
		чНачалоВоспроизведения: Настройка.СоздатьДиапазон(0, МИН_РАЗМЕР_БУФЕРА, МАКС_РАЗМЕР_БУФЕРА),
		чРазмерБуфера: Настройка.СоздатьДиапазон(0, МИН_РАЗМЕР_БУФЕРА, МАКС_РАЗМЕР_БУФЕРА),
		чРастягиваниеБуфера: Настройка.СоздатьДиапазон(0, МИН_РАСТЯГИВАНИЕ_БУФЕРА, МАКС_РАСТЯГИВАНИЕ_БУФЕРА),
		сПредустановкаВыбрана_оформление: Настройка.Создать('J0122'),
		лПредустановкаЗаполнена_оформление: Настройка.Создать(false),
		сЦветФона: Настройка.Создать(''),
		сЦветГрадиента: Настройка.Создать('#ffffff'),
		сЦветКнопок: Настройка.Создать(''),
		сЦветЗаголовка: Настройка.Создать(''),
		сЦветВыделения: Настройка.Создать(''),
		чПрозрачность: Настройка.СоздатьДиапазон(0, 0, 80),
		лАвтоперенаправлениеРазрешено: Настройка.Создать(true),
		лАвтоперенаправлениеЗамечено: Настройка.Создать(false)
	};
	const ОТКЛАДЫВАТЬ_СОХРАНЕНИЕ_НА = ЭТО_CONTENT_SCRIPT ? 50 : 500;
	let _чТаймерОтложенногоСохранения = 0;
	let _оОтложенноеСохранение = null;
	let _лОтложенноеУдаление = false;
	function Восстановить() {
		м_Журнал.Вот('[Настройки] Восстанавливаю настройки');
		return new Promise((фВыполнить, фОтказаться) => {
			chrome.storage.local.get(null, оВосстановленныеНастройки => {
				if (г_лРаботаЗавершена) {
					return;
				}
				try {
					if (chrome.runtime.lastError) {
						console.error('storage.local.get', chrome.runtime.lastError.message);
						м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0221');
					}
					м_Журнал.Вот(`[Настройки] Настройки прочитаны из хранилища: ${м_Журнал.O(оВосстановленныеНастройки)}`);
					ЗавершитьВосстановление(оВосстановленныеНастройки);
					фВыполнить();
				} catch (пИсключение) {
					фОтказаться(пИсключение);
				}
			});
		});
	}
	function ЗавершитьВосстановление(оВосстановленныеНастройки) {
		Проверить(ЭтоОбъект(оВосстановленныеНастройки));
		Проверить(!_оНастройки.чВерсияНастроек.пТекущее);
		const оСохранить = {};
		const лОстальноеУдалить = ПроверитьВерсиюНастроек(оВосстановленныеНастройки, оСохранить);
		for (let сИмя of Object.keys(_оНастройки)) {
			if (оВосстановленныеНастройки.hasOwnProperty(сИмя)) {
				const пЗначение = _оНастройки[сИмя].ИсправитьЗначение(оВосстановленныеНастройки[сИмя]);
				if (пЗначение !== оВосстановленныеНастройки[сИмя]) {
					оСохранить[сИмя] = пЗначение;
				}
				_оНастройки[сИмя].пТекущее = пЗначение;
			} else {
				if (_мноПостоянныеНастройки.has(сИмя)) {
					оСохранить[сИмя] = _оНастройки[сИмя].пНачальное;
				}
				_оНастройки[сИмя].пТекущее = _оНастройки[сИмя].пНачальное;
			}
		}
		НачатьСохранение(оСохранить, лОстальноеУдалить);
	}
	function ПроверитьВерсиюНастроек(оНастройки, оСохранить) {
		if (!Number.isInteger(оНастройки.чВерсияНастроек) || оНастройки.чВерсияНастроек < 1 || оНастройки.чВерсияНастроек > ВЕРСИЯ_НАСТРОЕК) {
			for (let сИмя of Object.keys(оНастройки)) {
				delete оНастройки[сИмя];
			}
			return true;
		}
		for (let оМетаданные of _моМетаданныеПредустановок) {
			let сИмя = оНастройки[оМетаданные.сВыбрана];
			if (сИмя !== void 0 && сИмя !== оМетаданные.сНастраиваемая) {
				for (let сИмяПредустановки of оМетаданные.амДанные.keys()) {
					if (сИмя === сИмяПредустановки) {
						сИмя = void 0;
						break;
					}
				}
				if (сИмя !== void 0) {
					оСохранить[оМетаданные.сВыбрана] = оНастройки[оМетаданные.сВыбрана] = _оНастройки[оМетаданные.сВыбрана].пНачальное;
				}
			}
		}
		if (оНастройки.чСостояниеЗакрытогоЧата !== оНастройки.чСостояниеЧата && (оНастройки.чСостояниеЧата === ЧАТ_ВЫГРУЖЕН || оНастройки.чСостояниеЧата === ЧАТ_СКРЫТ)) {
			оСохранить.чСостояниеЗакрытогоЧата = оНастройки.чСостояниеЗакрытогоЧата = оНастройки.чСостояниеЧата;
		}
		if (оНастройки.чВерсияНастроек === ВЕРСИЯ_НАСТРОЕК) {
			return false;
		}
		оСохранить.чВерсияНастроек = оНастройки.чВерсияНастроек = ВЕРСИЯ_НАСТРОЕК;
		return false;
	}
	function НачатьСохранение(оСохранить, лОстальноеУдалить) {
		Проверить(ЭтоОбъект(оСохранить));
		if (Object.keys(оСохранить).length !== 0 || лОстальноеУдалить) {
			if (_чТаймерОтложенногоСохранения === 0) {
				м_Журнал.Вот(`[Настройки] Откладываю сохранение настроек на ${ОТКЛАДЫВАТЬ_СОХРАНЕНИЕ_НА}мс`);
				_оОтложенноеСохранение = оСохранить;
				_лОтложенноеУдаление = лОстальноеУдалить;
				_чТаймерОтложенногоСохранения = setTimeout(ДобавитьОбработчикИсключений(ЗавершитьСохранение), ОТКЛАДЫВАТЬ_СОХРАНЕНИЕ_НА);
			} else if (лОстальноеУдалить) {
				_оОтложенноеСохранение = оСохранить;
				_лОтложенноеУдаление = лОстальноеУдалить;
			} else {
				Object.assign(_оОтложенноеСохранение, оСохранить);
			}
		}
	}
	function ЗавершитьСохранение() {
		м_Журнал.Вот('[Настройки] Завершаю отложенное сохранение');
		Проверить(_чТаймерОтложенногоСохранения !== 0);
		_чТаймерОтложенногоСохранения = 0;
		Проверить(ЭтоОбъект(_оОтложенноеСохранение));
		Сохранить(_оОтложенноеСохранение, _лОтложенноеУдаление);
		_оОтложенноеСохранение = null;
	}
	function Сохранить(оСохранить, лОстальноеУдалить) {
		if (лОстальноеУдалить) {
			chrome.storage.local.clear(ПроверитьРезультатСохранения);
			м_Журнал.Вот('[Настройки] Все настройки удалены из хранилища');
		}
		chrome.storage.local.set(оСохранить, ПроверитьРезультатСохранения);
		м_Журнал.Вот(`[Настройки] Настройки записаны в хранилище: ${м_Журнал.O(оСохранить)}`);
	}
	function ПроверитьРезультатСохранения() {
		if (chrome.runtime.lastError) {
			console.error('storage.local.set', chrome.runtime.lastError.message);
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0221');
		}
	}
	function Сбросить() {
		м_Журнал.Окак('[Настройки] Сбрасываю настройки');
		Проверить(_оНастройки.чВерсияНастроек.пТекущее);
		const оСохранить = {};
		for (let сИмя of _мноПостоянныеНастройки) {
			оСохранить[сИмя] = _оНастройки[сИмя].пТекущее;
		}
		НачатьСохранение(оСохранить, true);
		window.location.reload(true);
	}
	function Экспорт() {
		м_Журнал.Окак('[Настройки] Экспортирую настройки');
		Проверить(_оНастройки.чВерсияНастроек.пТекущее);
		const оЭкспорт = {
			чВерсияНастроек: ВЕРСИЯ_НАСТРОЕК
		};
		for (let сИмя of Object.keys(_оНастройки)) {
			if (!_мноПостоянныеНастройки.has(сИмя) && !_мноНеСветить.has(сИмя)) {
				оЭкспорт[сИмя] = _оНастройки[сИмя].пТекущее;
			}
		}
		м_Журнал.Вот(`[Настройки] Отобраны настройки для экспорта: ${м_Журнал.O(оЭкспорт)}`);
		ЗаписатьТекстВЛокальныйФайл(JSON.stringify(оЭкспорт), 'application/json', Текст('J0133'));
	}
	function Импорт(оИзФайла) {
		м_Журнал.Окак(`[Настройки] Импортирую настройки из файла ${оИзФайла.name}`);
		Проверить(_оНастройки.чВерсияНастроек.пТекущее);
		if (оИзФайла.size === 0 || оИзФайла.size > 1e4) {
			м_Журнал.Ой(`[Настройки] Размер файла: ${оИзФайла.size}`);
			м_Уведомление.ПоказатьЖопу();
			return;
		}
		const оЧиталка = new FileReader();
		оЧиталка.addEventListener('loadend', ДобавитьОбработчикИсключений(() => {
			if (!ЭтоНепустаяСтрока(оЧиталка.result)) {
				м_Журнал.Ой(`[Настройки] Результат чтения файла: ${оЧиталка.result}`);
				м_Уведомление.ПоказатьЖопу();
				return;
			}
			м_Журнал.Вот(`[Настройки] Настройки прочитаны из файла: ${оЧиталка.result}`);
			let оСохранить;
			try {
				оСохранить = JSON.parse(оЧиталка.result);
				if (!ЭтоОбъект(оСохранить)) {
					throw 1;
				}
				if (ПроверитьВерсиюНастроек(оСохранить, оСохранить)) {
					throw 2;
				}
				for (let сИмя of Object.keys(оСохранить)) {
					if (!_оНастройки.hasOwnProperty(сИмя) || _мноНеСветить.has(сИмя)) {
						delete оСохранить[сИмя];
					} else {
						оСохранить[сИмя] = _оНастройки[сИмя].ИсправитьЗначение(оСохранить[сИмя]);
						if (оСохранить[сИмя] === _оНастройки[сИмя].пНачальное) {
							delete оСохранить[сИмя];
						}
					}
				}
			} catch (пИсключение) {
				м_Журнал.Ой(`[Настройки] Поймано исключение во время разбора настроек: ${пИсключение}`);
				м_Уведомление.ПоказатьЖопу();
				return;
			}
			for (let сИмя of _мноПостоянныеНастройки) {
				оСохранить[сИмя] = _оНастройки[сИмя].пТекущее;
			}
			НачатьСохранение(оСохранить, true);
			window.location.reload(true);
		}));
		оЧиталка.readAsText(оИзФайла);
	}
	function Получить2(сИмя) {
		Проверить(typeof сИмя == 'string');
		Проверить(_оНастройки.hasOwnProperty(сИмя));
		Проверить(_оНастройки.чВерсияНастроек.пТекущее);
		for (let оМетаданные of _моМетаданныеПредустановок) {
			const оПредустановка = оМетаданные.амДанные.get(_оНастройки[оМетаданные.сВыбрана].пТекущее);
			if (оПредустановка) {
				const пЗначение = оПредустановка[сИмя];
				if (пЗначение !== void 0) {
					return пЗначение;
				}
			}
		}
		return _оНастройки[сИмя].пТекущее;
	}
	function Получить(сИмя) {
		if (сИмя === 'чМаксРазмерБуфера') {
			return Math.max(Получить2('чНачалоВоспроизведения'), Получить2('чРазмерБуфера'));
		}
		return Получить2(сИмя);
	}
	function Изменить(сИмя, пЗначение, лНеСохранять = false) {
		Проверить(typeof сИмя == 'string');
		Проверить(_оНастройки[сИмя].ИсправитьЗначение(пЗначение) === пЗначение);
		const оСохранить = {};
		for (let оМетаданные of _моМетаданныеПредустановок) {
			const оПредустановка = оМетаданные.амДанные.get(_оНастройки[оМетаданные.сВыбрана].пТекущее);
			if (оПредустановка && оПредустановка.hasOwnProperty(сИмя)) {
				if (пЗначение === оПредустановка[сИмя]) {
					return;
				}
				Проверить(!лНеСохранять);
				оСохранить[оМетаданные.сВыбрана] = _оНастройки[оМетаданные.сВыбрана].пТекущее = оМетаданные.сНастраиваемая;
				оСохранить[оМетаданные.сЗаполнена] = _оНастройки[оМетаданные.сЗаполнена].пТекущее = true;
				for (let сИмяПредустановки of Object.keys(оПредустановка)) {
					оСохранить[сИмяПредустановки] = _оНастройки[сИмяПредустановки].пТекущее = оПредустановка[сИмяПредустановки];
				}
				ОбновитьСписокПредустановок(оМетаданные);
				break;
			}
		}
		if (_оНастройки[сИмя].пТекущее !== пЗначение) {
			оСохранить[сИмя] = _оНастройки[сИмя].пТекущее = пЗначение;
		}
		if (!лНеСохранять) {
			НачатьСохранение(оСохранить, false);
		}
	}
	function ОбновитьСписокПредустановок(оМетаданные) {
		const узСписок = Узел(оМетаданные.сСписок);
		узСписок.length = 0;
		const сВыбрать = _оНастройки[оМетаданные.сВыбрана].пТекущее;
		for (let сИмя of оМетаданные.амДанные.keys()) {
			узСписок.add(new Option(Текст(сИмя), сИмя, сИмя === сВыбрать, сИмя === сВыбрать));
		}
		if (_оНастройки[оМетаданные.сЗаполнена].пТекущее) {
			узСписок.add(new Option(Текст(оМетаданные.сНастраиваемая), оМетаданные.сНастраиваемая, оМетаданные.сНастраиваемая === сВыбрать, оМетаданные.сНастраиваемая === сВыбрать));
		}
		Проверить(узСписок.value);
		return узСписок;
	}
	const ОбработатьИзменениеПредустановки = ДобавитьОбработчикИсключений(оСобытие => {
		for (let оМетаданные of _моМетаданныеПредустановок) {
			if (оМетаданные.сСписок === оСобытие.target.id) {
				Проверить(оСобытие.target.value);
				Изменить(оМетаданные.сВыбрана, оСобытие.target.value);
				м_События.ПослатьСобытие(оМетаданные.сСобытие);
				return;
			}
		}
		Проверить(false);
	});
	function НастроитьСпискиПредустановок() {
		for (let оМетаданные of _моМетаданныеПредустановок) {
			ОбновитьСписокПредустановок(оМетаданные).addEventListener('change', ОбработатьИзменениеПредустановки);
		}
	}
	function ПолучитьПараметрыНастройки(сИмя) {
		Проверить(typeof сИмя == 'string');
		Проверить(_оНастройки.hasOwnProperty(сИмя));
		return _оНастройки[сИмя];
	}
	function ПолучитьДанныеДляОтчета() {
		const оОтчет = {};
		for (let сИмя of Object.keys(_оНастройки)) {
			if (!_мноНеСветить.has(сИмя) && (_мноПостоянныеНастройки.has(сИмя) || _оНастройки[сИмя].пТекущее !== _оНастройки[сИмя].пНачальное)) {
				оОтчет[сИмя] = _оНастройки[сИмя].пТекущее;
			}
		}
		return оОтчет;
	}
	function СохранитьИзменения() {
		if (_чТаймерОтложенногоСохранения !== 0) {
			clearTimeout(_чТаймерОтложенногоСохранения);
			ЗавершитьСохранение();
		}
	}
	window.addEventListener('beforeunload', СохранитьИзменения);
	return {
		Восстановить,
		Сбросить,
		Экспорт,
		Импорт,
		Получить,
		Изменить,
		СохранитьИзменения,
		ПолучитьПараметрыНастройки,
		НастроитьСпискиПредустановок,
		ПолучитьДанныеДляОтчета
	};
})();


================================================
FILE: content.css
================================================
@charset "utf-8";:root{--tw5-ширинаспискасмайликов: 90rem}.tw-balloon[data-a-target=chat-settings-balloon],.chat-input__badge-carousel .tw-balloon{max-width:unset}html .chat-settings__popover{max-width:calc(100vw - 2rem);width:43rem}.chat-input__badge-carousel div[direction=top-right]{right:auto;left:0;margin-right:0}.tw-balloon[data-a-target=emote-picker]{max-width:calc(100vw - 2rem)}html .emote-picker{max-width:100%;width:var(--tw5-ширинаспискасмайликов)}.community-points-summary+.tw-transition>div>div>.tw-balloon{max-width:unset}.reward-center__content{max-width:calc(100vw - 2rem)}html .viewer-card-layer__draggable{width:unset}.bttv-rs-popover[class*=bttv-EmoteMenuPopover-module__popover-]{top:auto!important;left:auto!important;right:1rem!important;bottom:10rem!important;max-width:100vw!important}@media (max-width:20.9rem){.bttv-rs-popover[class*=bttv-EmoteMenuPopover-module__popover-]{right:0!important}div[class*=bttv-Emotes-module__row-]{height:auto!important;flex-wrap:wrap!important}}@media (max-height:33em){:root{--tw5-высотазаголовка: 0px;--tw5-отступокна: .2rem;--tw5-нижнийотступчата: .4rem;--tw5-высотавводасообщения: var(--button-size-default);--tw5-вышевводасообщения-в: (var(--tw5-нижнийотступчата) + var(--tw5-высотавводасообщения))}html .stream-chat-header{height:var(--tw5-высотазаголовка);overflow:hidden;z-index:var(--z-index-default)!important}.stream-chat-header>div:last-child{position:fixed!important;bottom:var(--tw5-нижнийотступчата)!important;margin-right:.5rem!important}html .chat-scrollable-area__message-container{padding-bottom:0!important}html .chat-input{padding-bottom:var(--tw5-нижнийотступчата)!important;margin-right:var(--button-size-default)}html .chat-input__textarea textarea:empty{height:var(--tw5-высотавводасообщения)!important;min-height:unset;padding-top:.3rem;padding-bottom:0}html .chat-input__input-icons{padding-bottom:0}html .chat-input__badge-carousel{top:unset!important;bottom:0!important}.chat-input>div:last-child{display:flex;align-items:flex-end}.chat-input>div:last-child>div:first-child{flex:1}html .chat-input__buttons-container{margin-top:0!important}.chat-input__buttons-container>div>div>p{display:none}.tw-balloon[data-a-target=chat-settings-balloon],.tw-balloon[data-a-target=emote-picker],.community-points-summary+.tw-transition>div>div[direction=top-left],.bttv-rs-popover,.chat-input .ffz-attached--right.ffz-attached--up{position:fixed!important;top:auto!important;right:var(--tw5-отступокна)!important;bottom:calc(var(--tw5-вышевводасообщения-в))!important;left:auto!important;margin:0!important}.tw-balloon[data-a-target=chat-settings-balloon]{bottom:var(--tw5-отступокна)!important}.chat-input__badge-carousel div[direction=top-right]{position:fixed;bottom:var(--tw5-отступокна);left:var(--tw5-отступокна);margin:0}html .chat-settings__popover{display:flex;flex-direction:column;max-height:calc(100vh - var(--tw5-отступокна)*2)!important}.chat-settings__popover>.scrollable-area{max-height:unset!important}html .chat-settings__header,html .chat-identity-menu__header{min-height:unset;padding-left:0!important;padding-right:0!important;flex-shrink:0}html .emote-picker__search-content{padding:0!important}.emote-picker__search-content+div{max-height:calc(100vh - var(--tw5-вышевводасообщения-в) - 3rem - var(--tw5-отступокна));overflow-y:hidden}html .emote-grid-section__header-title{padding-top:0!important;padding-bottom:.2rem!important}.emote-picker__content-block>div{padding-bottom:.2rem!important}html .emote-picker__nav-content,html .emote-picker__nav-content-whisper,html .emote-picker__nav-content-overflow.emote-picker__nav-content-overflow.emote-picker__nav-content-overflow,html .emote-picker__nav-content-overflow-whisper,html .emote-picker__tab-content,html .emote-picker__tab-content-whisper{max-height:unset!important;height:unset!important}html .chat-viewers__header{height:3.1rem}html .chat-viewers__filter{position:absolute;left:6rem;top:0;margin:0!important}html .tw5-parent-channel-leaderboard{z-index:var(--z-index-default)!important}.channel-leaderboard{position:absolute;top:0;right:calc(12px + var(--button-size-default))}html .channel-leaderboard-header-rotating,html .bits-leaderboard-expanded__header{height:unset}.channel-leaderboard-header-rotating__users+div,.bits-leaderboard-expanded__scrollable+div,html .bits-leaderboard-expanded__collapse{display:none!important}.channel-leaderboard>div>div:not(.channel-leaderboard-header-rotating){display:flex;flex-direction:column;max-height:calc(100vh - var(--tw5-вышевводасообщения-в) - var(--tw5-высотазаголовка))}html .bits-leaderboard-expanded__scrollable{max-height:unset!important}.community-highlight-stack__scroll-area--disable{max-width:60rem;margin-left:auto}body>div>div>.ReactModal__Content>div[data-popper-placement=top]{position:fixed!important;top:auto!important;right:auto!important;bottom:0!important;left:0!important;transform:none!important}html .chat-rules-content{width:unset;max-height:calc(100vh - 8px);overflow-y:auto}.viewer-card-mod-logs-page{position:fixed;top:0;right:0;width:40rem;max-width:calc(100% - 25rem);min-height:100%!important;max-height:100%!important;border-left:1px solid var(--color-border-base)}.community-points-summary+.tw-transition>div>div[direction=top-left]{bottom:calc(0px - var(--tw5-нижнийотступчата))!important}html .reward-center__content{max-height:100vh}.reward-center__content>div>.tw-popover-header{padding-top:0!important;padding-bottom:0!important;min-height:0}.chat-room__viewer-card{top:0}.bttv-rs-popover[class*=bttv-EmoteMenuPopover-module__popover-]{bottom:calc(var(--tw5-вышевводасообщения-в))!important;height:auto!important}div[class*=bttv-EmoteMenu-module__header-]{padding-top:0!important;padding-bottom:0!important}div[class*=bttv-Emotes-module__header-]{height:auto!important}div[class*=bttv-EmoteMenu-module__content-]{max-height:calc(100vh - var(--tw5-вышевводасообщения-в) - 37px)}div[class*=bttv-Emotes-module__emotesContainer-]{height:100%!important}div[class*=bttv-EmoteMenu-module__content-]+.bttv-rs-divider,div[class*=bttv-Preview-module__preview-]{display:none}html .ffz--emote-picker{width:var(--tw5-ширинаспискасмайликов);display:block!important}.ffz--emote-picker .emote-picker>.tw-flex{max-height:calc(100vh - var(--tw5-вышевводасообщения-в) - 3.7rem - 1px - var(--tw5-отступокна))!important;overflow-y:hidden}.ffz--emote-picker .emote-picker__controls-container{display:flex}.ffz--emote-picker .emote-picker__controls-container>.tw-border-t.tw-pd-1{order:1;padding:0 .4rem 0 0!important}.ffz--emote-picker .emote-picker__controls-container>.tw-border-t.tw-pd-1>.tw-flex{height:100%;align-items:center}.ffz--emote-picker .emote-picker__tab-nav-container{flex:1}.ffz--emote-picker .ffz-input.tw-full-width{width:13em!important}}


================================================
FILE: content.js
================================================
'use strict';

const ХРАНИТЬ_СОСТОЯНИЕ_КАНАЛА = 2e4;

let г_оРазобранныйАдрес = null;

let г_сСпособЗаданияАдреса = '';

let г_чПоследняяПроверка = 0;

let г_оЗапрос = null;

let г_сКодКанала = '';

let г_лИдетТрансляция = false;

const м_Отладка = {
	ЗавершитьРаботуИПоказатьСообщение: завершитьРаботу,
	ПойманоИсключение: завершитьРаботу
};

function завершитьРаботу(пИсключениеИлиКодСообщения) {
	if (!г_лРаботаЗавершена) {
		console.error(пИсключениеИлиКодСообщения);
		try {
			г_лРаботаЗавершена = true;
			м_Журнал.Окак('[content.js] Работа завершена');
		} catch (_) {}
	}
	throw void 0;
}

function задатьАдресСтраницы(сАдрес, лЗаменить = false) {
	location[лЗаменить ? 'replace' : 'assign'](сАдрес);
}

function вставитьНаСтраницу(фВставить) {
	const узСкрипт = document.createElement('script');
	узСкрипт.textContent = `\n\t\t'use strict';\n\t\t(${фВставить})();\n\t`;
	(document.head || document.documentElement).appendChild(узСкрипт);
	узСкрипт.remove();
}

function этотАдресМожноПеренаправлять(оАдрес) {
	return !оАдрес.search.includes(АДРЕС_НЕ_ПЕРЕНАПРАВЛЯТЬ);
}

function получитьНеперенаправляемыйАдрес(оАдрес) {
	return `${оАдрес.protocol}//${оАдрес.host}${оАдрес.pathname}${оАдрес.search.length > 1 ? `${оАдрес.search}&${АДРЕС_НЕ_ПЕРЕНАПРАВЛЯТЬ}` : `?${АДРЕС_НЕ_ПЕРЕНАПРАВЛЯТЬ}`}${оАдрес.hash}`;
}

function запретитьАвтоперенаправлениеЭтойСтраницы() {
	if (этотАдресМожноПеренаправлять(location)) {
		history.replaceState(history.state, '', получитьНеперенаправляемыйАдрес(location));
	}
}

разобратьАдрес.ЭТО_НЕ_КОД_КАНАЛА = new Set([ 'directory', 'embed', 'friends', 'inventory', 'login', 'logout', 'manager', 'messages', 'payments', 'popout', 'search', 'settings', 'signup', 'subscriptions', 'team' ]);

function разобратьАдрес(оАдрес) {
	let лМобильнаяВерсия = false;
	let сСтраница = 'НЕИЗВЕСТНАЯ';
	let сКодКанала = '';
	let лМожноПеренаправлять = false;
	if (оАдрес.protocol === 'https:' && (оАдрес.host === 'www.twitch.tv' || оАдрес.host === 'm.twitch.tv')) {
		лМобильнаяВерсия = оАдрес.host === 'm.twitch.tv';
		const мсЧасти = оАдрес.pathname.split('/');
		if (мсЧасти.length <= 3 && мсЧасти[1] && !мсЧасти[2]) {
			if (!разобратьАдрес.ЭТО_НЕ_КОД_КАНАЛА.has(мсЧасти[1])) {
				сСтраница = 'ВОЗМОЖНО_ПРЯМАЯ_ТРАНСЛЯЦИЯ';
				сКодКанала = decodeURIComponent(мсЧасти[1]);
				лМожноПеренаправлять = этотАдресМожноПеренаправлять(оАдрес);
			}
		} else if ((мсЧасти[1] === 'embed' || мсЧасти[1] === 'popout') && мсЧасти[2] && мсЧасти[3] === 'chat') {
			сСтраница = 'ЧАТ_КАНАЛА';
			сКодКанала = decodeURIComponent(мсЧасти[2]);
		}
	}
	м_Журнал.Окак(`[content.js] Адрес разобран: Страница=${сСтраница} КодКанала=${сКодКанала} МожноПеренаправлять=${лМожноПеренаправлять}`);
	return {
		лМобильнаяВерсия,
		сСтраница,
		сКодКанала,
		лМожноПеренаправлять
	};
}

function запроситьСостояниеКанала(оРазобранныйАдрес) {
	if (!оРазобранныйАдрес.лМожноПеренаправлять || !м_Настройки.Получить('лАвтоперенаправлениеРазрешено')) {
		return;
	}
	if (!г_оЗапрос && г_сКодКанала === оРазобранныйАдрес.сКодКанала && performance.now() - г_чПоследняяПроверка < ХРАНИТЬ_СОСТОЯНИЕ_КАНАЛА) {
		return;
	}
	if (г_оЗапрос && г_сКодКанала === оРазобранныйАдрес.сКодКанала) {
		return;
	}
	отменитьЗапрос();
	г_сКодКанала = оРазобранныйАдрес.сКодКанала;
	г_чПоследняяПроверка = -1;
	отправитьЗапрос();
}

function измененАдресСтраницы(сСпособ) {
	г_оРазобранныйАдрес = разобратьАдрес(location);
	г_сСпособЗаданияАдреса = сСпособ;
	if (!г_оРазобранныйАдрес.лМожноПеренаправлять || !м_Настройки.Получить('лАвтоперенаправлениеРазрешено')) {
		if (г_чПоследняяПроверка === -2) {
			г_чПоследняяПроверка = -1;
		}
		return;
	}
	if (!г_оЗапрос && г_сКодКанала === г_оРазобранныйАдрес.сКодКанала && performance.now() - г_чПоследняяПроверка < ХРАНИТЬ_СОСТОЯНИЕ_КАНАЛА) {
		if (г_лИдетТрансляция) {
			перенаправитьНаНашПроигрыватель(г_сКодКанала);
		}
		return;
	}
	if (г_оЗапрос && г_сКодКанала === г_оРазобранныйАдрес.сКодКанала) {
		г_чПоследняяПроверка = -2;
		return;
	}
	отменитьЗапрос();
	г_сКодКанала = г_оРазобранныйАдрес.сКодКанала;
	г_чПоследняяПроверка = -2;
	отправитьЗапрос();
}

function отменитьЗапрос() {
	if (г_оЗапрос) {
		м_Журнал.Окак('[content.js] Отменяю незавершенный запрос');
		г_оЗапрос.abort();
	}
}

function отправитьЗапрос() {
	м_Журнал.Окак(`[content.js] Посылаю запрос для канала ${г_сКодКанала}`);
	г_оЗапрос = new XMLHttpRequest();
	г_оЗапрос.addEventListener('loadend', обработатьОтвет);
	г_оЗапрос.open('POST', 'https://gql.twitch.tv/gql#origin=twilight');
	г_оЗапрос.responseType = 'json';
	г_оЗапрос.timeout = 15e3;
	г_оЗапрос.setRequestHeader('Accept-Language', 'en-US');
	г_оЗапрос.setRequestHeader('Client-ID', 'kimne78kx3ncx6brgo4mv6wki5h1ko');
	г_оЗапрос.setRequestHeader('Content-Type', 'text/plain; charset=UTF-8');
	if (отправитьЗапрос._мсИдУстройства === void 0) {
		отправитьЗапрос._мсИдУстройства = document.cookie.match(/(?:^|;[ \t]?)unique_id=([^;]+)/);
	}
	if (отправитьЗапрос._мсИдУстройства) {
		г_оЗапрос.setRequestHeader('X-Device-ID', отправитьЗапрос._мсИдУстройства[1]);
	}
	г_оЗапрос.send(создатьТелоЗапросаGql(`query($login: String!) {
			user(login: $login) {
				stream {
					isEncrypted
				}
				watchParty {
					session {
						state
					}
				}
			}
		}`, {
		login: г_сКодКанала
	}));
}

function обработатьОтвет({target: оЗапрос}) {
	г_оЗапрос = null;
	if (оЗапрос.status >= 200 && оЗапрос.status < 300 && ЭтоОбъект(оЗапрос.response)) {
		const лПеренаправить = г_чПоследняяПроверка === -2;
		г_чПоследняяПроверка = performance.now();
		let лТрансляцияЗавершенаИлиЗакодирована = true, лСовместныйПросмотр = false;
		try {
			лТрансляцияЗавершенаИлиЗакодирована = оЗапрос.response.data.user.stream.isEncrypted === true;
			лСовместныйПросмотр = оЗапрос.response.data.user.watchParty.session.state === 'IN_PROGRESS';
		} catch (_) {}
		г_лИдетТрансляция = !лТрансляцияЗавершенаИлиЗакодирована && !лСовместныйПросмотр;
		if (г_лИдетТрансляция && лПеренаправить) {
			перенаправитьНаНашПроигрыватель(г_сКодКанала);
		}
	} else {
		г_чПоследняяПроверка = 0;
	}
}

function запуститьНашПроигрыватель(сКодКанала) {
	const сАдресПроигрывателя = ПолучитьАдресНашегоПроигрывателя(сКодКанала);
	м_Журнал.Окак(`[content.js] Перехожу на страницу ${сАдресПроигрывателя}`);
	запретитьАвтоперенаправлениеЭтойСтраницы();
	задатьАдресСтраницы(сАдресПроигрывателя);
}

function перенаправитьНаНашПроигрыватель(сКодКанала) {
	const сАдресПроигрывателя = ПолучитьАдресНашегоПроигрывателя(сКодКанала);
	м_Журнал.Окак(`[content.js] Меняю адрес страницы с ${location.href} на ${сАдресПроигрывателя}`);
	document.documentElement.setAttribute('data-tw5-перенаправление', сАдресПроигрывателя);
	задатьАдресСтраницы(сАдресПроигрывателя, true);
}

function обработатьPointerDownИClick(оСобытие) {
	if (г_оРазобранныйАдрес) {
		const узСсылка = оСобытие.target.closest('a[href]');
		if (узСсылка && оСобытие.isPrimary !== false && оСобытие.button === ЛЕВАЯ_КНОПКА && !оСобытие.shiftKey && !оСобытие.ctrlKey && !оСобытие.altKey && !оСобытие.metaKey) {
			м_Журнал.Окак(`[content.js] Произошло событие ${оСобытие.type} у ссылки ${узСсылка.href}`);
			запроситьСостояниеКанала(разобратьАдрес(узСсылка));
		}
	}
}

function обработатьPopState(оСобытие) {
	if (г_оРазобранныйАдрес) {
		м_Журнал.Окак(`[content.js] Произошло событие popstate ${location.href}`);
		if (получитьВерсиюДвижкаБраузера() < 67) {
			document.title = 'Twitch';
		}
		измененАдресСтраницы('POPSTATE');
		if (document.documentElement.hasAttribute('data-tw5-перенаправление')) {
			м_Журнал.Окак('[content.js] Скрываю событие popstate');
			оСобытие.stopImmediatePropagation();
		}
	}
}

function обработатьPushState(оСобытие) {
	м_Журнал.Окак(`[content.js] Произошло событие tw5-pushstate ${location.href}`);
	измененАдресСтраницы('PUSHSTATE');
}

function обработатьЗапускНашегоПроигрывателя(оСобытие) {
	оСобытие.preventDefault();
	if (оСобытие.button === ЛЕВАЯ_КНОПКА && г_оРазобранныйАдрес.сСтраница === 'ВОЗМОЖНО_ПРЯМАЯ_ТРАНСЛЯЦИЯ') {
		запуститьНашПроигрыватель(г_оРазобранныйАдрес.сКодКанала);
	} else {
		м_Журнал.Окак(`[content.js] Не запускать проигрыватель Кнопка=${оСобытие.button} Страница=${г_оРазобранныйАдрес.сСтраница}`);
	}
}

function обработатьПереключениеАвтоперенаправления(оСобытие) {
	оСобытие.preventDefault();
	const л = !м_Настройки.Получить('лАвтоперенаправлениеРазрешено');
	м_Журнал.Окак(`[content.js] Автоперенаправление разрешено: ${л}`);
	м_Настройки.Изменить('лАвтоперенаправлениеРазрешено', л);
	обновитьНашуКнопку();
}

function обработатьЗакрытиеСправки(оСобытие) {
	оСобытие.preventDefault();
	м_Журнал.Окак('[content.js] Закрываю справку');
	оСобытие.currentTarget.classList.remove('tw5-справка');
	оСобытие.currentTarget.removeEventListener('mouseover', обработатьЗакрытиеСправки);
	оСобытие.currentTarget.removeEventListener('touchstart', обработатьЗакрытиеСправки, {
		passive: false
	});
	м_Настройки.Изменить('лАвтоперенаправлениеЗамечено', true);
}

function получитьНашуКнопку() {
	return document.getElementById('tw5-автоперенаправление');
}

function обновитьНашуКнопку() {
	получитьНашуКнопку().classList.toggle('tw5-запрещено', !м_Настройки.Получить('лАвтоперенаправлениеРазрешено'));
}

function вставитьНашуКнопку() {
	if (г_оРазобранныйАдрес.лМобильнаяВерсия) {
		const узКудаВставлять = document.querySelector('.top-nav__menu > div:last-child > div:first-child');
		if (!узКудаВставлять) {
			return false;
		}
		м_Журнал.Окак('[content.js] Вставляю нашу кнопку для мобильного сайта');
		узКудаВставлять.insertAdjacentHTML('afterend', `
		<div class="tw5-автоперенаправление tw5-js-удалить">
			<button id="tw5-автоперенаправление">
				<svg viewBox="0 0 128 128">
					<g>
						<path d="M64 53h-19.688l-1.313-15.225h57l1.313-14.7h-74.55l3.937 44.888h51.712l-1.8 19.162-16.6 4.463l-16.8-4.463-1.1-11.813h-14.7l1.838 23.362 30.713 8.4l30.45-8.4 4.2-45.675z"/>
					</g>
				</svg>
			</button>
			<style>
				.tw5-автоперенаправление
				{
					flex: 0 0;
					margin: 0 0 0 .5rem;
				}
				.tw5-автоперенаправление button
				{
					align-items: center;
					background-color: transparent;
					border-radius: .4rem;
					color: #0e0e10;
					display: inline-flex;
					height: 3.6rem;
					justify-content: center;
					width: 3.6rem;
				}
				.tw-root--theme-dark .tw5-автоперенаправление button
				{
					color: #efeff1;
				}
				.tw5-автоперенаправление button:active
				{
					background-color: rgba(0, 0, 0, 0.05);
				}
				.tw-root--theme-dark .tw5-автоперенаправление button:active
				{
					background-color: rgba(255, 255, 255, 0.15);
				}
				.tw5-автоперенаправление svg
				{
					fill: currentColor;
					width: 75%;
				}
				.tw5-запрещено svg
				{
					opacity: .4;
				}
			</style>
		</div>
		`);
	} else {
		const узКудаВставлять = document.querySelector('.top-nav__menu > div:last-child > div:first-child');
		if (!узКудаВставлять) {
			return false;
		}
		м_Журнал.Окак('[content.js] Вставляю нашу кнопку');
		узКудаВставлять.insertAdjacentHTML('afterend', `
		<div class="tw5-автоперенаправление tw5-js-удалить">
			<button id="tw5-автоперенаправление">
				<svg viewBox="0 0 128 128">
					<g>
						<path d="M64 53h-19.688l-1.313-15.225h57l1.313-14.7h-74.55l3.937 44.888h51.712l-1.8 19.162-16.6 4.463l-16.8-4.463-1.1-11.813h-14.7l1.838 23.362 30.713 8.4l30.45-8.4 4.2-45.675z"/>
					</g>
				</svg>
			</button>
			<div class="tw5-tooltip">
				${м_i18n.GetMessage('F0600')}
			</div>
			<style>
				.tw5-автоперенаправление
				{
					flex: 0 0;
					margin: 0 .5rem;
					position: relative;
				}
				.tw5-автоперенаправление button
				{
					align-items: center;
					background-color: var(--color-background-button-text-default);
					border-radius: var(--border-radius-medium);
					color: var(--color-fill-button-icon);
					display: inline-flex;
					height: var(--button-size-default);
					justify-content: center;
					width: var(--button-size-default);
				}
				.tw5-автоперенаправление button:hover
				{
					background-color: var(--color-background-button-text-hover);
					color: var(--color-fill-button-icon-hover);
				}
				.tw5-автоперенаправление button:active
				{
					background-color: var(--color-background-button-text-active);
					color: var(--color-fill-button-icon-active);
				}
				.tw5-автоперенаправление svg
				{
					fill: currentColor;
					width: 75%;
				}
				.tw5-запрещено svg
				{
					opacity: .4;
				}
				.tw5-tooltip
				{
					background-color: var(--color-background-tooltip);
					border-radius: var(--border-radius-medium);
					color: var(--color-text-tooltip);
					display: none;
					font-size: var(--font-size-6);
					font-weight: var(--font-weight-semibold);
					left: 50%;
					line-height: var(--line-height-heading);
					margin-top: 6px;
					padding: 3px 6px;
					pointer-events: none;
					position: absolute;
					text-align: left;
					top: 100%;
					transform: translateX(-50%);
					user-select: none;
					white-space: nowrap;
					z-index: var(--z-index-balloon);
				}
				.tw5-tooltip::after
				{
					background-color: inherit;
					content: "";
					height: 6px;
					left: 50%;
					position: absolute;
					top: 0;
					transform: rotate(45deg) translateX(-68%);
					width: 6px;
					z-index: var(--z-index-below);
				}
				.tw5-автоперенаправление:hover .tw5-tooltip
				{
					display: block;
				}
				.tw5-справка .tw5-tooltip
				{
					background: #f00000;
					color: #fff;
					cursor: pointer;
					display: block;
					pointer-events: auto;
				}
			</style>
		</div>
		`);
	}
	const узКнопка = получитьНашуКнопку();
	узКнопка.addEventListener('click', обработатьЗапускНашегоПроигрывателя);
	узКнопка.addEventListener('contextmenu', обработатьПереключениеАвтоперенаправления);
	if (!г_оРазобранныйАдрес.лМобильнаяВерсия && !м_Настройки.Получить('лАвтоперенаправлениеЗамечено')) {
		узКнопка.parentNode.classList.add('tw5-справка');
		узКнопка.parentNode.addEventListener('mouseover', обработатьЗакрытиеСправки);
		узКнопка.parentNode.addEventListener('touchstart', обработатьЗакрытиеСправки, {
			passive: false
		});
	}
	обновитьНашуКнопку();
	return true;
}

function вставитьНашуКнопкуЕслиНужно() {
	return Boolean(получитьНашуКнопку()) || вставитьНашуКнопку();
}

function вставитьНашуКнопкуВПервыйРаз() {
	вставитьНашуКнопку();
	if (г_оРазобранныйАдрес.лМобильнаяВерсия) {
		new MutationObserver(моЗаписи => {
			вставитьНашуКнопкуЕслиНужно();
		}).observe(document.head || document.documentElement, {
			childList: true,
			subtree: true
		});
	} else {
		window.addEventListener('tw5-изменензаголовок', вставитьНашуКнопкуЕслиНужно);
	}
}

function перехватитьФункции() {
	let _лНеПерехватывать = false;
	window.addEventListener('tw5-неперехватывать', () => {
		_лНеПерехватывать = true;
	});
	const oTitleDescriptor = Object.getOwnPropertyDescriptor(Document.prototype, 'title');
	Object.defineProperty(document, 'title', {
		configurable: oTitleDescriptor.configurable,
		enumerable: oTitleDescriptor.enumerable,
		get() {
			return oTitleDescriptor.get.call(this);
		},
		set(title) {
			if (_лНеПерехватывать) {
				oTitleDescriptor.set.call(this, title);
			} else if (this.documentElement.hasAttribute('data-tw5-перенаправление')) {} else {
				oTitleDescriptor.set.call(this, title);
				window.dispatchEvent(new CustomEvent('tw5-изменензаголовок'));
			}
		}
	});
	const fPushState = history.pushState;
	history.pushState = function(state, title) {
		if (_лНеПерехватывать) {
			fPushState.apply(this, arguments);
		} else if (document.documentElement.hasAttribute('data-tw5-перенаправление')) {} else {
			const сБыло = location.pathname;
			fPushState.apply(this, arguments);
			if (сБыло !== location.pathname) {
				oTitleDescriptor.set.call(document, 'Twitch');
				window.dispatchEvent(new CustomEvent('tw5-pushstate'));
			}
		}
	};
}

function ждатьЗагрузкуДомика() {
	return new Promise(фВыполнить => {
		if (document.readyState !== 'loading') {
			фВыполнить();
		} else {
			document.addEventListener('DOMContentLoaded', function ОбработатьЗагрузкуДомика() {
				document.removeEventListener('DOMContentLoaded', ОбработатьЗагрузкуДомика);
				фВыполнить();
			});
		}
	});
}

function ждатьЗагрузкуСтраницы() {
	return new Promise(фВыполнить => {
		if (document.readyState === 'complete') {
			фВыполнить();
		} else {
			window.addEventListener('load', function ОбработатьЗагрузкуСтраницы() {
				window.removeEventListener('load', ОбработатьЗагрузкуСтраницы);
				фВыполнить();
			});
		}
	});
}

function вставитьСторонниеРасширения() {
	chrome.runtime.sendMessage({
		сЗапрос: 'ВставитьСторонниеРасширения'
	}, оСообщение => {
		if (chrome.runtime.lastError) {
			м_Журнал.Окак(`[content.js] Не удалось послать запрос на вставку сторонних расширений: ${chrome.runtime.lastError.message}`);
			return;
		}
		//! оСообщение.сСторонниеРасширения contains a limited set of known browser extensions that are currently
		//! installed and enabled in the browser. See обработатьСообщениеЧата() in player.js. Load those
		//! extensions into <iframe>. Chrome itself cannot load installed extensions into another extension.
		//! See https://bugs.chromium.org/p/chromium/issues/detail?id=599167
				if (оСообщение.сСторонниеРасширения.includes('BTTV ')) {
			ждатьЗагрузкуСтраницы().then(() => {
				
				//! BetterTTV browser extension
				//! https://betterttv.com/
				//! https://chrome.google.com/webstore/detail/ajopnjidmegmdimjlfnijceegpefgped
				const script = document.createElement('script');
				script.id = 'betterttv';
				script.src = 'https://cdn.betterttv.net/betterttv.js';
				document.head.appendChild(script);
			});
		}
		if (оСообщение.сСторонниеРасширения.includes('FFZ ')) {
			ждатьЗагрузкуДомика().then(() => {
				
				//! FrankerFaceZ browser extension
				//! https://www.frankerfacez.com/
				//! https://chrome.google.com/webstore/detail/fadndhdgpmmaapbmfcknlfgcflmmmieb
				const script = document.createElement('script');
				script.id = 'ffz_script';
				script.src = 'https://cdn.frankerfacez.com/script/script.min.js';
				document.head.appendChild(script);
			});
		}
	});
}

function разрешитьРаботуЧата() {
	const fGetItem = Storage.prototype.getItem;
	Storage.prototype.getItem = function(сИмя) {
		let сЗначение = fGetItem.apply(this, arguments);
		if (сИмя === 'TwitchCache:Layout' && сЗначение) {
			сЗначение = сЗначение.replace('"isRightColumnClosedByUserAction":true', '"isRightColumnClosedByUserAction":false');
		}
		return сЗначение;
	};
}

function изменитьСтильЧата() {
	const узСтиль = document.createElement('link');
	узСтиль.rel = 'stylesheet';
	узСтиль.href = chrome.runtime.getURL('content.css');
	узСтиль.className = 'tw5-js-удалить';
	(document.head || document.documentElement).appendChild(узСтиль);
}

function изменитьПоведениеЧата() {
	window.addEventListener('click', оСобытие => {
		if (оСобытие.button !== ЛЕВАЯ_КНОПКА) {
			return;
		}
		const узСсылка = оСобытие.target.closest('a[href^="http:"],a[href^="https:"],a[href]:not([href=""]):not([href^="#"]):not([href*=":"]):not([href$="/not-a-location"])');
		if (!узСсылка) {
			return;
		}
		м_Журнал.Окак(`[content.js] Открываю ссылку в новой вкладке: ${узСсылка.getAttribute('href')}`);
		узСсылка.target = '_blank';
		оСобытие.stopImmediatePropagation();
	}, true);
	const оНаблюдатель = new MutationObserver(моЗаписи => {
		const сэл = document.getElementsByClassName('channel-leaderboard');
		if (сэл.length !== 0) {
			сэл[0].parentElement.parentElement.classList.add('tw5-parent-channel-leaderboard');
			оНаблюдатель.disconnect();
		}
	});
	оНаблюдатель.observe(document.body || document.documentElement, {
		childList: true,
		subtree: true
	});
	setTimeout(() => оНаблюдатель.disconnect(), 6e4);
}

function удалитьХвостыСтаройВерсии() {}

ДобавитьОбработчикИсключений(() => {
	м_Журнал.Окак(`[content.js] Запущен ${performance.now().toFixed()}мс ${location.href}`);
	if (разобратьАдрес(location).сСтраница === 'ЧАТ_КАНАЛА') {
		вставитьНаСтраницу(разрешитьРаботуЧата);
		if (window.top !== window) {
			вставитьСторонниеРасширения();
			изменитьСтильЧата();
			изменитьПоведениеЧата();
		}
		return;
	}
	удалитьХвостыСтаройВерсии();
	const сСобытие = window.PointerEvent ? 'pointerdown' : 'mousedown';
	window.addEventListener(сСобытие, обработатьPointerDownИClick, true);
	window.addEventListener('click', обработатьPointerDownИClick, true);
	window.addEventListener('popstate', обработатьPopState);
	м_Настройки.Восстановить().then(() => {
		измененАдресСтраницы('LOAD');
		window.addEventListener('tw5-pushstate', обработатьPushState);
		вставитьНаСтраницу(перехватитьФункции);
		вставитьНашуКнопкуВПервыйРаз();
	}).catch(м_Отладка.ПойманоИсключение);
})();


================================================
FILE: gqltoken.js
================================================
'use strict';

{
	function перехватитьФункцию() {
		const оригинальнаяФункция = window.fetch;
		window.fetch = function(адрес, параметры) {
			const обещание = оригинальнаяФункция(адрес, параметры);
			if (адрес === 'https://gql.twitch.tv/integrity' && параметры && параметры.method && параметры.method.toUpperCase() === 'POST' && параметры.headers && параметры.headers.Authorization) {
				обещание.then(ответ => {
					if (ответ.ok && ответ.status === 200) {
						return ответ.clone().json().then(({token: сТокен, expiration: чПротухнетПосле}) => {
							if (typeof сТокен == 'string' && сТокен && Number.isSafeInteger(чПротухнетПосле)) {
								const текущееВремя = Date.now();
								чПротухнетПосле = Math.min(Math.max(чПротухнетПосле - 3 * 60 * 1e3, текущееВремя + 1 * 60 * 60 * 1e3), текущееВремя + 24 * 60 * 60 * 1e3);
								document.cookie = `tw5~gqltoken=${encodeURIComponent(JSON.stringify({
									сТокен,
									чПротухнетПосле
								}))}; path=/tw5~storage/; samesite=none; secure; max-age=86400`;
							}
						});
					}
				}).catch(причина => {});
			}
			return обещание;
		};
	}
	function вставитьНаСтраницу(функция) {
		const скрипт = document.createElement('script');
		скрипт.textContent = `\n\t\t'use strict';\n\t\t(${функция})();\n\t`;
		(document.head || document.documentElement).appendChild(скрипт);
		скрипт.remove();
	}
	вставитьНаСтраницу(перехватитьФункцию);
}


================================================
FILE: LICENSE
================================================
THE BSD 3-CLAUSE LICENSE; https://opensource.org/licenses/BSD-3-Clause
______________________________________________________________________

Copyright 2016-2023 Alexander Choporov (CoolCmd)

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



ATTRIBUTION
______________________________________________________________________

Title: HTML5 Logo Badge
Author: The WWW Consortium
Source: https://www.w3.org/html/logo/downloads/HTML5_Badge.svg
License: CC BY 3.0

Title: svg-end, svg-busy, svg-pause, svg-play, svg-cut
Author: Freepik; http://www.freepik.com
Source: https://www.flaticon.com
License: CC BY 3.0

Title: svg-mute-false, svg-mute-true, svg-radio0
Author: Keyamoon; http://keyamoon.com
License: GPL or CC BY 4.0

Title: svg-notification, svg-settings, svg-pip-false, svg-pip-true, svg-checkbox0, svg-checkbox1, svg-menu, svg-live, svg-archive, svg-help, svg-follow, svg-donate
Author: Google LLC; https://design.google.com/icons/
License: Apache License Version 2.0

Title: svg-chat
Author: Yannick; http://yanlu.de
Source: https://www.flaticon.com
License: CC BY 3.0

Title: svg-fullscreen-false, svg-fullscreen-true
Author: P.J. Onori; http://somerandomdude.com/
License: CC BY-SA 3.0

Title: svg-channel
Author: Dave Gandy; http://fontawesome.io
Source: https://icomoon.io
License: SIL OFL 1.1; http://scripts.sil.org/OFL

Title: svg-scrolldown
Author: Daniel Bruce; http://www.entypo.com/
Source: https://icomoon.io
License: CC BY-SA 4.0

Title: svg-success
Author: Steve Schoger; https://www.zondicons.com/
License: CC BY 4.0

File: translate.svg
Author: Google LLC
Source: https://commons.wikimedia.org/
License: Public domain



================================================
FILE: manifest.json
================================================
{
	"update_url": "https://clients2.google.com/service/update2/crx",
	"manifest_version": 3,
	"minimum_chrome_version": "88",
	"name": "Alternate Player for Twitch.tv",
	"short_name": "Alternate Player",
	"version": "2025.5.28",
	"description": "__MSG_M0001__",
	"icons": {
	  "128": "manifest.png"
	},
	"author": "Alexander Choporov (CoolCmd)",
	"default_locale": "en",
	"incognito": "split",
	"permissions": [
	  "storage",
	  "cookies",
	  "management",
	  "system.memory",
	  "system.cpu",
	  "declarativeNetRequest"
	],
	"host_permissions": [
	  "*://*.twitch.tv/*",
	  "*://*.twitchcdn.net/*",
	  "*://*.ttvnw.net/*",
	  "*://*.jtvnw.net/*",
	  "*://*.live-video.net/*",
	  "*://*.akamaized.net/*",
	  "*://*.cloudfront.net/*"
	],
	"background": {
	  "service_worker": "background.js"
	},
	"content_scripts": [
	  {
		"matches": [
		  "https://www.twitch.tv/*"
		],
		"exclude_matches": [
		  "https://www.twitch.tv/popout/"
		],
		"js": [
		  "autoclaim.js"
		],
		"all_frames": true,
		"run_at": "document_idle"
	  },
	  {
		"matches": [
		  "https://www.twitch.tv/*"
		],
		"js": [
		  "gqltoken.js"
		],
		"all_frames": true,
		"run_at": "document_start"
	  },
	  {
		"matches": [
		  "https://www.twitch.tv/*",
		  "https://m.twitch.tv/*"
		],
		"exclude_matches": [
		  "https://www.twitch.tv/popout/"
		],
		"js": [
		  "common.js",
		  "content.js"
		],
		"all_frames": true,
		"run_at": "document_start"
	  }
	],
	"web_accessible_resources": [
	  {
		"resources": [
		  "player.html",
		  "content.css"
		],
		"matches": [
		  "https://*.twitch.tv/*"
		]
	  }
	],
	"declarative_net_request": {
	  "rule_resources": [
		{
		  "id": "ruleset_1",
		  "enabled": true,
		  "path": "rules.json"
		}
	  ]
	}
  }


================================================
FILE: player.css
================================================
@charset "utf-8";:root{color-scheme:light;scrollbar-color:#bbb #999a}input,button,select,.радио-значок,.флажок-значок{-webkit-appearance:none;appearance:none;margin:0;border:0;border-radius:0;padding:0;box-shadow:none;color:#111;height:3.217ex}input[type=color],button{border-radius:.125rem;padding:0 .5em;background:linear-gradient(to bottom,#fff ,#f2f2f2 40%,#e0e0e0 60%,#b3b3b3)}input[type=color]:enabled:active,button:enabled:active{background:linear-gradient(to bottom,#b3b3b3 ,#d9d9d9 40%,#e6e6e6)}input[type=color]{display:block;padding:0 3px}input[type=color]:disabled,input[type=range]:disabled,button:disabled,select:empty{opacity:.4}input[type=text],input:not([type]),select{padding:0 .5em;background:#fff;scrollbar-color:#aaa #ddd}input[type=text]:disabled,input:not([type]):disabled,select:disabled{color:#666;background:#f2f2f2}select{border-radius:.125rem;padding-right:1.6em;background-image:url(player.svg#select);background-position:right;background-repeat:no-repeat}.радио-метка+.радио-метка{margin-left:1em}.радио-значок,.флажок-значок{display:inline-block;width:1.4167em;height:1.4167em;vertical-align:middle;background:url(player.svg#radio0) center no-repeat}.флажок-значок{background-image:url(player.svg#checkbox0)}input:checked+.радио-значок{background-image:url(player.svg#radio1)}input:checked+.флажок-значок{background-image:url(player.svg#checkbox1)}.радио-текст{margin-left:.25em;vertical-align:middle}kbd{font:inherit;font-weight:400;text-shadow:none;border:1px solid #eee;border-bottom-color:#aaa;border-radius:.125rem;padding:0 .4em;color:#000;background:#d5d5df}.окно{position:absolute;z-index:4;margin:.25rem;padding:.625rem;border-radius:.125rem;background:linear-gradient(45deg,rgba(var(--сЦветГрадиента),.05) 40%,rgba(var(--сЦветГрадиента),.25)),rgba(var(--сЦветФона),var(--чНепрозрачностьОкна));visibility:hidden;opacity:0;transform:scale(.8)}.окнооткрыто{visibility:visible;opacity:1;transform:none}.анимацияинтерфейса .анимацияокна{transition:.15s ease-out;transition-property:visibility,opacity,transform}.индикаторпрокрутки{width:100%;height:3.217ex;position:relative;top:-.625rem;background:url(player.svg#svg-scrolldown) center no-repeat}.окнооткрыто .индикаторпрокрутки{animation:2.5s linear infinite индикаторпрокрутки}@keyframes индикаторпрокрутки{85%{transform:translateY(0)}90%{transform:translateY(.25rem)}to{transform:translateY(0)}}.тащилка-перехват::after{content:"";position:fixed;top:0;left:0;width:100%;height:100%;z-index:1000}[data-тащилка]{touch-action:none;-webkit-user-select:none;user-select:none}::backdrop{display:none}#проигрывательичат:-webkit-full-screen{width:100%;height:100%;background:0 0}#проигрывательичат:fullscreen{width:100%;height:100%;background:0 0}body{background:#000}#проигрывательичат{height:100%;overflow:hidden;display:flex;align-items:stretch;font:700 .75rem/1.5 Arial,Helvetica,sans-serif;white-space:nowrap;color:rgb(var(--сЦветКнопок));text-shadow:0 .0625rem .0625rem #333}#проигрыватель{min-width:calc(2.125rem*3.56);min-height:calc(2.125rem*2);position:relative;flex:1}.автоскрытие:not([data-состояние="3"]):not([data-состояние="7"]):not([data-окно-открыто]):not(.выборскорости):not(.нетвидео) #проигрыватель{cursor:none}#размерчата:hover,#размерчата.тащилка{opacity:1}.анимацияинтерфейса #размерчата{transition:opacity .35s ease-out}#размерчата:hover+#чат{pointer-events:none}#чат{min-width:160px;min-height:188px;border:0}.скрытьчат #размерчата,.скрытьчат #чат{display:none}#размерчата{flex:0 0 .625rem;margin:0 -.375rem 0 -.25rem;background:linear-gradient(to bottom,rgba(var(--сЦветФона),var(--чНепрозрачность)),rgba(var(--сЦветКнопок),var(--чНепрозрачность)),rgba(var(--сЦветФона),var(--чНепрозрачность))) .1875rem 0%/.125rem 100% no-repeat;cursor:ew-resize;z-index:6;opacity:0}.чатслева #размерчата{flex:0 0 .5rem;margin:0 -.4375rem 0 -.0625rem;background:linear-gradient(to bottom,rgba(var(--сЦветФона),var(--чНепрозрачность)),rgba(var(--сЦветКнопок),var(--чНепрозрачность)),rgba(var(--сЦветФона),var(--чНепрозрачность))) 0% 0%/.125rem 100% no-repeat}.чатслева #проигрывательичат{flex-direction:row-reverse}.чатвнизу #проигрывательичат{flex-direction:column}.чатвверху #проигрывательичат{flex-direction:column-reverse}.чатсправа:not(.автоположениечата) #чат,.чатслева:not(.автоположениечата) #чат{height:100%}.чатвнизу:not(.автоположениечата) #чат,.чатвверху:not(.автоположениечата) #чат{width:100%}.чатвнизу:not(.автоположениечата) #размерчата,.чатвверху:not(.автоположениечата) #размерчата{flex:0 0 .5rem;margin:-.25rem 0;background:linear-gradient(to right,rgba(var(--сЦветФона),var(--чНепрозрачность)),rgba(var(--сЦветКнопок),var(--чНепрозрачность)),rgba(var(--сЦветФона),var(--чНепрозрачность))) 0% center/100% .125rem no-repeat;cursor:ns-resize}@media all and (min-aspect-ratio:16/10){.автоположениечата #проигрывательичат{flex-direction:row}.автоположениечата.чатслева #проигрывательичат{flex-direction:row-reverse}.автоположениечата #чат{height:100%}}@media not all and (min-aspect-ratio:16/10){.автоположениечата #проигрывательичат{flex-direction:column}.автоположениечата.чатвверху #проигрывательичат{flex-direction:column-reverse}.автоположениечата #чат{width:100%}.автоположениечата #размерчата{flex:0 0 .5rem;margin:-.25rem 0;background:linear-gradient(to right,rgba(var(--сЦветФона),var(--чНепрозрачность)),rgba(var(--сЦветКнопок),var(--чНепрозрачность)),rgba(var(--сЦветФона),var(--чНепрозрачность))) 0% center/100% .125rem no-repeat;cursor:ns-resize}}::selection{color:#000;background-color:rgba(var(--сЦветВыделения),.99);text-shadow:none}:focus{outline:0}hr{border:0;padding:0;height:1px;background:linear-gradient(to right,transparent,rgb(var(--сЦветЗаголовка)) 30%,rgb(var(--сЦветЗаголовка)) 70%,transparent)}a{color:inherit}a:hover{color:rgb(var(--сЦветВыделения))}.горизвырав{display:flex;flex-shrink:0}.горизвырав-лево{flex:1;text-align:left}.горизвырав-середина{flex:1;text-align:center}.горизвырав-право{flex:1;text-align:right}.метка.метка{color:rgb(var(--сЦветЗаголовка))}#глаз{position:absolute;top:0;left:0;width:100%;height:100%;object-fit:scale-down;-webkit-user-select:none;user-select:none}#глаз.масштабировать{object-fit:contain}.крутилка{position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;margin:auto;width:5.375rem;height:5.375rem;border-radius:8%;padding:.6875rem;background:rgba(var(--сЦветФона),var(--чНепрозрачностьОкна));box-shadow:inset 0 .3125rem .625rem rgba(var(--сЦветГрадиента),.1);animation:0s step-end показатьнесразу}body[data-состояние="4"] .крутилка,body[data-состояние="5"] .крутилка{animation-duration:.5s}@keyframes показатьнесразу{0%{opacity:0}}.анимацияинтерфейса .svg-busy{transform-origin:center;animation:2s cubic-bezier(.46,.03,.52,.96) infinite загрузка}@keyframes загрузка{80%{transform:scaleX(1)}90%{transform:scaleX(0)}}.панель{position:absolute;z-index:3;left:0;right:0;height:2.125rem;overflow:hidden;display:flex;align-items:center;background:linear-gradient(to right,rgba(var(--сЦветГрадиента),0) 10%,rgba(var(--сЦветГрадиента),.15) 40%,rgba(var(--сЦветГрадиента),.15) 60%,rgba(var(--сЦветГрадиента),0) 90%),rgba(var(--сЦветФона),var(--чНепрозрачность))}.автоскрытие:not([data-состояние="3"]):not([data-состояние="7"]):not([data-окно-открыто]):not(.выборскорости):not(.нетвидео) .панель{pointer-events:none;visibility:hidden;opacity:0}.анимацияинтерфейса.анимацияпанели .панель{transition:.3s ease-out;transition-property:visibility,opacity}.верхняя{top:0}.нижняя{bottom:0;font-size:.875rem}.элементпанели{padding:0 .5rem;height:100%;line-height:2.125rem;display:flex;align-items:center}.многоточие{overflow:hidden;text-overflow:ellipsis;display:unset;min-width:calc(2.1em + .5rem*2);text-decoration:none}.можнотыкать:not(:disabled){cursor:pointer}.можнотыкать:not(:disabled):not(select):hover{color:rgb(var(--сЦветВыделения))!important}.можнотыкать:not(:disabled):not(select):active{opacity:.9;text-shadow:none}.пара{margin-left:calc(.42em - .5rem*2)}.заполнитель{flex:1 1000 0}.кнопка{flex:none;border-radius:0;color:inherit;background:0 0!important}.кнопка>svg{width:1.375rem;height:1.375rem}.кнопка:enabled:active>svg{transform:scale(.85)}.типтрансляции{border-radius:.125rem;padding:.1875rem .25rem;font-size:.75rem;line-height:1;text-shadow:none;color:#000;background:rgb(var(--сЦветКнопок))}.прямаятрансляция{text-shadow:unset;color:#fff;background:#d00}.категориятрансляции{flex:10000 1.5 12em;max-width:fit-content}#громкость{flex:0 1 8.125rem;min-width:4.8125rem;font-size:1rem;color:inherit;background:0 0!important}#громкость::-webkit-slider-runnable-track{height:.25rem;border:0;border-radius:.0625rem;background:linear-gradient(to bottom,currentColor,currentColor) 0 0/var(--ширина, 0%) 100% no-repeat,rgba(var(--сЦветКнопок),.5)}#громкость::-webkit-slider-thumb{-webkit-appearance:none;margin-top:-.3125rem;width:.875rem;height:.875rem;border:0;border-radius:50%;background:linear-gradient(to bottom,transparent,rgba(0,0,0,.25)),currentColor;box-shadow:0 0 .125rem #000}.заполнитель.дляповтора{flex:0 100 3.75rem}#скорость{flex:none;line-height:unset;height:1.375rem;margin:0 .5rem;color:#000;background:rgb(var(--сЦветКнопок));padding:0 .47em}#скорость:not(:disabled):hover{background-image:linear-gradient(to bottom,rgb(var(--сЦветВыделения)),rgb(var(--сЦветВыделения)))}.проверкацветафон #проигрыватель{background:repeating-linear-gradient(to right,#fff,#fff 5px,transparent 5px,transparent 10px),repeating-linear-gradient(to bottom,#fff,#fff 5px,transparent 5px,transparent 10px),#000}body[data-состояние="6"]:not(.нетвидео):not(.проверкацвета) .крутилка,body[data-состояние="8"]:not(.нетвидео):not(.проверкацвета) .крутилка,body:not([data-состояние="1"]):not([data-состояние="2"]):not([data-состояние="4"]):not([data-состояние="5"]) .svg-busy,body:not([data-состояние="3"]) .svg-end,body:not([data-состояние="7"]) .svg-stop,body:not([data-состояние="6"]):not([data-состояние="8"]) .svg-mute-false,body:not(.нетвидео) .svg-mute-false,body:not(.проверкацвета) .svg-settings,.проверкацвета .крутилка>use:not(.svg-settings),.проверкацветафон #глаз,body[data-состояние="8"] .недляповтора,body:not([data-состояние="8"]) .дляповтора,.нетвидео #переключитькартинкавкартинке,.нетзвука #переключитьприглушить,.нетзвука #громкость{display:none}#шкала{flex:1 3 25rem;min-width:6rem}.шкала-фон{flex:1;height:.75rem;background:rgba(var(--сЦветКнопок),.3)}#шкала-просмотрено{background:currentColor;height:100%;transform-origin:0}#уведомление{position:absolute;top:calc(1.25rem + 2.125rem);right:calc(1.25rem + 2.125rem);width:4rem;height:4rem;border:.15rem solid rgba(255,255,255,.35);border-radius:8%;padding:.625rem;color:rgb(var(--сЦветВыделения));background:rgb(var(--сЦветФона));z-index:9}#уведомление.жопа{border-color:#fcc;color:#fff;background:red}.анимацияинтерфейса #уведомление{animation:.3s cubic-bezier(.17,.84,.44,1) уведомление}@keyframes уведомление{0%{transform:scale(1.5)}to{transform:none}}.обновлениерасширения{left:0;bottom:2.125rem;max-width:38em}.обновлениерасширения-закрыть{float:right;margin-left:.5rem;padding-left:0;padding-right:0;width:3.217ex}.обновлениерасширения p{margin:0;white-space:normal}.обновлениерасширения strong{font-weight:inherit;color:rgb(var(--сЦветЗаголовка))}.скрытиерекламы{position:absolute;top:calc(1.25rem + 2.125rem);left:calc(1.25rem);border:.125rem solid rgba(255,255,255,.3);border-radius:.125rem;padding:.5rem .625rem;color:rgb(var(--сЦветВыделения));background:rgba(var(--сЦветФона),.8);z-index:5}.анимацияинтерфейса .скрытиерекламы-текст{animation:2s linear infinite реклама}@keyframes реклама{70%{opacity:1}85%{opacity:0}}body:not(.реклама) .скрытиерекламы{display:none}.канал{right:0;top:2.125rem;max-width:45em}.канал table{border-spacing:0}.канал th{width:.0625rem;padding-right:1em;font:inherit;text-align:right;vertical-align:top}.канал td{white-space:normal;vertical-align:middle}.канал hr{margin:.5em 0}th.канал-аватар{vertical-align:middle}.канал-аватар>img{width:5rem;height:5rem}#канал-имя{font-size:1.2em;font-weight:bolder;line-height:1;margin-bottom:.4em}.канал-ссылка[title]:not(:hover){text-decoration-style:dotted}#зритель-подписаться,#зритель-отписаться{min-width:100%}.обновляется{pointer-events:none}.зритель-уведомлять{margin-right:1em}#зритель-подписка[data-подписка="0"],#зритель-подписка:not([data-подписка="1"]) #зритель-подписаться,#зритель-подписка:not([data-подписка="2"]):not([data-подписка="3"]) #зритель-отписаться,#зритель-подписка:not([data-подписка="2"]):not([data-подписка="3"]) .зритель-уведомлять{display:none}.главноеменю{right:2.625rem;bottom:2.125rem;padding:.625rem 0;display:flex;flex-flow:column;align-items:stretch}.меню-секция{padding:0 .625rem}.меню-пункт{position:relative;margin:0;border:0;padding:.1875rem .5rem .1875rem 2.0625rem;display:flex;justify-content:space-between;text-decoration:none;cursor:pointer}.меню-пункт:hover{text-shadow:none;color:#222;background:rgb(var(--сЦветВыделения))}.меню-пункт[tabindex="-1"]{opacity:.4;pointer-events:none}.меню-значок{position:absolute;left:.125rem;top:.1875rem;width:1.125rem;height:1.125rem;pointer-events:none}.меню-текст{pointer-events:none}.меню-клавиши{margin-left:1.5em;color:rgb(var(--сЦветЗаголовка));pointer-events:none}.меню-пункт:hover .меню-клавиши{color:inherit;opacity:.7}.поддержать{color:rgb(var(--сЦветВыделения))}.ужатьглавноеменю .главноеменю{flex-flow:row;right:0}.ужатьглавноеменю .меню-секция:first-child{border-right:1px solid;border-image:linear-gradient(to bottom,transparent,rgb(var(--сЦветЗаголовка)) 30%,rgb(var(--сЦветЗаголовка)) 70%,transparent) 1}.ужатьглавноеменю .главноеменю hr:first-child{display:none}.настройки{right:0;bottom:2.125rem}.заголовокнастроек{display:block;margin-top:.3125rem;border-radius:.125rem;padding:.1875rem 0;color:#000;text-shadow:0 .0625rem .1875rem rgba(200,200,200,.6);text-align:center;text-transform:uppercase;letter-spacing:.0625rem;font-size:.8334em;background:rgb(var(--сЦветКнопок));cursor:pointer}.заголовокнастроек:first-of-type{margin-top:0}input:checked+.заголовокнастроек{background:rgb(var(--сЦветВыделения));cursor:default}.группанастроек{height:16.667em;overflow:hidden}input:not(:checked)+.заголовокнастроек+.группанастроек{height:0}.анимацияинтерфейса .заголовокнастроек,.анимацияинтерфейса .группанастроек{transition:.3s cubic-bezier(.22,.61,.36,1);transition-property:background-color,height}.настройка{display:flex;justify-content:flex-end;align-items:center;margin:.5rem 0 0}.настройка-имя{flex:1;margin-right:2em;color:rgb(var(--сЦветЗаголовка))}.настройка-данные{color:#fff}.настройка-данные input[type=color],.настройка-данные button,.настройка-данные select{min-width:11.2em;max-width:16em}.вводчисла-число.вводчисла-число{min-width:5.2em;max-width:5.2em;text-align:right}.вводчисла-минус.вводчисла-минус,.вводчисла-плюс.вводчисла-плюс{min-width:3em}.вводчисла-минус{border-top-right-radius:0;border-bottom-right-radius:0;border-right-width:1px;border-right-style:solid;border-right-color:rgba(0,0,0,.12)}.вводчисла-плюс{border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:1px;border-left-style:solid;border-left-color:rgba(0,0,0,.12)}.положениечата{position:relative;width:4em;height:4em;display:inline-block;margin-left:1em;vertical-align:middle}.положениечата>label:nth-child(1){position:absolute;left:0;top:50%;transform:translateY(-50%)}.положениечата>label:nth-child(2){position:absolute;top:0;left:50%;transform:translateX(-50%);margin:0}.положениечата>label:nth-child(3){position:absolute;bottom:0;left:50%;transform:translateX(-50%);margin:0}.положениечата>label:nth-child(4){position:absolute;right:0;top:50%;transform:translateY(-50%);margin:0}.ужатьнастройки .заголовокнастроек{margin-top:2px;padding:.0625rem 0}.ужатьнастройки .группанастроек{height:14.917em}.ужатьнастройки .настройка{margin-top:.3125rem}.новости{right:0;bottom:2.125rem;display:flex;flex-direction:column;max-height:calc(100% - 2.125rem*2 - .25rem*2)}.новости-текст{max-width:42em;overflow:auto;margin-bottom:1em;padding-right:.3em;white-space:normal}.новости-текст>h4{display:flex;justify-content:space-between;color:rgb(var(--сЦветЗаголовка))}.новость-перевести{flex:0 0 1.5em;margin:0 .4em 0 1em;background:url(translate.svg) no-repeat}.новость-перевести:not(:hover){opacity:.8}.новости-текст>h4,.новости-текст>p,.новости-текст ol,.новости-текст ul{margin:1em 0}.новости-текст>h4:first-child,.новости-текст>p:last-child{margin:0}.новости-текст ol,.новости-текст ul{padding-left:1.5em}.новости-текст b{font-weight:inherit;color:rgb(var(--сЦветЗаголовка))}#открытьновости{color:rgb(var(--сЦветВыделения))}.непрочитано>svg{transform-origin:50% 10%;animation:12.5s linear .5s infinite непрочитано}.автоскрытие:not([data-состояние="3"]):not([data-состояние="7"]):not([data-окно-открыто]):not(.выборскорости):not(.нетвидео) .непрочитано>svg{animation:none}@keyframes непрочитано{.6%,3%,5.4%,7.8%,10.2%,12.6%,15%,17.4%,19.8%,22.2%,24.6%,27%,29.4%,31.8%,34.2%{transform:rotate(30deg)}1.8%,4.2%,6.6%,9%,11.4%,13.8%,16.2%,18.6%,21%,23.4%,25.8%,28.2%,30.6%,33%,35.4%{transform:rotate(-30deg)}36%{transform:none}}#статистика{position:absolute;z-index:2;top:var(--y, 2.125rem);left:var(--x, 0px);font:.75rem/1rem "Roboto Condensed","Liberation Sans Narrow","Arial Narrow",Calibri,Arial,Roboto,Helvetica,sans-serif;text-shadow:none;color:#fff;background:rgba(0,0,0,.6)}#статистика.тащилка{outline:.0625rem solid #476685}#статистика:not(.тащилка):hover{background:#000}#статистика.тащилка,#статистика:hover{z-index:10;min-width:36em;max-width:calc(100% - var(--x, 0px))}#статистика:not(.тащилка):not(:hover) .статистика-подробно{display:none}.статистика-кнопка{position:absolute;top:0;padding:.5rem .3125rem}.статистика-кнопка>svg{width:1.2rem;height:1.2rem}#закрытьстатистику{left:0;cursor:pointer}.статистика-переместить{left:1.825rem;cursor:move}th[data-тащилка=статистика]{cursor:move}.статистика-прокрутка{overflow:auto;padding:.5em}.статистика-главнаятаблица{border-spacing:0}.статистика-главнаятаблица>tbody>tr>th{border-right:1px solid #777;padding:0 .5em 0 0;font:inherit;text-align:right;color:#b0c5ee}.статистика-главнаятаблица>tbody>tr>td{padding:0}.статистика-главнаятаблица>tbody>tr>th+td{padding-left:.5em}.статистика-символ{font:1.2em/1 Calibri,Arial,sans-serif;color:#b7b7b7}.статистика-выделить{font-weight:700;color:#ff6}.статистика-анализ{border-spacing:.0625rem 0;text-align:right}.статистика-анализ td{border:.0625rem solid transparent;padding:0}.статистика-анализ>tbody>tr:not(:last-child)>td{border-bottom:0}.статистика-анализ>tbody>tr:not(:first-child)>td{border-top:0}.анализ-минимум,.анализ-среднее,.анализ-максимум,#статистика:not(.тащилка):not(:hover) .анализ-история:not(.статистика-подробно){box-sizing:content-box;min-width:2.05em}.анализ-максимум.анализ-максимум{padding-right:.5em}.анализ-история.анализ-история{border-color:#777;padding:0 .125rem}.анализ-история:not(.статистика-подробно){border-color:#f40}.анализ-история:empty{display:none}


================================================
FILE: player.html
================================================
<!doctype html><html dir=ltr><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1"><title>Alternate Player for Twitch.tv</title><link rel=icon type=image/png href=manifest.png><link rel=dns-prefetch href=https://gql.twitch.tv><link rel=dns-prefetch href=https://usher.ttvnw.net><link rel=preconnect href=https://gql.twitch.tv><script src=common.js defer></script><script src=player.js defer></script><link rel=stylesheet href=common.css><link rel=stylesheet href=player.css><body hidden><div id=проигрывательичат><div id=проигрыватель><video id=глаз playsinline tabindex=-1></video><svg class=крутилка xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use class=svg-busy xlink:href=#svg-busy /><use class=svg-end xlink:href=#svg-end /><use class=svg-stop xlink:href=#svg-stop /><use class=svg-mute-false xlink:href=#svg-mute-false /><use class=svg-settings xlink:href=#svg-settings /></svg> <svg id=уведомление xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink hidden><use/></svg><div id=статистика hidden><div id=закрытьстатистику class=статистика-кнопка data-i18n=^A0666><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-close /></svg></div><div class="статистика-переместить статистика-кнопка" data-тащилка=статистика data-i18n=^A0667><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-move /></svg></div><div class=статистика-прокрутка><table class=статистика-главнаятаблица><tr><th data-тащилка=статистика data-i18n=F0539><td><span title="Ширина исходного видео X Высота исходного видео @ Средняя частота кадров исходного видео ± Максимальное отклонение от средней частоты кадров. Частота кадров и отклонение рассчитываются отдельно для каждого сегмента."><span id=статистика-разрешениевидео></span><span id=статистика-частотакадров data-очистить=""></span></span><tr class=статистика-подробно><th data-тащилка=статистика data-i18n=F0540><td><span id=статистика-сжатиевидео title="Параметры сжатия видео: стандарт сжатия, профиль, уровень, максимальное количество опорных кадров, диапазон, частота кадров"></span><tr class=статистика-подробно><th data-тащилка=статистика data-i18n=F0541><td><span title="Параметры сжатия звука: стандарт сжатия, частота дискретизации, количество каналов, битрейт звука. Битрейт рассчитывается отдельно для каждого сегмента.

Если используется стандарт сжатия HE-AAC, то все параметры сжатия, кроме битрейта, показывают ерунду, но это не мешает воспроизведению. Chrome поддерживает HE-AAC начиная с версии 50."><span id=статистика-сжатиезвука></span> <span id=статистика-битрейтзвука data-очистить=""></span></span><tr class=статистика-подробно><th data-тащилка=статистика data-i18n=F0542><td><span id=статистика-сервер data-очистить="" title="Сервер, с которого загружается видео"></span><tr class=статистика-подробно><th data-тащилка=статистика data-i18n=F0544><td><span title="Количество сегментов в списке × Средняя длительность сегментов в списке = Длительность списка - Количество рекламных сегментов в списке < Заявленная максимальная длительность сегмента (target duration)"><span id=статистика-список data-очистить=""></span> <span class=статистика-символ> &lt;</span> <span id=статистика-targetduration data-очистить=""></span></span><tr><th data-тащилка=статистика data-i18n=F0543><td><span title="Длительность видео на разных этапах обработки:

Ожидает загрузки из сети + Загружается из сети
Ожидает добавления в проигрыватель
Непросмотрено в буфере проигрывателя + Просмотрено в буфере проигрывателя"><span id=статистика-очередь></span> <span class=статистика-символ>+</span> <span></span>   <span></span>   <span></span> <span class=статистика-символ>+</span> <span></span></span><tr><th data-тащилка=статистика data-i18n=F0545><td rowspan=3><table class=статистика-анализ><tr id=статистика-интервалобновления title="Интервал между скачиваниями списка воспроизведения.

Расшифровка: минимальное < среднее < максимальное [таблица с последними значениями, красным цветом выделено последнее добавленное]."><tr id=статистика-сегментовдобавлено title="Количество новых сегментов в скаченном списке воспроизведения.

Расшифровка: минимальное < среднее < максимальное [таблица с последними значениями, красным цветом выделено последнее добавленное]."><tr id=статистика-секунддобавлено title="Продолжительность новых сегментов в скаченном списке воспроизведения.

Расшифровка: минимальное < среднее < максимальное [таблица с последними значениями, красным цветом выделено последнее добавленное]."></table><tr><th data-тащилка=статистика data-i18n=F0546><tr><th data-тащилка=статистика data-i18n=F0547><tr><th data-тащилка=статистика data-i18n=F0548><td rowspan=3><table class=статистика-анализ><tr id=статистика-толщинасегмента title="Сумма битрейтов видео, звука и служебной информации в загруженном сегменте. Битрейт звука можно посмотреть в параметрах звука выше.

Расшифровка: минимальное < среднее < максимальное [таблица с последними значениями, красным цветом выделено последнее добавленное]. Отсутствие значения означает, что сегмент не был загружен."><tr id=статистика-толщинаканала title="Скорость загрузки сегментов из сети. Зависит в том числе от времени ожидания ответа от сервера (смотрите ниже). Чтобы просматривать трансляцию без остановок, средняя скорость загрузки должна быть не ниже среднего битрейта загружаемых сегментов (смотрите выше).

ВАЖНО! Если в настройках проигрывателя включена одновременная загрузка нескольких сегментов (по умолчанию включена), то не обращайте на этот параметр внимания, потому что фактическая скорость загрузки выше показанной здесь.

Расшифровка: минимальное < среднее < максимальное [таблица с последними значениями, красным цветом выделено последнее добавленное]. Отсутствие значения означает, что сегмент не был загружен."><tr id=статистика-ожиданиеответа title="Время, прошедшее от посылки запроса серверу на получение сегмента и до прихода ответа сервера с началом запрошенного сегмента. Зависит от расстояния до сервера и его загруженности.

Расшифровка: минимальное < среднее < максимальное [таблица с последними значениями, красным цветом выделено последнее добавленное]. Отсутствие значения означает, что ответ от сервера не был получен."></table><tr><th data-тащилка=статистика data-i18n=F0549><tr><th data-тащилка=статистика data-i18n=F0550><tr><th data-тащилка=статистика data-i18n=F0573><td><table class=статистика-анализ><tr id=статистика-непросмотрено title="Длительность непросмотренного видео в буфере проигрывателя. Также смотрите в статистике “Переполнений буфера”, “Исчерпаний буфера” и описание настройки “Размера буфера”.

Расшифровка: минимальное < среднее < максимальное [таблица с последними значениями, красным цветом выделено последнее добавленное]."></table><tr class=статистика-подробно><th data-тащилка=статистика data-i18n=F0551><td><span id=статистика-преобразованза data-очистить="" title="Время, затраченное на преобразование предпоследнего сегмента из TS в MP4. Увеличивается когда все ядра процессора прилично загружены."></span><tr><th data-тащилка=статистика data-i18n=F0552><td><span id=статистика-задержкатрансляции data-очистить="" title="Время между захватом видео на компьютере ведущего трансляции и просмотром этого видео вами. Ведущий увидит в чате вашу реакцию на свои действия только по прошествии указанного времени.

Это неточное значение. Реальная задержка может быть на несколько секунд больше."></span><tr><th data-тащилка=статистика data-i18n=F0554><td><span id=статистика-длительностьпросмотра title="Прошло времени с начала открытия этой страницы"></span><tr><th data-тащилка=статистика data-i18n=F0670><td><span data-i18n=^A0671><span id=статистика-количестворекламы></span> <span class="статистика-символ статистика-подробно"> [</span> <span id=статистика-частотарекламы class=статистика-подробно></span> <span class="статистика-символ статистика-подробно">]</span></span><tr><th data-тащилка=статистика data-i18n=F0555><td><span id=статистика-скачано data-очистить="" title="Примерный размер данных, которые проигрыватель загрузил из сети с начала открытия этой страницы"></span><tr><th data-тащилка=статистика data-i18n=F0556><td><span title="Количество кадров, которое браузер не смог отобразить / Общее количество кадров.

Поведение этого параметра различается у разных браузеров или даже разных версий одного браузера. Ничего страшного, если количество пропущенных кадров растет пока вы мучаете браузер: например, переключаете вкладки или меняете размер окна. Другие, более неприятные причины: процессор не успевает декодировать видео, нестабильная частота кадров в загруженном видео, сильная разница между частотой кадров в загруженном видео и частотой вертикальной развертки вашего монитора, недостаточное количество видео в буфере проигрывателя с включённым аппаратным декодированием (смотрите описание настройки “Размер буфера”)."><span id=статистика-пропущено></span> <span class=статистика-символ> / </span><span></span></span><tr><th data-тащилка=статистика data-i18n=F0557><td><span title="Количество загруженных сегментов, в которых возможно утеряна часть кадров + Количество загруженных сегментов, в которых утеряна часть звука + Количество сегментов, которые повреждены / Количество загруженных сегментов.

Потери видео или звука приводят к замиранию картинки, появлению на ней артефактов, пропаданию звука, остановкам воспроизведения. Потери — это проблема сервера или ведущего трансляции, а не вашего подключения к Интернету. Если виноват сервер (его название смотрите выше), то есть небольшая вероятность, что после перезагрузка страницы вы подключитесь к менее проблемному серверу.

Повреждение сегмента — более серьёзная ошибка. Теоретически сегмент мог быть поврежден на вашем компьютере. Ещё одна довольно редкая причина: сегмент был неправильно создан сервером."><span id=статистика-потерьвидео></span> <span class=статистика-символ>+</span> <span id=статистика-потерьзвука></span> <span class=статистика-символ>+</span> <span id=статистика-забракованных></span> <span class=статистика-символ> / </span><span id=статистика-исходных></span></span><tr><th data-тащилка=статистика data-i18n=F0558><td><span title="Количество ошибок во время скачивания сегментов из сети + Сколько раз было принято решение не начинать скачивание сегментов ( Количество нескаченных сегментов из-за этих ошибок ).

Возможные причины ошибок скачивания:

• Очень низкая скорость скачивания (смотрите выше). Часть накопившихся нескаченных сегментов удалена проигрывателем или сервером.

• Кратковременные проблемы с сетью. Если они продлятся несколько секунд, то трансляция будет считаться завершенной. После того, как сеть снова зароботает, трансляция автоматически возобновится.

• Проблемы на сервере (его название смотрите выше). Есть вероятность, что после перезагрузки страницы вы подключитесь к менее проблемному серверу.

Возможные причины не начинать скачивание:

• Особенность конкретной трансляции.

• Проблемы с сетью.

• Браузер недостаточно часто вызывает JavaScript.

• Проблемы на сервере.

Если вас не устраивает большое количество отказов, то попробуйте увеличить настройку “Размер буфера” (или ухудшить “Качество соединения”)."><span id=статистика-ошибокзагрузки></span> <span class=статистика-символ>+</span> <span id=статистика-пропущенныхсегментов></span> <span class=статистика-символ>  (</span> <span id=статистика-незагруженныхсегментов></span> <span class=статистика-символ>)</span></span><tr><th data-тащилка=статистика data-i18n=F0559><td><span title="Количество переполнений буфера проигрывателя ( Продолжительность удалённого видео в секундах из-за этих переполнений ). Зависит от настроек проигрывателя “Размер буфера” и “Переполнение буфера”.

Возможные причины переполнения буфера:
• Долгое тыкание настроек без перезагрузки проигрывателя.
• Плохое качество связи.
• Частые потери звука (смотрите выше).
• Особенность конкретной трансляции.
• Ошибка в работе проигрывателя."><span id=статистика-переполнено></span> <span class=статистика-символ>  (</span> <span></span> <span class=статистика-символ>)</span></span><tr><th data-тащилка=статистика data-i18n=F0560><td><span id=статистика-исчерпано title="Количество раз, когда в буфере проигрывателя закончилось видео и воспроизведение было приостановлено до заполнения буфера.

Чем ниже в настройках проигрывателя размер буфера, тем выше шанс его исчерпания.

Во время заполнения буфера в середине экрана рисуются песочные часы. Их отсутствие во время приостановки воспроизведения — знак, что в проигрывателе “что-то пошло не так”."></span></table></div></div><div id=верхняяпанель class="панель верхняя"><div class=элементпанели hidden><div id=типтрансляции class=типтрансляции></div></div><a id=названиетрансляции class="элементпанели многоточие можнотыкать метка" rel="noopener noreferrer"></a><div id=заполнитель class=заполнитель></div><div class=элементпанели data-i18n=F0501></div><a id=категориятрансляции class="категориятрансляции элементпанели многоточие можнотыкать метка пара" rel="noopener noreferrer"></a><div class=элементпанели data-i18n=F0502^A0503></div><div id=количествозрителей class="элементпанели метка пара" data-i18n=^A0503></div><button class="кнопка элементпанели можнотыкать" type=button data-окно-переключить=канал data-i18n=^A0597><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-channel /></svg></button></div><div class="панель нижняя"><button id=переключитьтрансляцию class="кнопка элементпанели можнотыкать" type=button><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-pause xlink:title=J0106 /><use xlink:href=#svg-live xlink:title=J0107 /></svg></button> <button id=переключитьприглушить class="кнопка элементпанели можнотыкать" type=button><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-mute-false xlink:title=J0108 /><use xlink:href=#svg-mute-true xlink:title=J0109 /></svg></button> <input id=громкость class="элементпанели можнотыкать" type=range max=100 step=1 value=0 data-i18n=^A0506><div id=позиция class="элементпанели можнотыкать метка недляповтора" data-i18n=^A0507></div><div class="заполнитель недляповтора"></div><div class="заполнитель дляповтора"></div><select id=скорость class="элементпанели можнотыкать дляповтора" data-i18n=^A0536><option value=3><option value=2><option value=1.75><option value=1.5><option value=1.25><option value=1 selected><option value=0.75><option value=0.5><option value=0.25><option value=0.1></select> <button id=переключитьпаузу class="кнопка элементпанели можнотыкать дляповтора" type=button><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-pause xlink:title=J0112 /><use xlink:href=#svg-play xlink:title=J0113 /></svg></button><div id=шкала class="элементпанели можнотыкать дляповтора" data-i18n=^A0535><div class=шкала-фон><div id=шкала-просмотрено></div></div></div><div class="заполнитель дляповтора"></div><button id=открытьновости class="кнопка элементпанели можнотыкать" type=button hidden data-i18n=^A0508><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-notification /></svg></button> <button id=переключитьглавноеменю class="кнопка элементпанели можнотыкать" type=button data-окно-переключить=главноеменю data-i18n=^A0660><svg><use xlink:href=#svg-menu /></svg></button> <button id=переключитьчат class="кнопка элементпанели можнотыкать" type=button data-i18n=^A0509><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-chat /></svg></button> <button class="кнопка элементпанели можнотыкать" type=button data-окно-переключить=настройки data-i18n=^A0510><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-settings /></svg></button> <button id=создатьклип class="кнопка элементпанели можнотыкать" type=button data-i18n=^A0504><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-cut /></svg></button> <button id=переключитькартинкавкартинке class="кнопка элементпанели можнотыкать" type=button hidden data-i18n=^A0672><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-pip-false /><use xlink:href=#svg-pip-true /></svg></button> <button id=переключитьполноэкранный class="кнопка элементпанели можнотыкать" type=button data-i18n=^A0511><svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><use xlink:href=#svg-fullscreen-false /><use xlink:href=#svg-fullscreen-true /></svg></button></div><div class=скрытиерекламы><div class=скрытиерекламы-текст data-i18n=F0669></div></div><div id=обновлениерасширения class="обновлениерасширения окно"><button type=button class=обновлениерасширения-закрыть data-окно-переключить=обновлениерасширения>X</button><p data-i18n=F0668></div><div id=канал class="канал окно"><table><tr><th class=канал-аватар><img id=канал-аватар decoding=async><td><div id=канал-имя></div><div id=канал-описание></div><tr><th class=метка data-i18n=F0582><td id=канал-язык><tr><th class=метка data-i18n=F0583><td id=канал-подписчиков><tr><th class=метка data-i18n=F0585><td id=канал-создан><tr hidden><th class=метка data-i18n=F0588><td id=канал-команды><tr><td colspan=2><hr><tr><th class=метка data-i18n=F0589><td><span id=зритель-имя></span><tr id=зритель-подписка data-подписка=0><th><button id=зритель-подписаться type=button data-i18n=F0591^A0592></button> <button id=зритель-отписаться type=button data-i18n=F0593^A0594></button><td><label class="зритель-уведомлять радио-метка" data-i18n=^A0595><input id=зритель-уведомлять type=checkbox hidden><span class=флажок-значок></span><span class=радио-текст data-i18n=F0633></span></label><a href=https://www.twitch.tv/settings/notifications rel="noopener noreferrer" data-i18n=F0646^A0647></a></table></div><div id=новости class="новости окно"><div id=текстновостей class=новости-текст></div><div class=горизвырав><div class=горизвырав-лево><button id=закрытьновости type=button data-окно-переключить=новости></button></div><div class=горизвырав-середина><div id=индикаторпрокрутки-текстновостей class=индикаторпрокрутки data-i18n=^A0618></div></div><div class=горизвырав-право><button id=отложитьновости type=button data-окно-переключить=новости data-i18n=F0621^A0622></button></div></div></div><div id=главноеменю class="главноеменю окно"><section class=меню-секция><a class=меню-пункт href=https://www.twitch.tv/ data-i18n=F0640></a> <a class=меню-пункт href=https://www.twitch.tv/directory data-i18n=F0641></a> <a class=меню-пункт href=https://www.twitch.tv/directory/following><svg class=меню-значок><use xlink:href=#svg-follow /></svg> <span class=меню-текст data-i18n=F0642></span> </a><a class=меню-пункт href=https://www.twitch.tv/directory/following/live data-i18n=F0643></a> <a class=меню-пункт href=https://www.twitch.tv/directory/following/games data-i18n=F0644></a> <a class=меню-пункт href=https://dashboard.twitch.tv/content/clips/created><svg class=меню-значок><use xlink:href=#svg-cut /></svg> <span class=меню-текст data-i18n=F0645></span></a><hr><a class=меню-пункт id=адресзаписи data-i18n=^A0665><svg class=меню-значок><use xlink:href=#svg-archive /></svg> <span class=меню-текст data-i18n=F0664></span></a><hr><div class=меню-пункт tabindex=0 id=копироватьадрестрансляции data-i18n=^A0656><svg class=меню-значок><use xlink:href=#svg-live /></svg> <span class=меню-текст data-i18n=F0655></span></div><div class=меню-пункт tabindex=0 id=копироватьадресканала data-i18n=F0653^A0654></div></section><section class=меню-секция><hr><div class=меню-пункт tabindex=0 id=переключитьстатистику data-i18n=F0526^A0527><span class=меню-клавиши>S</span></div><hr><div class=меню-пункт tabindex=0 id=отправитьотзыв data-i18n=F0528^A0529></div><a class="меню-пункт поддержать" href=https://coolcmd.github.io/tw5/donate.html target=_blank data-i18n=^A0531><svg class=меню-значок><use xlink:href=#svg-donate /></svg> <span class=меню-текст data-i18n=F0530></span></a><hr><div class=меню-пункт tabindex=0 id=открытьновости2 data-i18n=F0661^A0662></div><div class=меню-пункт tabindex=0 id=открытьсправку data-i18n=^A0599><svg class=меню-значок><use xlink:href=player.svg#svg-help /></svg> <span class=меню-текст data-i18n=F0625></span> <span class=меню-клавиши>F1</span></div></section></div><div id=настройки class="настройки окно"><input id=группаосновные name=группанастроек type=radio hidden checked> <label for=группаосновные class=заголовокнастроек data-i18n=F0561></label><div class=группанастроек><div class=настройка><div class=настройка-имя data-i18n=F0512></div><div class=настройка-данные data-i18n=^A0513><select id=варианттрансляции disabled></select></div></div><div class=настройка><div class=настройка-имя data-i18n=F0580></div><div class=настройка-данные data-i18n=^A0581><select id=предустановка-буферизация></select></div></div><div id=аудиоустройства class=настройка hidden><div class=настройка-имя data-i18n=F0634></div><div class=настройка-данные><button id=аудиоустройства-доступ type=button data-i18n=F0636^A0637></button> <select id=аудиоустройства-список data-i18n=^A0635></select></div></div><div class=настройка><div class=настройка-имя data-i18n=F0533></div><div id=длительностьповтора class=настройка-данные data-i18n=^A0534><button type=button class=вводчисла-минус data-тащилка=длительностьповтора>−</button><input class=вводчисла-число readonly tabindex=-1><button type=button class=вводчисла-плюс data-тащилка=длительностьповтора>+</button></div></div><div class=настройка><div class=настройка-имя data-i18n=F0657></div><div class=настройка-данные data-i18n=^A0658><label class=радио-метка><input id=масштабироватьизображение type=checkbox hidden><span class=флажок-значок></span></label></div></div></div><input id=группачат name=группанастроек type=radio hidden> <label for=группачат class=заголовокнастроек data-i18n=F0626></label><div class=группанастроек><div class=настройка><div class=настройка-имя data-i18n=F0623></div><div class=настройка-данные data-i18n=^A0624><label class=радио-метка><input id=автоположениечата type=checkbox hidden><span class=флажок-значок></span><span class=радио-текст data-i18n=J0120></span></label><div class=положениечата><label class=радио-метка><input type=radio value=4 hidden><span class=радио-значок></span></label> <label class=радио-метка><input type=radio value=1 hidden><span class=радио-значок></span></label> <label class=радио-метка><input type=radio value=3 hidden><span class=радио-значок></span></label> <label class=радио-метка><input type=radio value=2 hidden><span class=радио-значок></span></label></div></div></div><div class=настройка><div class=настройка-имя data-i18n=F0629></div><div class=настройка-данные data-i18n=^A0630><label class=радио-метка><input name=состояниезакрытогочата type=radio value=0 hidden><span class=радио-значок></span><span class=радио-текст data-i18n=F0631></span></label><label class=радио-метка><input name=состояниезакрытогочата type=radio value=1 hidden><span class=радио-значок></span><span class=радио-текст data-i18n=F0632></span></label></div></div><div class=настройка><div class=настройка-имя data-i18n=F0648></div><div class=настройка-данные data-i18n=^A0649><select id=адресчата><option data-i18n=F0650><option data-i18n=F0651><option data-i18n=F0652></select></div></div></div><input id=группаинтерфейс name=группанастроек type=radio hidden> <label for=группаинтерфейс class=заголовокнастроек data-i18n=F0609></label><div class=группанастроек><div class=настройка><div class=настройка-имя data-i18n=F0564></div><div class=настройка-данные data-i18n=^A0565><select id=предустановка-оформление></select></div></div><div class=настройка><div class=настройка-имя data-i18n=F0610></div><div id=размеринтерфейса class=настройка-данные data-i18n=^A0611><button type=button class=вводчисла-минус data-тащилка=размеринтерфейса>−</button><input class=вводчисла-число readonly tabindex=-1><button type=button class=вводчисла-плюс data-тащилка=размеринтерфейса>+</button></div></div><div class=настройка><div class=настройка-имя data-i18n=F0627></div><div id=интервалавтоскрытия class=настройка-данные data-i18n=^A0628><button type=button class=вводчисла-минус data-тащилка=интервалавтоскрытия>−</button><input class=вводчисла-число readonly tabindex=-1><button type=button class=вводчисла-плюс data-тащилка=интервалавтоскрытия>+</button></div></div><div class=настройка><div class=настройка-имя data-i18n=F0574></div><div class=настройка-данные data-i18n=^A0575><select id=менятьгромкостьколесом><option value="" data-i18n=F0505><option value=0 data-i18n=F0679><optgroup label=""></optgroup><option value=1>1%<option value=2>2%<option value=3>3%<option value=4>4%<option value=5>5%<option value=6>6%<option value=7>7%<option value=8>8%<option value=9>9%<option value=10>10%<optgroup label=""></optgroup><option value=-1>−1%<option value=-2>−2%<option value=-3>−3%<option value=-4>−4%<option value=-5>−5%<option value=-6>−6%<option value=-7>−7%<option value=-8>−8%<option value=-9>−9%<option value=-10>−10%</select></div></div><div class=настройка><div class=настройка-имя data-i18n=F0612></div><div class=настройка-данные data-i18n=^A0613><label class=радио-метка><input id=анимацияинтерфейса type=checkbox hidden><span class=флажок-значок></span></label></div></div></div><input id=группацвета name=группанастроек type=radio hidden> <label for=группацвета class=заголовокнастроек data-i18n=F0562></label><div class=группанастроек><div class=настройка><div class=настройка-имя data-i18n=F0566></div><div class=настройка-данные><input id=сЦветФона type=color></div></div><div class=настройка><div class=настройка-имя data-i18n=F0579></div><div class=настройка-данные><input id=сЦветГрадиента type=color></div></div><div class=настройка><div class=настройка-имя data-i18n=F0567></div><div class=настройка-данные><input id=сЦветКнопок type=color></div></div><div class=настройка><div class=настройка-имя data-i18n=F0568></div><div class=настройка-данные><input id=сЦветЗаголовка type=color></div></div><div class=настройка><div class=настройка-имя data-i18n=F0569></div><div class=настройка-данные><input id=сЦветВыделения type=color></div></div><div class=настройка><div class=настройка-имя data-i18n=F0570></div><div id=прозрачность class=настройка-данные><button type=button class=вводчисла-минус data-тащилка=прозрачность>−</button><input class=вводчисла-число readonly tabindex=-1><button type=button class=вводчисла-плюс data-тащилка=прозрачность>+</button></div></div><div class=настройка><div class=настройка-данные><button id=проверкацвета type=button data-i18n=F0571^A0572></button></div></div></div><input id=группабуферизация name=группанастроек type=radio hidden> <label for=группабуферизация class=заголовокнастроек data-i18n=F0563></label><div class=группанастроек><div class=настройка><div class=настройка-имя data-i18n=F0514></div><div class=настройка-данные data-i18n=^A0515><label class=радио-метка><input name=одновременныхзагрузок type=radio value=1 hidden><span class=радио-значок></span><span class=радио-текст>1</span></label><label class=радио-метка><input name=одновременныхзагрузок type=radio value=2 hidden><span class=радио-значок></span><span class=радио-текст>2</span></label><label class=радио-метка><input name=одновременныхзагрузок type=radio value=3 hidden><span class=радио-значок></span><span class=радио-текст>3</span></label></div></div><div class=настройка><div class=настройка-имя data-i18n=F0518></div><div id=началовоспроизведения class=настройка-данные data-i18n=^A0519><button type=button class=вводчисла-минус data-тащилка=началовоспроизведения>−</button><input class=вводчисла-число readonly tabindex=-1><button type=button class=вводчисла-плюс data-тащилка=началовоспроизведения>+</button></div></div><div class=настройка><div class=настройка-имя data-i18n=F0516></div><div id=размербуфера class=настройка-данные data-i18n=^A0517><button type=button class=вводчисла-минус data-тащилка=размербуфера>−</button><input class=вводчисла-число readonly tabindex=-1><button type=button class=вводчисла-плюс data-тащилка=размербуфера>+</button></div></div><div class=настройка><div class=настройка-имя data-i18n=F0537></div><div id=растягиваниебуфера class=настройка-данные data-i18n=^A0538><button type=button class=вводчисла-минус data-тащилка=растягиваниебуфера>−</button><input class=вводчисла-число readonly tabindex=-1><button type=button class=вводчисла-плюс data-тащилка=растягиваниебуфера>+</button></div></div></div><input id=группавсенастройки name=группанастроек type=radio hidden> <label for=группавсенастройки class=заголовокнастроек data-i18n=F0604></label><div class=группанастроек><div class=настройка><div class=настройка-данные><button id=экспортнастроек type=button data-i18n=F0605^A0606></button></div></div><div class=настройка><div class=настройка-данные><button id=импортнастроек type=button data-i18n=F0607^A0608></button></div></div><div class=настройка><div class=настройка-данные><button id=сброситьнастройки type=button data-i18n=F0524^A0525></button></div></div></div></div></div><div id=размерчата data-тащилка=размерчата data-i18n=^A0532></div></div><input id=выборфайладляимпортанастроек type=file accept=application/json,.json hidden> <svg display=none><symbol id=svg-end viewBox="0 0 24 24"><path d="M4.69 4.05c-0.1-0.39-0.5-0.63-0.9-0.53s-0.63 0.5-0.53 0.9l4.82 19.03c0.09 0.34 0.38 0.56 0.72 0.56 0.06 0 0.12 0 0.18-0.02 0.4-0.1 0.64-0.5 0.53-0.9l-4.82-19.03zM20.75 9.41c-0.78-2.9-1.57-5.8-2.36-8.71-0.08-0.31-0.23-0.65-0.79-0.68-4.43-0.32-7.33 4.09-11.75 3.77-0.35-0.04-0.57 0.14-0.48 0.45 0.78 2.9 1.57 5.81 2.36 8.71 0.13 0.46 0.45 0.64 0.8 0.68 4.42 0.32 7.32-4.08 11.74-3.76 0.35 0.04 0.58-0.14 0.49-0.46zM17.27 1.12c0.22 0.8 0.43 1.6 0.65 2.4-0.93 0.03-1.75 0.22-2.62 0.54-0.22-0.8-0.43-1.6-0.65-2.4 0.87-0.32 1.69-0.52 2.62-0.54zM8.16 10.09c-0.24-0.91-0.49-1.82-0.74-2.73 0.98-0.03 1.85-0.24 2.75-0.6-0.22-0.8-0.43-1.6-0.65-2.4 0.89-0.39 1.72-0.87 2.56-1.36 0.22 0.8 0.43 1.6 0.65 2.4-0.84 0.49-1.67 0.97-2.56 1.36 0.25 0.91 0.49 1.82 0.74 2.73-0.91 0.36-1.77 0.57-2.75 0.6zM11.58 11.93c-0.22-0.81-0.44-1.63-0.66-2.44 0.88-0.39 1.71-0.86 2.54-1.35 0.22 0.81 0.44 1.63 0.66 2.44-0.83 0.49-1.66 0.96-2.54 1.35zM13.48 8.13c-0.24-0.91-0.49-1.82-0.74-2.73 0.84-0.49 1.68-0.95 2.57-1.34 0.25 0.91 0.49 1.82 0.74 2.73-0.89 0.39-1.73 0.86-2.56 1.34zM16.72 9.22c-0.22-0.81-0.44-1.63-0.66-2.44 0.86-0.32 1.68-0.51 2.6-0.54 0.22 0.81 0.44 1.63 0.66 2.44-0.92 0.03-1.73 0.21-2.6 0.54z"/></symbol><symbol id=svg-busy viewBox="0 0 24 24"><path d="M19.8 2.32v-1.01h0.88v-1.3h-17.36v1.31h0.88v1.01h0.16c0 3.05 3.34 7.16 5.7 9.68-2.36 2.52-5.69 6.63-5.69 9.69h-0.16v1.01h-0.88v1.31h17.36v-1.31h-0.88v-1.01h-0.16c0-3.05-3.33-7.16-5.69-9.68 2.36-2.52 5.69-6.63 5.69-9.68h0.16v0zM12.73 12c1.75 1.81 6.03 6.55 6.03 9.69h-1.51c-0.04-0.2-0.13-0.4-0.31-0.56l-4.25-3.51c-0.34-0.28-0.82-0.28-1.16-0.01-1.33 1.04-4.46 3.52-4.46 3.52-0.18 0.16-0.27 0.35-0.31 0.56h-1.51c0-3.13 4.28-7.88 6.03-9.68-1.75-1.81-6.03-6.55-6.03-9.68h13.51c0 3.14-4.28 7.88-6.03 9.69zM8.39 4.92c-0.34 0.4-0.34 1.05 0 1.46l2.93 3.19c0.18 0.19 0.42 0.3 0.69 0.3s0.51-0.11 0.69-0.3l2.93-3.19c0.34-0.4 0.34-1.05 0-1.46l-7.22 0z"/></symbol><symbol id=svg-stop viewBox="0 0 24 24"><rect x=3.5 y=2 width=6 height=20 /><rect x=14.5 y=2 width=6 height=20 /></symbol><symbol id=svg-live viewBox="0 0 24 24"><path d="M16.94 6.91l-1.41 1.45c.9.94 1.46 2.22 1.46 3.64s-.56 2.71-1.46 3.64l1.41 1.45c1.27-1.31 2.05-3.11 2.05-5.09s-.78-3.79-2.05-5.09zM19.77 4l-1.41 1.45C19.98 7.13 21 9.44 21 12.01c0 2.57-1.01 4.88-2.64 6.54l1.4 1.45c2.01-2.04 3.24-4.87 3.24-7.99 0-3.13-1.23-5.96-3.23-8.01zM7.06 6.91c-1.27 1.3-2.05 3.1-2.05 5.09s.78 3.79 2.05 5.09l1.41-1.45c-.9-.94-1.46-2.22-1.46-3.64s.56-2.71 1.46-3.64L7.06 6.91zM5.64 5.45L4.24 4C2.23 6.04 1 8.87 1 11.99c0 3.13 1.23 5.96 3.23 8.01l1.41-1.45C4.02 16.87 3 14.56 3 11.99s1.01-4.88 2.64-6.54z"/><circle cx=12 cy=12 r=3 /></symbol><symbol id=svg-pause viewBox="0 0 24 24"><path d="M21.1 22.5c0.6 0 1-0.5 1-1v-19c0-0.6-0.5-1-1-1h-6.1c-0.6 0-1 0.5-1 1v19c0 0.6 0.5 1 1 1h6.1zM8.9 22.5c0.6 0 1-0.5 1-1v-19c0-0.6-0.5-1-1-1h-6.1c-0.6 0-1 0.5-1 1v19c0 0.6 0.5 1 1 1h6.1z"/></symbol><symbol id=svg-play viewBox="0 0 24 24"><path d="M21 11.1l-17-9.8c-0.7-0.4-1.6 0.1-1.6 0.9v19.7c0 0.8 0.9 1.3 1.6 0.9l17-9.8c0.7-0.4 0.7-1.4 0-1.8z"/></symbol><symbol id=svg-mute-false viewBox="0 0 24 24"><path id=svg-speaker d="M10.34 23.25c-0.21 0-0.41-0.08-0.57-0.23l-6.19-6.19h-2.88c-0.44 0-0.8-0.36-0.8-0.8v-8.04c0-0.44 0.36-0.8 0.8-0.8h2.88l6.19-6.19c0.23-0.23 0.57-0.3 0.88-0.17s0.5 0.42 0.5 0.74v20.89c0 0.33-0.2 0.62-0.5 0.74-0.1 0.04-0.2 0.06-0.31 0.06z"/><path d="M17.96 20.02c-0.31 0-0.62-0.12-0.85-0.35-0.47-0.47-0.47-1.23 0-1.7 3.29-3.29 3.29-8.64 0-11.93-0.47-0.47-0.47-1.23 0-1.7s1.23-0.47 1.71 0c2.05 2.05 3.18 4.77 3.18 7.67s-1.13 5.62-3.18 7.67c-0.23 0.24-0.54 0.35-0.85 0.35v0zM13.68 17.75c-0.31 0-0.62-0.12-0.85-0.35-0.47-0.47-0.47-1.23 0-1.7 2.04-2.04 2.04-5.35 0-7.39-0.47-0.47-0.47-1.23 0-1.7s1.23-0.47 1.71 0c2.98 2.98 2.98 7.82 0 10.8-0.23 0.24-0.54 0.35-0.85 0.35z"/></symbol><symbol id=svg-mute-true viewBox="0 0 24 24"><use xlink:href=#svg-speaker /><path d="M24 14.69v2.13h-2.13l-2.69-2.69-2.69 2.69h-2.13v-2.13l2.69-2.69-2.69-2.69v-2.13h2.13l2.69 2.69 2.69-2.69h2.13v2.13l-2.69 2.69 2.69 2.69z"/></symbol><symbol id=svg-notification viewBox="0 0 24 24"><path d="M18.615 16.393l2.222 2.222v1.085h-17.675v-1.085l2.222-2.222v-5.478q0-2.584 1.318-4.496t3.644-2.481v-0.775q0-0.672 0.465-1.163t1.189-0.491 1.189 0.491 0.465 1.163v0.775q2.326 0.569 3.644 2.481t1.318 4.496v5.478zM12 23.008q-0.93 0-1.576-0.646t-0.646-1.525h4.445q0 0.879-0.672 1.525t-1.55 0.646z"/></symbol><symbol id=svg-menu viewBox="0 0 24 24"><path d="M12 7c1.375 0 2.5-1.125 2.5-2.5s-1.125-2.5-2.5-2.5-2.5 1.125-2.5 2.5 1.125 2.5 2.5 2.5zM12 9.5c-1.375 0-2.5 1.125-2.5 2.5s1.125 2.5 2.5 2.5 2.5-1.125 2.5-2.5-1.125-2.5-2.5-2.5zM12 17c-1.375 0-2.5 1.125-2.5 2.5s1.125 2.5 2.5 2.5 2.5-1.125 2.5-2.5-1.125-2.5-2.5-2.5z"/></symbol><symbol id=svg-chat viewBox="0 0 24 24"><path d="M12 1.8c-6.5 0-11.8 4.1-11.8 9.3 0 2.4 1.2 4.6 3.1 6.3-0.1 1.6-0.4 3.8-1.6 4.9 2.3 0 4.6-1.5 5.9-2.5 1.3 0.4 2.8 0.6 4.3 0.6 6.5 0 11.8-4.1 11.8-9.3s-5.3-9.3-11.8-9.3zM6.9 13.6c-0.9 0-1.7-0.8-1.7-1.7s0.8-1.7 1.7-1.7 1.7 0.8 1.7 1.7-0.8 1.7-1.7 1.7zM12 13.6c-0.9 0-1.7-0.8-1.7-1.7s0.8-1.7 1.7-1.7 1.7 0.8 1.7 1.7-0.8 1.7-1.7 1.7zM17.1 13.6c-0.9 0-1.7-0.8-1.7-1.7s0.8-1.7 1.7-1.7 1.7 0.8 1.7 1.7-0.8 1.7-1.7 1.7z"/></symbol><symbol id=svg-settings viewBox="0 0 24 24"><path d="M20.17 13.08c0.04-0.35 0.08-0.7 0.08-1.08s-0.03-0.73-0.08-1.08l2.32-1.81c0.21-0.16 0.26-0.46 0.13-0.7l-2.2-3.81c-0.13-0.24-0.43-0.33-0.67-0.24l-2.74 1.1c-0.57-0.44-1.19-0.8-1.86-1.08l-0.42-2.91c-0.03-0.26-0.26-0.46-0.54-0.46h-4.4c-0.28 0-0.51 0.2-0.54 0.46l-0.42 2.92c-0.67 0.28-1.29 0.65-1.86 1.08l-2.74-1.1c-0.25-0.1-0.54 0-0.67 0.24l-2.2 3.81c-0.14 0.24-0.08 0.54 0.13 0.7l2.32 1.82c-0.04 0.35-0.08 0.72-0.08 1.08s0.03 0.73 0.08 1.08l-2.32 1.82c-0.21 0.17-0.26 0.46-0.13 0.7l2.2 3.81c0.13 0.24 0.43 0.33 0.67 0.24l2.74-1.1c0.57 0.44 1.19 0.8 1.86 1.08l0.42 2.92c0.03 0.26 0.26 0.46 0.54 0.46h4.4c0.28 0 0.51-0.2 0.54-0.46l0.42-2.91c0.67-0.28 1.29-0.65 1.86-1.08l2.74 1.1c0.25 0.1 0.54 0 0.67-0.24l2.2-3.81c0.13-0.24 0.08-0.54-0.13-0.7l-2.32-1.81zM12 15.85c-2.12 0-3.85-1.73-3.85-3.85s1.73-3.85 3.85-3.85 3.85 1.73 3.85 3.85-1.73 3.85-3.85 3.85z"/></symbol><symbol id=svg-pip-false viewBox="0 0 24 24"><path d="M19.778 10.889h-8.889v6.667h8.889v-6.667zM24.222 19.778v-15.578c0-1.222-1-2.2-2.222-2.2h-20c-1.222 0-2.222 0.978-2.222 2.2v15.578c0 1.222 1 2.222 2.222 2.222h20c1.222 0 2.222-1 2.222-2.222zM22 19.8h-20v-15.611h20v15.611z"/></symbol><symbol id=svg-pip-true viewBox="0 0 24 24"><path d="M24.222 19.778v-15.578c0-1.222-1-2.2-2.222-2.2h-20c-1.222 0-2.222 0.978-2.222 2.2v15.578c0 1.222 1 2.222 2.222 2.222h20c1.222 0 2.222-1 2.222-2.222zM22 19.8h-20v-15.611h20v15.611z"/></symbol><symbol id=svg-fullscreen-false viewBox="0 0 24 24"><path d="M19.77 17.84l-3.12-3.12-1.92 1.92 3.12 3.12-3.12 3.12h8.16v-8.16zM9.28 1.11h-8.16v8.16l3.12-3.12 3.09 3.09 1.92-1.92-3.09-3.09zM9.28 16.65l-1.92-1.92-3.12 3.12-3.12-3.12v8.16h8.16l-3.12-3.12zM22.89 1.11h-8.16l3.12 3.12-3.09 3.09 1.92 1.92 3.09-3.09 3.12 3.12z"/></symbol><symbol id=svg-fullscreen-true viewBox="0 0 24 24"><path d="M18.03 20.02l3.22 3.22 1.99-1.99-3.22-3.22 3.22-3.22h-8.43v8.43zM0.76 9.19h8.43v-8.43l-3.22 3.22-3.19-3.19-1.99 1.99 3.19 3.19zM0.76 21.25l1.99 1.99 3.22-3.22 3.22 3.22v-8.43h-8.43l3.22 3.22zM14.81 9.19h8.43l-3.22-3.22 3.19-3.19-1.99-1.99-3.19 3.19-3.22-3.22z"/></symbol><symbol id=svg-cut viewBox="0 0 24 24"><path d="M23.48 7.51l-10.25 3.27 3.27-10.25c0.05-0.13 0.01-0.29-0.09-0.4s-0.25-0.14-0.39-0.1c-1.66 0.49-2.98 1.76-3.5 3.41l-2.68 8.43-2.28 0.73c-0.01-0.07-0.03-0.13-0.05-0.2-0.53-1.67-2.56-2.46-4.63-1.8-2.04 0.65-3.26 2.49-2.73 4.15 0.53 1.67 2.57 2.46 4.63 1.8 0 0 0.01 0 0.01 0l3.98-1.27-1.27 3.98c0 0 0 0.01 0 0.01-0.66 2.06 0.14 4.1 1.8 4.63 1.67 0.53 3.5-0.69 4.15-2.73 0.66-2.06-0.13-4.09-1.8-4.63-0.07-0.02-0.13-0.04-0.2-0.05l0.73-2.28 8.43-2.68c1.65-0.52 2.93-1.84 3.41-3.5 0.04-0.14 0-0.29-0.1-0.39s-0.25-0.13-0.4-0.09zM4.16 14.66c-1.07 0.35-2-0.01-2.17-0.53-0.17-0.54 0.42-1.36 1.46-1.69 1.07-0.34 2 0.01 2.17 0.53 0.17 0.54-0.42 1.36-1.46 1.69zM11.56 20.55c-0.33 1.04-1.15 1.64-1.69 1.46-0.52-0.16-0.87-1.1-0.53-2.17 0.33-1.04 1.15-1.63 1.69-1.46 0.53 0.17 0.87 1.1 0.53 2.17zM11.75 13.42c-0.32 0.32-0.85 0.32-1.16 0s-0.32-0.85 0-1.16c0.32-0.32 0.85-0.32 1.17 0s0.32 0.85 0 1.17z"/></symbol><symbol id=svg-channel viewBox="0 0 24 24"><path d="M12 14.754q0-0.75-0.105-1.377t-0.346-1.207-0.709-0.914-1.137-0.334q-0.070 0.047-0.352 0.211t-0.439 0.252-0.416 0.205-0.504 0.17-0.492 0.053-0.492-0.053-0.504-0.17-0.416-0.205-0.439-0.252-0.352-0.211q-0.668 0-1.137 0.334t-0.709 0.914-0.346 1.207-0.105 1.377 0.434 1.248 1.066 0.498h6q0.633 0 1.066-0.498t0.434-1.248zM10.16 8.66q0-1.101-0.779-1.881t-1.881-0.779-1.881 0.779-0.779 1.881 0.779 1.881 1.881 0.779 1.881-0.779 0.779-1.881zM20.999 14.625v-0.75q0-0.164-0.105-0.27t-0.27-0.105h-6.75q-0.164 0-0.27 0.105t-0.105 0.27v0.75q0 0.164 0.105 0.27t0.27 0.105h6.75q0.164 0 0.27-0.105t0.105-0.27zM20.999 11.578v-0.656q0-0.176-0.123-0.299t-0.299-0.123h-6.656q-0.176 0-0.299 0.123t-0.123 0.299v0.656q0 0.176 0.123 0.299t0.299 0.123h6.656q0.176 0 0.299-0.123t0.123-0.299zM20.999 8.625v-0.75q0-0.164-0.105-0.27t-0.27-0.105h-6.75q-0.164 0-0.27 0.105t-0.105 0.27v0.75q0 0.164 0.105 0.27t0.27 0.105h6.75q0.164 0 0.27-0.105t0.105-0.27zM23.999 4.875v14.249q0 0.773-0.551 1.324t-1.324 0.551h-4.125v-1.125q0-0.164-0.105-0.27t-0.27-0.105h-0.75q-0.164 0-0.27 0.105t-0.105 0.27v1.125h-8.999v-1.125q0-0.164-0.105-0.27t-0.27-0.105h-0.75q-0.164 0-0.27 0.105t-0.105 0.27v1.125h-4.125q-0.773 0-1.324-0.551t-0.551-1.324v-14.249q0-0.773 0.551-1.324t1.324-0.551h20.249q0.773 0 1.324 0.551t0.551 1.324z"/></symbol><symbol id=svg-archive viewBox="0 0 24 24"><path d="M12 4.8v-4.8l6 6-6 6v-4.8c-3.972 0-7.2 3.228-7.2 7.2s3.228 7.2 7.2 7.2 7.2-3.228 7.2-7.2h2.4c0 5.304-4.296 9.6-9.6 9.6s-9.6-4.296-9.6-9.6 4.296-9.6 9.6-9.6z"/></symbol><symbol id=svg-success viewBox="0 0 24 24"><path d="M0 13.2l2.4-2.4 6 6 13.2-13.2 2.4 2.4-15.6 15.6z"/></symbol><symbol id=svg-fail viewBox="0 0 24 24"><circle cx=7.5 cy=7 r=1.8 /><circle cx=7.5 cy=17 r=1.8 /><path fill=none stroke-width=2 d="M17,23A7 13 0 0 1 17,1"/></symbol><symbol id=svg-close viewBox="0 0 24 24"><circle fill=none stroke-width=2 stroke=#888 cx=12 cy=12 r=11 /><path fill=none stroke-width=3 stroke=#ddd d="M7 7 17 17M7 17 17 7"/></symbol><symbol id=svg-move viewBox="0 0 24 24"><circle fill=none stroke-width=2 stroke=#888 cx=12 cy=12 r=11 /><path fill=#fff d="M12 3l4 4-8 0zM12 21l4-4-8 0zM3 12l4 4 0-8zM21 12l-4 4 0-8z"/></symbol><symbol id=svg-follow viewBox="0 0 24 24"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/></symbol><symbol id=svg-donate viewBox="0 0 24 24"><path d="M12.506 10.656c-2.774-0.721-3.667-1.467-3.667-2.628 0-1.332 1.234-2.261 3.3-2.261 2.176 0 2.982 1.039 3.056 2.567h2.701c-0.086-2.102-1.369-4.033-3.923-4.657v-2.677h-3.667v2.64c-2.371 0.513-4.278 2.053-4.278 4.412 0 2.823 2.334 4.229 5.744 5.048 3.056 0.733 3.667 1.809 3.667 2.946 0 0.843-0.599 2.188-3.3 2.188-2.518 0-3.508-1.124-3.642-2.567h-2.689c0.147 2.677 2.151 4.18 4.498 4.681v2.652h3.667v-2.628c2.383-0.452 4.278-1.833 4.278-4.339 0-3.471-2.97-4.657-5.744-5.378z"/></symbol></svg>


================================================
FILE: player.js
================================================
'use strict';

const ВЕРСИЯ_РАСШИРЕНИЯ = chrome.runtime.getManifest().version;

const ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ = 15e3;

const ЗАГРУЖАТЬ_СПИСОК_ВАРИАНТОВ_НЕ_ДОЛЬШЕ = 15e3;

const ЗАГРУЖАТЬ_СПИСОК_СЕГМЕНТОВ_НЕ_ДОЛЬШЕ = 6e3;

const ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ = 1;

const ОБРАБОТКА_ЗАГРУЖАЕТСЯ = 2;

const ОБРАБОТКА_ЗАГРУЖЕН = 3;

const ОБРАБОТКА_ПРЕОБРАЗОВАН = 4;

const СОСТОЯНИЕ_ЗАПУСК = 1;

const СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ = 2;

const СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ = 3;

const СОСТОЯНИЕ_ЗАГРУЗКА = 4;

const СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ = 5;

const СОСТОЯНИЕ_ВОСПРОИЗВЕДЕНИЕ = 6;

const СОСТОЯНИЕ_ОСТАНОВКА = 7;

const СОСТОЯНИЕ_ПОВТОР = 8;

const СОСТОЯНИЕ_СМЕНА_ВАРИАНТА = 9;

const ПОДПИСКА_ОБНОВЛЯЕТСЯ = -1;

const ПОДПИСКА_НЕДОСТУПНА = 0;

const ПОДПИСКА_НЕОФОРМЛЕНА = 1;

const ПОДПИСКА_НЕУВЕДОМЛЯТЬ = 2;

const ПОДПИСКА_УВЕДОМЛЯТЬ = 3;

const КОД_ОТВЕТА = 'Сервер вернул код ';

let г_чТочноеВремя = NaN;

if (!navigator.clipboard) {
	navigator.clipboard = {};
}

if (!navigator.clipboard.writeText) {
	navigator.clipboard.writeText = function(сТекст) {
		Проверить(typeof сТекст == 'string');
		return new Promise(ДобавитьОбработчикИсключений((фВыполнить, фОтказаться) => {
			const узТекст = document.createElement('input');
			узТекст.type = 'text';
			узТекст.readOnly = true;
			узТекст.value = сТекст;
			узТекст.style.position = 'fixed';
			узТекст.style.left = '-100500px';
			document.body.appendChild(узТекст);
			узТекст.select();
			const лПолучилось = document.execCommand('copy');
			узТекст.remove();
			if (лПолучилось) {
				фВыполнить();
			} else {
				фОтказаться();
			}
		}));
	};
}

function Текст(сКод, сПодстановка) {
	return м_i18n.GetMessage(сКод, сПодстановка);
}

function Округлить(чЗначение, чТочность) {
	Проверить(typeof чЗначение == 'number' && Number.isInteger(чТочность) && чТочность >= 0 && чТочность <= 20);
	if (чТочность === 0) {
		return Math.round(чЗначение);
	}
	const ч = Math.pow(10, чТочность);
	return Math.round(чЗначение * ч) / ч;
}

function Ограничить(чЗначение, чМинимум, чМаксимум) {
	Проверить(Number.isFinite(чЗначение) && Number.isFinite(чМинимум) && Number.isFinite(чМаксимум) && чМинимум <= чМаксимум);
	return Math.min(Math.max(чЗначение, чМинимум), чМаксимум);
}

function цепочка(пОбъект, ...мсСвойства) {
	Проверить(мсСвойства.length !== 0);
	for (const сСвойство of мсСвойства) {
		if (!ЭтоОбъект(пОбъект)) {
			return null;
		}
		Проверить(ЭтоНепустаяСтрока(сСвойство));
		пОбъект = пОбъект[сСвойство];
	}
	return пОбъект;
}

function ResolveRelativeUrl(sRelativeUrl, sAbsoluteBaseUrl) {
	return new URL(sRelativeUrl, sAbsoluteBaseUrl).href;
}

function ИзменитьЗаголовокДокумента(сЗаголовок) {
	history.replaceState(null, '');
	document.title = сЗаголовок;
}

function проверитьРазрешенияРасширения() {
	return new Promise(фВыполнить => {
		chrome.permissions.contains({
			origins: chrome.runtime.getManifest().permissions.filter(сРазрешение => сРазрешение.includes(':'))
		}, лРазрешено => {
			if (chrome.runtime.lastError) {
				console.error('permissions.contains', chrome.runtime.lastError.message);
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0221');
			}
			if (!лРазрешено) {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0215');
			}
			фВыполнить();
		});
	});
}

получитьТекущуюВкладку.чИдВкладки = NaN;

получитьТекущуюВкладку.cХранилищеПеченек = '';

function получитьТекущуюВкладку() {
	return new Promise(фВыполнить => {
		chrome.tabs.getCurrent(ДобавитьОбработчикИсключений(оВкладка => {
			if (chrome.runtime.lastError || !ЭтоОбъект(оВкладка) || !Number.isSafeInteger(оВкладка.id) || оВкладка.id === chrome.tabs.TAB_ID_NONE) {
				console.error('tabs.getCurrent', chrome.runtime.lastError && chrome.runtime.lastError.message);
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0221');
			}
			получитьТекущуюВкладку.чИдВкладки = оВкладка.id;
			фВыполнить();
		}));
	});
}

function получитьВсеПеченьки(сАдрес) {
	return new Promise(фВыполнить => {
		const оПараметры = {
			url: сАдрес
		};
		if (получитьТекущуюВкладку.cХранилищеПеченек) {
			оПараметры.storeId = получитьТекущуюВкладку.cХранилищеПеченек;
		}
		chrome.cookies.getAll(оПараметры, ДобавитьОбработчикИсключений(моПеченьки => {
			if (!chrome.runtime.lastError && Array.isArray(моПеченьки)) {
				м_Журнал.Вот(`[API] Количество печенек: ${моПеченьки.length}`);
				фВыполнить(моПеченьки);
			} else {
				console.error('cookies.getAll', chrome.runtime.lastError && chrome.runtime.lastError.message);
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0221');
			}
		}));
	});
}

function удалитьПеченьку(сИмя, сАдрес) {
	return new Promise(фВыполнить => {
		chrome.cookies.remove({
			name: сИмя,
			url: сАдрес
		}, ДобавитьОбработчикИсключений(() => {
			if (chrome.runtime.lastError) {
				console.error('cookies.remove', chrome.runtime.lastError.message);
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0221');
			}
			фВыполнить();
		}));
	});
}

function ОткрытьАдресВНовойВкладке(сАдрес) {
	window.open(сАдрес);
}

function ЗаписатьТекстВЛокальныйФайл(сТекст, сТипДанных, сИмяФайла) {
	Проверить(typeof сТекст == 'string' && ЭтоНепустаяСтрока(сТипДанных) && ЭтоНепустаяСтрока(сИмяФайла));
	const узСсылка = document.createElement('a');
	узСсылка.href = URL.createObjectURL(new Blob([ сТекст ], {
		type: сТипДанных
	}));
	узСсылка.download = сИмяФайла;
	узСсылка.dispatchEvent(new MouseEvent('click'));
}

function создатьОбработчикСобытийЭлемента(фВызвать) {
	return ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.nodeType === Node.ELEMENT_NODE) {
			фВызвать(оСобытие);
		}
	});
}

function ЭтоСобытиеДляСсылки(оСобытие) {
	return !!оСобытие.target.closest('a[href]');
}

function ЭлементВЭтойТочкеМожноПрокрутить(x, y) {
	for (let узЭлемент = document.elementFromPoint(x, y); узЭлемент; узЭлемент = узЭлемент.parentElement) {
		if (ЭтотЭлементМожноПрокрутить(узЭлемент)) {
			return true;
		}
	}
	return false;
}

function ЭтотЭлементМожноПрокрутить(узЭлемент) {
	const оСтиль = getComputedStyle(узЭлемент);
	return (оСтиль.overflowY === 'scroll' || оСтиль.overflowY === 'auto') && узЭлемент.clientHeight < узЭлемент.scrollHeight;
}

function этотЭлементПолностьюПрокручен(элЭлемент) {
	return элЭлемент.scrollHeight - элЭлемент.scrollTop - элЭлемент.clientHeight < 2;
}

function ПоказатьЭлемент(пЭлемент, лПоказать) {
	const узЭлемент = Узел(пЭлемент);
	if (лПоказать) {
		узЭлемент.removeAttribute('hidden');
	} else {
		узЭлемент.setAttribute('hidden', '');
	}
	return узЭлемент;
}

function ЭлементПоказан(пЭлемент) {
	return !Узел(пЭлемент).hasAttribute('hidden');
}

function ИзменитьКнопку(пКнопка, пСостояние) {
	const узКнопка = Узел(пКнопка);
	const чСостояние = Number(пСостояние);
	const сузСостояния = узКнопка.getElementsByTagName('use');
	Проверить(чСостояние >= 0 && чСостояние < сузСостояния.length);
	for (let ы = 0; ы < сузСостояния.length; ++ы) {
		if (ы === чСостояние) {
			const сПодсказка = сузСостояния[ы].getAttributeNS('http://www.w3.org/1999/xlink', 'title');
			if (сПодсказка) {
				узКнопка.title = Текст(сПодсказка);
			}
			сузСостояния[ы].removeAttribute('display');
		} else {
			сузСостояния[ы].setAttribute('display', 'none');
		}
	}
	return узКнопка;
}

const м_Отладка = (() => {
	const МАКС_ДЛИНА_СТРОКИ_ОТЧЕТА = 15e4;
	let _сТокенТрансляции = '';
	let _сТокенТрансляцииБезРекламы = '';
	let _сСписокВариантов = '';
	let _мсСпискиСегментов = [];
	function ВставитьСсылкиДляСкачиванияФайлов(узФорма) {}
	function ПоказатьСтраницу() {
		try {
			м_ПолноэкранныйРежим.Отключить();
		} catch (_) {}
		document.body.textContent = '';
		for (let уз of document.querySelectorAll('link[rel="stylesheet"], style')) {
			уз.remove();
		}
		for (let уз of [ document.documentElement, document.body ]) {
			уз.removeAttribute('class');
			уз.removeAttribute('style');
			уз.removeAttribute('hidden');
		}
		return new Promise(фВыполнить => {
			const уз = document.createElement('iframe');
			уз.src = 'report.html';
			уз.style.position = 'fixed';
			уз.style.top = '0';
			уз.style.left = '0';
			уз.style.width = '100%';
			уз.style.height = '100%';
			уз.style.zIndex = '100500';
			уз.style.border = '0';
			уз.addEventListener('load', () => {
				м_i18n.TranslateDocument(уз.contentDocument);
				фВыполнить(уз.contentDocument);
			});
			document.body.appendChild(уз);
		});
	}
	function ПоказатьФорму(оДокумент, сИдФормы, лНастроитьФон) {
		if (лНастроитьФон) {
			оДокумент.documentElement.classList.add(сИдФормы);
		}
		for (let узПоказатьИлиСкрыть, сузПоказатьИлиСкрыть = оДокумент.forms, ы = 0; узПоказатьИлиСкрыть = сузПоказатьИлиСкрыть[ы]; ++ы) {
			if (узПоказатьИлиСкрыть.id === сИдФормы) {
				ПоказатьЭлемент(узПоказатьИлиСкрыть, true);
				const узФокус = узПоказатьИлиСкрыть.querySelector('[autofocus]');
				if (узФокус) {
					узФокус.focus();
				}
			} else {
				ПоказатьЭлемент(узПоказатьИлиСкрыть, false);
			}
		}
	}
	function ПоказатьСообщение(сСообщение, сКодСсылки, сАдресСсылки) {
		ПоказатьСтраницу().then(оДокумент => {
			оДокумент.getElementById('отладка-текстсообщения').textContent = сСообщение;
			if (сКодСсылки) {
				const элСсылка = оДокумент.getElementById('отладка-ссылкасообщения');
				элСсылка.textContent = Текст(сКодСсылки);
				элСсылка.href = сАдресСсылки;
			}
			ПоказатьФорму(оДокумент, 'отладка-сообщение', true);
		});
	}
	function ПоказатьИОтправитьОтчет(оОтчет, буфОтправить) {
		ПоказатьСтраницу().then(оДокумент => {
			let узФорма;
			if (оОтчет.ПричинаЗавершенияРаботы === 'ОТПРАВИТЬ ОТЗЫВ') {
				узФорма = оДокумент.getElementById('отладка-отзыв');
			} else {
				узФорма = оДокумент.getElementById('отладка-ошибка');
				ВставитьСсылкиДляСкачиванияФайлов(узФорма);
			}
			узФорма.elements['отладка-отчет'].value = JSON.stringify(оОтчет);
			ПоказатьФорму(оДокумент, узФорма.id, true);
			оДокумент.addEventListener('reset', оСобытие => {
				оСобытие.preventDefault();
				window.location.reload(true);
			});
			let оЗапрос, оДанные, чКод;
			оДокумент.addEventListener('submit', оСобытие => {
				оСобытие.preventDefault();
				if (оСобытие.target.id === 'отладка-идетотправка') {
					чКод = 200;
					оЗапрос.abort();
					return;
				}
				оДокумент.getElementById('отладка-ходотправки').value = 0;
				ПоказатьФорму(оДокумент, 'отладка-идетотправка', false);
				чКод = 0;
				if (!оЗапрос) {
					оЗапрос = new XMLHttpRequest();
					оЗапрос.upload.addEventListener('progress', оСобытие => {
						оДокумент.getElementById('отладка-ходотправки').value = оСобытие.loaded / оСобытие.total;
					});
					оЗапрос.addEventListener('load', () => {
						чКод = оЗапрос.status;
					});
					оЗапрос.addEventListener('loadend', () => {
						if (чКод >= 200 && чКод <= 299) {
							window.location.reload(true);
						} else if (чКод === 474) {
							показатьФорму('отладка-браузерустарел', true);
						} else if (чКод >= 400 && чКод <= 499) {
							ПоказатьФорму(оДокумент, 'отладка-версияустарела', true);
						} else {
							ПоказатьФорму(оДокумент, 'отладка-сбойотправки', true);
						}
					});
					оДанные = new FormData(узФорма);
					if (буфОтправить) {
						оДанные.append('отладка-транспортныйпоток-0', new Blob([ буфОтправить ], {
							type: 'video/mp2t'
						}));
					}
				}
				//! This request sends a crash report or user feedback to the extension developer. The user can
				//! view the contents of оОтчет and refuse to send it. See https://coolcmd.github.io/privacy.html
								оЗапрос.open('POST', 'http://r90354g8.beget.tech/tw5/report3.php');
				оЗапрос.send(оДанные);
			});
		});
	}
	function сохранитьТокенТрансляции(сТокенТрансляции, лБезРекламы) {
		сТокенТрансляции = ОграничитьДлинуСтроки(сТокенТрансляции, МАКС_ДЛИНА_СТРОКИ_ОТЧЕТА);
		if (лБезРекламы) {
			_сТокенТрансляцииБезРекламы = сТокенТрансляции;
		} else {
			_сТокенТрансляции = сТокенТрансляции;
		}
	}
	function СохранитьСписокВариантов(сСписокВариантов) {
		_сСписокВариантов = сСписокВариантов;
	}
	function СохранитьСписокСегментов(сСписокСегментов) {
		if (_мсСпискиСегментов.length === 10) {
			_мсСпискиСегментов.shift();
		}
		_мсСпискиСегментов.push(сСписокСегментов);
	}
	function СохранитьТранспортныйПоток(оСегмент) {}
	function СохранитьПреобразованныйСегмент(оСегмент) {}
	function сжатьСписок(сСписок) {
		return ОграничитьДлинуСтроки(сСписок.replace(/^(?:https?:\/\/|#EXT-X-TWITCH-PREFETCH:).+$/gm, сСтрока => ОграничитьДлинуСтроки(сСтрока, 100)), МАКС_ДЛИНА_СТРОКИ_ОТЧЕТА);
	}
	function ОбнюхатьПроцессорИОперативку(фВызвать) {
		const оПроцессорИОперативка = {
			capacity: navigator.deviceMemory,
			numOfProcessors: navigator.hardwareConcurrency
		};
		if (performance.memory) {
			оПроцессорИОперативка.jsHeapSizeLimit = Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024);
			оПроцессорИОперативка.totalJSHeapSize = Math.round(performance.memory.totalJSHeapSize / 1024 / 1024);
			оПроцессорИОперативка.usedJSHeapSize = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);
		}
		try {
			chrome.system.memory.getInfo(оОперативка => {
				try {
					оПроцессорИОперативка.capacity = Округлить(оОперативка.capacity / 1024 / 1024 / 1024, 1);
					оПроцессорИОперативка.availableCapacity = Округлить(оОперативка.availableCapacity / 1024 / 1024 / 1024, 1);
					chrome.system.cpu.getInfo(оПроцессор => {
						try {
							оПроцессорИОперативка.numOfProcessors = оПроцессор.numOfProcessors;
							оПроцессорИОперативка.modelName = оПроцессор.modelName;
							оПроцессорИОперативка.archName = оПроцессор.archName;
						} catch (_) {}
						фВызвать(оПроцессорИОперативка);
					});
				} catch (_) {
					фВызвать(оПроцессорИОперативка);
				}
			});
		} catch (_) {
			фВызвать(оПроцессорИОперативка);
		}
	}
	function ОбнюхатьВидюху() {
		try {
			const oContext = document.createElement('canvas').getContext('webgl');
			const oExtension = oContext.getExtension('WEBGL_debug_renderer_info');
			return `${oContext.getParameter(oExtension.UNMASKED_VENDOR_WEBGL)} | ${oContext.getParameter(oExtension.UNMASKED_RENDERER_WEBGL)}`;
		} catch (_) {}
	}
	function получитьПараметрыСоединения() {
		const оСоединение = navigator.connection || {};
		return {
			online: navigator.onLine,
			effectiveType: оСоединение.effectiveType,
			downlink: оСоединение.downlink,
			rtt: оСоединение.rtt,
			type: оСоединение.type,
			downlinkMax: оСоединение.downlinkMax
		};
	}
	function ПолучитьЯзыки() {
		try {
			return `${navigator.language} | ${navigator.languages} | ${Текст('J0103')}`;
		} catch (_) {}
	}
	function ПолучитьУстановкиДаты() {
		try {
			const оУстановки = new Intl.DateTimeFormat().resolvedOptions();
			оУстановки.timezoneOffset = new Date().getTimezoneOffset();
			return оУстановки;
		} catch (_) {}
	}
	function СоздатьПоказатьИОтправитьОтчет(сПричинаЗавершенияРаботы, буфОтправить) {
		ОбнюхатьПроцессорИОперативку(оПроцессорИОперативка => {
			ПоказатьИОтправитьОтчет({
				ПричинаЗавершенияРаботы: сПричинаЗавершенияРаботы,
				ВерсияРасширения: ВЕРСИЯ_РАСШИРЕНИЯ,
				Оборзеватель: navigator.userAgent,
				Время: new Date().toISOString(),
				Адрес: window.location.href,
				Инкогнито: chrome.extension.inIncognitoContext,
				Рассинхронизация: Date.now() - performance.now() - г_чТочноеВремя,
				Фокусник: м_Фокусник.ПолучитьСостояние(),
				Пульс: м_Пульс.ПолучитьДанныеДляОтчета(),
				Настройки: м_Настройки.ПолучитьДанныеДляОтчета(),
				Статистика: м_Статистика.ПолучитьДанныеДляОтчета(),
				Языки: ПолучитьЯзыки(),
				УстановкиДаты: ПолучитьУстановкиДаты(),
				Соединение: получитьПараметрыСоединения(),
				Видюха: ОбнюхатьВидюху(),
				ПроцессорИОперативка: оПроцессорИОперативка,
				ТочекКасания: navigator.maxTouchPoints,
				Экран: {
					top: window.screen.top,
					left: window.screen.left,
					width: window.screen.width,
					height: window.screen.height,
					availTop: window.screen.availTop,
					availLeft: window.screen.availLeft,
					availWidth: window.screen.availWidth,
					availHeight: window.screen.availHeight,
					colorDepth: window.screen.colorDepth,
					pixelDepth: window.screen.pixelDepth,
					orientation: typeof window.screen.orientation == 'object' ? window.screen.orientation.type : void 0,
					screenX: window.screenX,
					screenY: window.screenY,
					outerWidth: window.outerWidth,
					outerHeight: window.outerHeight,
					innerWidth: window.innerWidth,
					innerHeight: window.innerHeight,
					devicePixelRatio: window.devicePixelRatio
				},
				ТокенТрансляции: _сТокенТрансляции,
				ТокенТрансляцииБезРекламы: _сТокенТрансляцииБезРекламы,
				СписокВариантов: сжатьСписок(_сСписокВариантов),
				СпискиСегментов: _мсСпискиСегментов.map(сжатьСписок),
				Журнал: м_Журнал.ПолучитьДанныеДляОтчета()
			}, буфОтправить);
		});
	}
	function ЗавершитьРаботуИПоказатьСообщение(сКодСообщения, сКодСсылки, сАдресСсылки) {
		if (!г_лРаботаЗавершена) {
			console.error(сКодСообщения);
			ЗавершитьРаботу(false);
			ПоказатьСообщение(Текст(сКодСообщения), сКодСсылки, сАдресСсылки);
		}
		throw void 0;
	}
	function ЗавершитьРаботуИОтправитьОтчет(сПричинаЗавершенияРаботы, буфОтправить) {
		if (!г_лРаботаЗавершена) {
			console.error(сПричинаЗавершенияРаботы);
			сПричинаЗавершенияРаботы = ОграничитьДлинуСтроки(String(сПричинаЗавершенияРаботы), МАКС_ДЛИНА_СТРОКИ_ОТЧЕТА);
			if (сПричинаЗавершенияРаботы.includes('out of memory')) {
				ЗавершитьРаботуИПоказатьСообщение('J0200');
			}
			try {
				м_Проигрыватель.ПоказатьСостояние('Вот', 'Завершаю работу');
				г_моОчередь.ПоказатьСостояние();
			} catch (_) {}
			ЗавершитьРаботу(false);
			СоздатьПоказатьИОтправитьОтчет(сПричинаЗавершенияРаботы, буфОтправить);
		}
		throw void 0;
	}
	function ПойманоИсключение(пИсключение) {
		ЗавершитьРаботуИОтправитьОтчет(ПеревестиИсключениеВСтроку(пИсключение));
	}
	function ЗавершитьРаботуИОтправитьОтзыв() {
		try {
			ЗавершитьРаботуИОтправитьОтчет('ОТПРАВИТЬ ОТЗЫВ');
		} catch (_) {}
	}
	return {
		ПойманоИсключение,
		ЗавершитьРаботуИПоказатьСообщение,
		ЗавершитьРаботуИОтправитьОтчет,
		ЗавершитьРаботуИОтправитьОтзыв,
		сохранитьТокенТрансляции,
		СохранитьСписокВариантов,
		СохранитьСписокСегментов,
		СохранитьТранспортныйПоток,
		СохранитьПреобразованныйСегмент
	};
})();

class ОтменаОбещания {
	constructor() {
		this.лОтменено = false;
		this._фОбработчик = null;
	}
	Отменить() {
		this.лОтменено = true;
		if (this._фОбработчик) {
			this._фОбработчик();
			this._фОбработчик = null;
		}
	}
	ЗаменитьОбработчик(фОбработчик) {
		Проверить(!this.лОтменено);
		Проверить(typeof фОбработчик == 'function' || фОбработчик === null);
		this._фОбработчик = фОбработчик;
	}
}

ОтменаОбещания.ПРИЧИНА = new Error('ОБЕЩАНИЕ_ОТМЕНЕНО');

function Ждать(оОтменаОбещания, чМиллисекунды) {
	if (оОтменаОбещания && оОтменаОбещания.лОтменено) {
		return Promise.reject(ОтменаОбещания.ПРИЧИНА);
	}
	if (чМиллисекунды === -Infinity) {
		let оОбещание = Promise.resolve();
		if (оОтменаОбещания) {
			оОбещание = оОбещание.then(() => {
				if (оОтменаОбещания.лОтменено) {
					throw ОтменаОбещания.ПРИЧИНА;
				}
			});
		}
		return оОбещание;
	}
	Проверить(Number.isFinite(чМиллисекунды));
	чМиллисекунды = Math.round(чМиллисекунды);
	Проверить(чМиллисекунды >= 0 && чМиллисекунды <= 2147483647);
	if (оОтменаОбещания) {
		return new Promise((фВыполнить, фОтказаться) => {
			const чТаймер = setTimeout(() => {
				оОтменаОбещания.ЗаменитьОбработчик(null);
				фВыполнить();
			}, чМиллисекунды);
			оОтменаОбещания.ЗаменитьОбработчик(() => {
				clearTimeout(чТаймер);
				фОтказаться(ОтменаОбещания.ПРИЧИНА);
			});
		});
	}
	return new Promise(фВыполнить => {
		setTimeout(фВыполнить, чМиллисекунды);
	});
}

class Сегмент {
	constructor(чОбработка, пДанные, чДлительность, лРазрыв, чНомер) {
		Проверить(typeof чОбработка == 'number' && чОбработка >= ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ && чОбработка <= ОБРАБОТКА_ПРЕОБРАЗОВАН);
		Проверить(typeof пДанные == 'number' && чОбработка >= ОБРАБОТКА_ЗАГРУЖЕН || typeof пДанные == 'string' && чОбработка === ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ || ЭтоОбъект(пДанные) && чОбработка > ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ);
		switch (arguments.length) {
		  case 2:
			чДлительность = 0;
			лРазрыв = true;

		  case 4:
			Проверить(Number.isFinite(чДлительность) && чДлительность >= 0);
			Проверить(typeof лРазрыв == 'boolean');
			чНомер = ++Сегмент._чНомер;

		  case 5:
			Проверить(Number.isFinite(чНомер));
			break;

		  default:
			Проверить(false);
		}
		if (typeof пДанные == 'number') {
			м_Журнал.Окак(`[Очередь] Добавлен сегмент ${чНомер} Состояние=${пДанные} Обработка=${чОбработка}`);
		}
		this.чОбработка = чОбработка;
		this.пДанные = пДанные;
		this.чДлительность = чДлительность;
		this.лРазрыв = лРазрыв;
		this.чНомер = чНомер;
	}
	toString() {
		if (typeof this.пДанные == 'number') {
			return `${this.чНомер}-${this.чОбработка}-${this.пДанные}`;
		}
		if (this.лРазрыв) {
			return `${this.чНомер}-${this.чОбработка}-Р`;
		}
		return `${this.чНомер}-${this.чОбработка}`;
	}
}

Сегмент._чНомер = 0;

let г_моОчередь = [];

г_моОчередь.ПодсчитатьПреобразованныеСегменты = function() {
	let кКоличество = 0, чДлительность = 0;
	for (;кКоличество < this.length && this[кКоличество].чОбработка === ОБРАБОТКА_ПРЕОБРАЗОВАН; ++кКоличество) {
		if (typeof this[кКоличество].пДанные != 'number') {
			чДлительность += this[кКоличество].чДлительность;
		}
	}
	return {
		кКоличество,
		чДлительность
	};
};

г_моОчередь.Добавить = function(оСегмент) {
	Проверить(оСегмент instanceof Сегмент);
	for (let о of this) {
		Проверить(о.чНомер !== оСегмент.чНомер);
	}
	if (оСегмент.чОбработка !== ОБРАБОТКА_ПРЕОБРАЗОВАН) {
		this.push(оСегмент);
	} else {
		const {кКоличество, чДлительность} = this.ПодсчитатьПреобразованныеСегменты();
		if (чДлительность > ПЕРЕПОЛНЕНИЕ_БУФЕРА * 1.5) {
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0208');
		}
		this.splice(кКоличество, 0, оСегмент);
	}
	return оСегмент;
};

г_моОчередь.Удалить = function(пЭлемент, кКоличество = 1) {
	if (кКоличество === 0) {
		return;
	}
	Проверить(Number.isInteger(кКоличество) && кКоличество > 0);
	let чИндекс;
	if (typeof пЭлемент == 'number') {
		Проверить(Number.isInteger(пЭлемент) && пЭлемент >= 0);
		чИндекс = пЭлемент;
	} else if ((чИндекс = this.indexOf(пЭлемент)) === -1) {
		Проверить(пЭлемент instanceof Сегмент);
		return;
	}
	while (--кКоличество >= 0) {
		Проверить(чИндекс < this.length);
		switch (this[чИндекс].чОбработка) {
		  case ОБРАБОТКА_ЗАГРУЖАЕТСЯ:
			if (ЭтоОбъект(this[чИндекс].пДанные)) {
				м_Журнал.Вот(`[Очередь] Отменяю загрузку ${this[чИндекс]}`);
				this[чИндекс].пДанные.Отменить();
			}
			break;

		  case ОБРАБОТКА_ЗАГРУЖЕН:
			м_Помойка.Выбросить(this[чИндекс].пДанные);
			break;

		  case ОБРАБОТКА_ПРЕОБРАЗОВАН:
			if (ЭтоОбъект(this[чИндекс].пДанные)) {
				м_Помойка.Выбросить(this[чИндекс].пДанные.мбСегментИнициализации);
				м_Помойка.Выбросить(this[чИндекс].пДанные.мбМедиасегмент);
			}
		}
		м_Журнал.Вот(`[Очередь] Удаляю ${this[чИндекс]}`);
		this.splice(чИндекс, 1);
	}
};

г_моОчередь.Очистить = function() {
	this.Удалить(0, this.length);
};

г_моОчередь.ПоказатьСостояние = function() {
	м_Журнал.Вот(`[Очередь] ${this.join(' ')}`);
};

class ВводЧисла {
	constructor(сИмяНастройки, чШаг, чТочность, сИдУзла) {
		Проверить(чТочность >= 0 && ЭтоНепустаяСтрока(сИдУзла));
		this._сИмяНастройки = сИмяНастройки;
		this._чШаг = чШаг;
		this._чТочность = чТочность;
		this._чДобавить = 0;
		this._кИнтервал = 0;
		this._чТаймер = 0;
		м_События.ДобавитьОбработчик(`тащилка-перетаскивание-${сИдУзла}`, оПараметры => this._ОбработатьПеретаскивание(оПараметры));
		this._узЧисло = document.querySelector(`#${сИдУзла} > .вводчисла-число`);
		this.Обновить();
	}
	Обновить(чЗначение = м_Настройки.Получить(this._сИмяНастройки)) {
		this._узЧисло.value = чЗначение === АВТОНАСТРОЙКА ? Текст(м_Настройки.ПолучитьПараметрыНастройки(this._сИмяНастройки).сАвтонастройка) : м_i18n.ФорматироватьЧисло(чЗначение, this._чТочность);
	}
	_ОбработатьПеретаскивание(оПараметры) {
		const ИНТЕРВАЛ_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ = 130;
		if (оПараметры.чШаг === 1) {
			this._чДобавить = оПараметры.узНажат.classList.contains('вводчисла-минус') ? -this._чШаг : this._чШаг;
			this._кИнтервал = 0;
			this._чТаймер = setInterval(() => this._ОбработатьТаймер(), ИНТЕРВАЛ_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ);
			this._ОбработатьТаймер();
		}
		if (оПараметры.чШаг === 3) {
			clearInterval(this._чТаймер);
		}
	}
}

ВводЧисла.prototype._ОбработатьТаймер = ДобавитьОбработчикИсключений(function() {
	const ЗАДЕРЖКА_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ = 3;
	if (++this._кИнтервал == 1 || this._кИнтервал > ЗАДЕРЖКА_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ) {
		const оПараметрыНастройки = м_Настройки.ПолучитьПараметрыНастройки(this._сИмяНастройки);
		const чЗначение = м_Настройки.Получить(this._сИмяНастройки);
		let чНовоеЗначение;
		if (оПараметрыНастройки.сАвтонастройка && this._чДобавить < 0 && чЗначение === оПараметрыНастройки.чМинимальное || оПараметрыНастройки.сАвтонастройка && this._чДобавить > 0 && чЗначение === оПараметрыНастройки.чМаксимальное) {
			чНовоеЗначение = АВТОНАСТРОЙКА;
		} else if (чЗначение === АВТОНАСТРОЙКА && this._чДобавить > 0) {
			чНовоеЗначение = оПараметрыНастройки.чМинимальное;
		} else if (чЗначение === АВТОНАСТРОЙКА && this._чДобавить < 0) {
			чНовоеЗначение = оПараметрыНастройки.чМаксимальное;
		} else {
			чНовоеЗначение = чЗначение + this._чДобавить;
		}
		if (чНовоеЗначение !== АВТОНАСТРОЙКА) {
			чНовоеЗначение = Ограничить(Округлить(чНовоеЗначение, this._чТочность), оПараметрыНастройки.чМинимальное, оПараметрыНастройки.чМаксимальное);
		}
		if (чНовоеЗначение !== чЗначение) {
			м_Настройки.Изменить(this._сИмяНастройки, чНовоеЗначение);
			this.Обновить(чНовоеЗначение);
			this.ПослеИзменения(чНовоеЗначение);
		}
	}
});

ВводЧисла.prototype.ПослеИзменения = ЗАГЛУШКА;

const м_События = (() => {
	let _амОбработчики = new Map();
	function ДобавитьОбработчик(сСобытие, фОбработчик) {
		Проверить(ЭтоНепустаяСтрока(сСобытие));
		Проверить(typeof фОбработчик == 'function' || ЭтоОбъект(фОбработчик));
		let мноОбработчикиСобытия = _амОбработчики.get(сСобытие);
		if (мноОбработчикиСобытия === void 0) {
			мноОбработчикиСобытия = new Set();
			_амОбработчики.set(сСобытие, мноОбработчикиСобытия);
		}
		мноОбработчикиСобытия.add(фОбработчик);
	}
	function УдалитьОбработчик(сСобытие, фОбработчик) {
		Проверить(ЭтоНепустаяСтрока(сСобытие));
		Проверить(typeof фОбработчик == 'function' || ЭтоОбъект(фОбработчик));
		const мноОбработчикиСобытия = _амОбработчики.get(сСобытие);
		if (мноОбработчикиСобытия !== void 0) {
			мноОбработчикиСобытия.delete(фОбработчик);
			if (мноОбработчикиСобытия.size === 0) {
				_амОбработчики.delete(сСобытие);
			}
		}
	}
	function ПослатьСобытие(сСобытие, пДанные) {
		Проверить(ЭтоНепустаяСтрока(сСобытие));
		м_Журнал.Вот(`[События] Произошло событие ${сСобытие}`);
		const мноОбработчикиСобытия = _амОбработчики.get(сСобытие);
		if (мноОбработчикиСобытия !== void 0) {
			Проверить(мноОбработчикиСобытия.size !== 0);
			let оСобытие;
			for (let фОбработчик of мноОбработчикиСобытия.values()) {
				if (typeof фОбработчик == 'function') {
					фОбработчик(пДанные, сСобытие);
				} else {
					if (оСобытие === void 0) {
						оСобытие = {
							type: сСобытие,
							data: пДанные
						};
					}
					фОбработчик.handleEvent(оСобытие);
				}
			}
		}
	}
	return {
		ДобавитьОбработчик,
		УдалитьОбработчик,
		ПослатьСобытие
	};
})();

const м_Помойка = (() => {
	class ПомойкаВКаналеСообщений {
		constructor() {
			this._оКаналСообщений = null;
		}
		Выбросить(пБарахло) {
			if (ЭтоОбъект(пБарахло)) {
				const буфБарахло = пБарахло.buffer ? пБарахло.buffer : пБарахло;
				if (буфБарахло.byteLength) {
					м_Журнал.Вот(`[Помойка] Выбрасываю ${буфБарахло.byteLength} байтов`);
					if (this._оКаналСообщений === null) {
						this._оКаналСообщений = new MessageChannel();
						this._оКаналСообщений.port2.close();
					}
					this._оКаналСообщений.port1.postMessage(буфБарахло, [ буфБарахло ]);
				}
			}
		}
		Сжечь() {}
	}
	class ПомойкаВРабочемПотоке {
		constructor() {
			this._оРабочийПоток = null;
			this._кбВПомойке = 0;
			м_События.ДобавитьОбработчик('управление-изменилосьсостояние', чСостояние => {
				if (чСостояние === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ || чСостояние === СОСТОЯНИЕ_ОСТАНОВКА || чСостояние === СОСТОЯНИЕ_ПОВТОР) {
					this.Сжечь();
				}
			});
		}
		Выбросить(пБарахло) {
			const ВМЕСТИМОСТЬ_ПОМОЙКИ = 1e7;
			if (ЭтоОбъект(пБарахло)) {
				const буфБарахло = пБарахло.buffer ? пБарахло.buffer : пБарахло;
				if (буфБарахло.byteLength) {
					м_Журнал.Вот(`[Помойка] Выбрасываю ${буфБарахло.byteLength} байтов`);
					if (this._оРабочийПоток === null) {
						this._оРабочийПоток = new Worker('/recycler.js');
					}
					this._кбВПомойке += буфБарахло.byteLength;
					this._оРабочийПоток.postMessage(буфБарахло, [ буфБарахло ]);
					if (this._кбВПомойке > ВМЕСТИМОСТЬ_ПОМОЙКИ) {
						this.Сжечь();
					}
				}
			}
		}
		Сжечь() {
			if (this._оРабочийПоток !== null) {
				м_Журнал.Вот(`[Помойка] Сжигаю ${this._кбВПомойке} байтов`);
				this._оРабочийПоток.postMessage(null);
				this._оРабочийПоток = null;
				this._кбВПомойке = 0;
			}
		}
	}
	if (этоМобильноеУстройство()) {
		return {
			Выбросить: ЗАГЛУШКА,
			Сжечь: ЗАГЛУШКА
		};
	}
	return получитьВерсиюДвижкаБраузера() < 67 ? new ПомойкаВРабочемПотоке() : new ПомойкаВКаналеСообщений();
})();

const м_Фокусник = (() => {
	let _оСостояние = ПолучитьНовоеСостояние();
	function ПолучитьСостояние() {
		return _оСостояние;
	}
	function ПолучитьНовоеСостояние() {
		const лПоказан = !document.hidden;
		const лАктивен = лПоказан && document.hasFocus();
		return {
			лПоказан,
			лАктивен
		};
	}
	const ОбработатьСобытие = ДобавитьОбработчикИсключений(оСобытие => {
		м_Журнал.Вот(`[Фокусник] Событие ${оСобытие.type}, старое состояние ${м_Журнал.O(_оСостояние)}`);
		setTimeout(ОбновитьСостояние);
	});
	const ОбновитьСостояние = ДобавитьОбработчикИсключений(() => {
		const оНовоеСостояние = ПолучитьНовоеСостояние();
		if (_оСостояние.лПоказан !== оНовоеСостояние.лПоказан || _оСостояние.лАктивен !== оНовоеСостояние.лАктивен) {
			м_Журнал.Окак(`[Фокусник] Новое состояние ${м_Журнал.O(оНовоеСостояние)}`);
			_оСостояние = оНовоеСостояние;
			м_События.ПослатьСобытие('фокусник-изменилосьсостояние', оНовоеСостояние);
		}
	});
	м_Журнал.Вот(`[Фокусник] Начальное состояние ${м_Журнал.O(_оСостояние)}`);
	document.addEventListener('visibilitychange', ОбработатьСобытие);
	window.addEventListener('focus', ОбработатьСобытие);
	window.addEventListener('blur', ОбработатьСобытие);
	return {
		ПолучитьСостояние
	};
})();

const м_Пульс = (() => {
	const ИНТЕРВАЛ_ПРОВЕРКИ = 970;
	const МИН_ОТКЛОНЕНИЕ_ВРЕМЕНИ = -30;
	const МАКС_ОТКЛОНЕНИЕ_ВРЕМЕНИ = 200;
	const МАКС_ОТКЛОНЕНИЕ_ДАТЫ = 40;
	let _чМаксимальноеОтклонение = 0;
	let _чТаймер = 0;
	let _чВремя;
	let _чДата;
	const ПроверитьПульс = ДобавитьОбработчикИсключений(() => {
		const чВремя = performance.now();
		const чДата = Date.now();
		const чОтклонениеВремени = чВремя - _чВремя - ИНТЕРВАЛ_ПРОВЕРКИ;
		const чОтклонениеДаты = чДата - _чДата - (чВремя - _чВремя);
		if (чОтклонениеВремени < МИН_ОТКЛОНЕНИЕ_ВРЕМЕНИ || чОтклонениеВремени > МАКС_ОТКЛОНЕНИЕ_ВРЕМЕНИ || Math.abs(чОтклонениеДаты) > МАКС_ОТКЛОНЕНИЕ_ДАТЫ) {
			м_Журнал.Ой(`[Пульс] ${м_Журнал.F0(чОтклонениеВремени)} ${м_Журнал.F0(чОтклонениеДаты)}`);
		}
		_чМаксимальноеОтклонение = Math.max(_чМаксимальноеОтклонение, чОтклонениеВремени);
		_чВремя = чВремя;
		_чДата = чДата;
		_чТаймер = setTimeout(ПроверитьПульс, ИНТЕРВАЛ_ПРОВЕРКИ);
	});
	function ОбработатьИзменениеСостояния(чСостояние) {
		if (чСостояние === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ || чСостояние === СОСТОЯНИЕ_ОСТАНОВКА || чСостояние === СОСТОЯНИЕ_ПОВТОР) {
			if (_чТаймер !== 0) {
				м_Журнал.Вот('[Пульс] Таймер остановлен');
				clearTimeout(_чТаймер);
				_чТаймер = 0;
			}
		} else if (_чТаймер === 0) {
			м_Журнал.Вот('[Пульс] Таймер запущен');
			_чВремя = performance.now();
			_чДата = Date.now();
			_чТаймер = setTimeout(ПроверитьПульс, ИНТЕРВАЛ_ПРОВЕРКИ);
		}
	}
	function ПолучитьДанныеДляОтчета() {
		return _чМаксимальноеОтклонение;
	}
	м_События.ДобавитьОбработчик('управление-изменилосьсостояние', ОбработатьИзменениеСостояния);
	return {
		ПолучитьДанныеДляОтчета
	};
})();

const м_Статистика = (() => {
	const ЧАСТОТА_ОБНОВЛЕНИЯ_СТАТИСТИКИ = 3;
	const РАЗМЕР_ИСТОРИИ_СПИСКА = 30;
	const РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ = 30;
	const РАЗМЕР_ИСТОРИИ_БУФЕРА = 30;
	const РАЗМЕР_ИСТОРИИ_РЕКЛАМЫ = 15;
	const ВЫДЕЛИТЬ_ОЖИДАНИЕ_ОТВЕТА = 1;
	const ВЫДЕЛИТЬ_ПРЕОБРАЗОВАНО = 2;
	const ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МИН = 1;
	const ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МАКС = .5;
	const ВЫДЕЛИТЬ_ПРОПУЩЕННЫЕ_КАДРЫ = 100;
	const ВЫДЕЛИТЬ_ЧАСТОТУ_КАДРОВ = .85;
	const ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_ОТН = 1 / 5;
	const ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_АБС = 300;
	const ВЫДЕЛИТЬ_ИСЧЕРПАНИЕ_БУФЕРА = 5;
	let _чТаймер = 0;
	let _nTargetDuration = 0;
	let _чМинДлительностьВидеосемпла = -Infinity;
	let _чМаксДлительностьВидеосемпла = +Infinity;
	let _оИнтервалОбновления = null;
	let _оСегментовДобавлено = null;
	let _оСекундДобавлено = null;
	let _оТолщинаСегмента = null;
	let _оТолщинаКанала = null;
	let _оОжиданиеОтвета = null;
	let _оНеПросмотрено = null;
	let _кИсходныхСегментов = 0;
	let _кЗабракованныхСегментов = 0;
	let _кбВсегоСкачано = 0;
	let _кОшибокЗагрузки = 0;
	let _кПропущенныхСегментов = 0;
	let _кНезагруженныхСегментов = 0;
	let _кПотерьВидео = 0;
	let _кПотерьЗвука = 0;
	let _кИсчерпанийБуфера = 0;
	let _кИсчерпанийБуфераДосрочно = 0;
	let _кПереполненийБуфера = 0;
	let _чПропущеноВБуфере = 0;
	let _кКоличествоРекламы = 0;
	let _мчНачалоРекламы = [];
	let _мчКонецРекламы = [];
	let _чВремяПоследнегоОбновления;
	function ВыделитьСегментовДобавлено(чЧисло) {
		return чЧисло !== 1 && чЧисло !== 2;
	}
	function ВыделитьОжиданиеОтвета(чЧисло) {
		return чЧисло >= ВЫДЕЛИТЬ_ОЖИДАНИЕ_ОТВЕТА;
	}
	function ВыделитьНеПросмотрено(чЧисло) {
		return чЧисло < ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МИН || чЧисло >= м_Настройки.Получить('чМаксРазмерБуфера') + м_Настройки.Получить('чРастягиваниеБуфера') * ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МАКС;
	}
	class Анализ {
		constructor(сИдУзла, чРазмерИстории, чТочность) {
			Проверить(чРазмерИстории > 0 && чТочность >= 0);
			this._узТаблица = Узел(сИдУзла);
			this._мчИстория = new Array(чРазмерИстории);
			this._млВыделить = new Array(чРазмерИстории);
			this._чТочность = чТочность;
			this._Очистить();
		}
		Освободить() {
			this._узТаблица.textContent = '';
			this._узТаблица = null;
		}
		Очистить() {
			if (this._кЗаполнено !== 0) {
				this._Очистить();
			}
		}
		ПолучитьПоследнееЧисло(чЗаглушка) {
			return this._кЗаполнено === 0 ? чЗаглушка : this._мчИстория[this._чИндекс];
		}
		ДобавитьЧисло(чЧисло, пВыделить, пВыделитьСреднее) {
			const НАЧАЛО_ИСТОРИИ = 5;
			const лВыделить = Boolean(typeof пВыделить == 'function' ? пВыделить(чЧисло) : пВыделить);
			if (this._кЗаполнено !== 0) {
				this._узТаблица.children[НАЧАЛО_ИСТОРИИ + this._чИндекс].classList.add('статистика-подробно');
			}
			if (this._кЗаполнено !== this._мчИстория.length) {
				++this._кЗаполнено;
			}
			if (++this._чИндекс === this._мчИстория.length) {
				this._чИндекс = 0;
			}
			this._мчИстория[this._чИндекс] = чЧисло;
			this._млВыделить[this._чИндекс] = лВыделить;
			let чМинимальноеЧисло = Infinity, лВыделитьМинимальное = false;
			let чМаксимальноеЧисло = -Infinity, лВыделитьМаксимальное = false;
			let чСреднееЧисло = 0, кЧисел = 0;
			for (let ы = 0; ы < this._кЗаполнено; ++ы) {
				if (Number.isFinite(this._мчИстория[ы])) {
					if (this._мчИстория[ы] < чМинимальноеЧисло || this._мчИстория[ы] === чМинимальноеЧисло && this._млВыделить[ы]) {
						чМинимальноеЧисло = this._мчИстория[ы];
						лВыделитьМинимальное = this._млВыделить[ы];
					}
					if (this._мчИстория[ы] > чМаксимальноеЧисло || this._мчИстория[ы] === чМаксимальноеЧисло && this._млВыделить[ы]) {
						чМаксимальноеЧисло = this._мчИстория[ы];
						лВыделитьМаксимальное = this._млВыделить[ы];
					}
					чСреднееЧисло += this._мчИстория[ы];
					++кЧисел;
				}
			}
			let лВыделитьСреднее;
			if (кЧисел === 0) {
				чСреднееЧисло = NaN;
				лВыделитьСреднее = false;
			} else {
				чСреднееЧисло /= кЧисел;
				лВыделитьСреднее = Boolean(typeof пВыделитьСреднее == 'function' ? пВыделитьСреднее(чСреднееЧисло) : пВыделитьСреднее);
			}
			ОбновитьЗначение(this._узТаблица.children[0], this._ВСтроку(чМинимальноеЧисло), лВыделитьМинимальное);
			ОбновитьЗначение(this._узТаблица.children[2], this._ВСтроку(чСреднееЧисло), лВыделитьСреднее);
			ОбновитьЗначение(this._узТаблица.children[4], this._ВСтроку(чМаксимальноеЧисло), лВыделитьМаксимальное);
			ОбновитьЗначение(this._узТаблица.children[НАЧАЛО_ИСТОРИИ + this._чИндекс], this._ВСтроку(чЧисло), лВыделить).classList.remove('статистика-подробно');
			return чСреднееЧисло;
		}
		_Очистить() {
			this._кЗаполнено = 0;
			this._чИндекс = -1;
			const узФрагмент = document.createDocumentFragment();
			узФрагмент.appendChild(document.createElement('td')).className = 'анализ-минимум';
			узФрагмент.appendChild(document.createElement('td')).textContent = ' < ';
			узФрагмент.lastChild.className = 'статистика-символ';
			узФрагмент.appendChild(document.createElement('td')).className = 'анализ-среднее';
			узФрагмент.appendChild(document.createElement('td')).textContent = ' < ';
			узФрагмент.lastChild.className = 'статистика-символ';
			узФрагмент.appendChild(document.createElement('td')).className = 'анализ-максимум';
			for (let ы = this._мчИстория.length; --ы >= 0; ) {
				узФрагмент.appendChild(document.createElement('td')).className = 'анализ-история статистика-подробно';
			}
			this._узТаблица.textContent = '';
			this._узТаблица.appendChild(узФрагмент);
		}
		_ВСтроку(чЧисло) {
			return Number.isFinite(чЧисло) ? чЧисло.toFixed(чЧисло < 100 ? this._чТочность : 0) : ' ';
		}
	}
	function ОбновитьЗначение(пЭлемент, пЗначение, лВыделить) {
		const узЭлемент = Узел(пЭлемент);
		узЭлемент.classList.toggle('статистика-выделить', лВыделить);
		узЭлемент.textContent = пЗначение;
		return узЭлемент;
	}
	function ПолучитьНазваниеПрофиляH264(nProfileIndication, nConstraintSetFlag) {
		switch (nProfileIndication) {
		  case 66:
			return (nConstraintSetFlag & 64) == 0 ? 'Baseline' : 'Constrained Baseline';

		  case 77:
			return 'Main';

		  case 88:
			return 'Extended';

		  case 100:
			switch (nConstraintSetFlag & 12) {
			  case 8:
				return 'Progressive High';

			  case 12:
				return 'Constrained High';
			}
			return 'High';

		  case 110:
			return (nConstraintSetFlag & 16) == 0 ? 'High 10' : 'High 10 Intra';

		  case 122:
			return (nConstraintSetFlag & 16) == 0 ? 'High 4:2:2' : 'High 4:2:2 Intra';

		  case 244:
			return (nConstraintSetFlag & 16) == 0 ? 'High 4:4:4 Predictive' : 'High 4:4:4 Intra';

		  case 44:
			return 'CAVLC 4:4:4 Intra';
		}
		м_Журнал.Ой(`[Статистика] Неизвестный профиль H.264 ProfileIndication=${nProfileIndication} ConstraintSetFlag=${nConstraintSetFlag}`);
		return `P${nProfileIndication}C${nConstraintSetFlag}`;
	}
	function ОбновитьСтатистику() {
		document.getElementById('статистика-длительностьпросмотра').textContent = м_i18n.ПеревестиСекундыВСтроку(performance.now() / 1e3, true);
		const {droppedVideoFrames, totalVideoFrames} = м_Проигрыватель.ПолучитьКоличествоПропущенныхКадров();
		ОбновитьЗначение('статистика-пропущено', droppedVideoFrames, droppedVideoFrames >= ВЫДЕЛИТЬ_ПРОПУЩЕННЫЕ_КАДРЫ).nextElementSibling.nextElementSibling.textContent = totalVideoFrames;
		let чЖдетЗагрузки = 0, чЗагружается = 0, кПреобразовано = 0, чПреобразовано = 0;
		for (let оСегмент of г_моОчередь) {
			switch (оСегмент.чОбработка) {
			  case ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ:
				чЖдетЗагрузки += оСегмент.чДлительность;
				break;

			  case ОБРАБОТКА_ЗАГРУЖАЕТСЯ:
			  case ОБРАБОТКА_ЗАГРУЖЕН:
				чЗагружается += оСегмент.чДлительность;
				break;

			  case ОБРАБОТКА_ПРЕОБРАЗОВАН:
				кПреобразовано++;
				чПреобразовано += оСегмент.чДлительность;
				break;

			  default:
				Проверить(false);
			}
		}
		const {чПросмотрено, чНеПросмотрено} = м_Проигрыватель.ПолучитьЗаполненностьБуфера();
		let уз = ОбновитьЗначение('статистика-очередь', чЖдетЗагрузки.toFixed(1), чЖдетЗагрузки > м_Настройки.Получить('чМаксРазмерБуфера'));
		уз = уз.nextElementSibling.nextElementSibling;
		уз.textContent = чЗагружается.toFixed(1);
		уз = уз.nextElementSibling;
		ОбновитьЗначение(уз, чПреобразовано.toFixed(1), кПреобразовано >= ВЫДЕЛИТЬ_ПРЕОБРАЗОВАНО);
		уз = уз.nextElementSibling;
		ОбновитьЗначение(уз, чНеПросмотрено.toFixed(1), ВыделитьНеПросмотрено(чНеПросмотрено));
		уз = уз.nextElementSibling.nextElementSibling;
		уз.textContent = чПросмотрено.toFixed(1);
	}
	function ОкноОткрыто() {
		return _чТаймер !== 0;
	}
	function ОткрытьОкно() {
		if (ОкноОткрыто()) {
			return;
		}
		_оИнтервалОбновления = new Анализ('статистика-интервалобновления', РАЗМЕР_ИСТОРИИ_СПИСКА, 1);
		_оСегментовДобавлено = new Анализ('статистика-сегментовдобавлено', РАЗМЕР_ИСТОРИИ_СПИСКА, 0);
		_оСекундДобавлено = new Анализ('статистика-секунддобавлено', РАЗМЕР_ИСТОРИИ_СПИСКА, 1);
		_оТолщинаСегмента = new Анализ('статистика-толщинасегмента', РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ, 1);
		_оТолщинаКанала = new Анализ('статистика-толщинаканала', РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ, 1);
		_оОжиданиеОтвета = new Анализ('статистика-ожиданиеответа', РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ, 1);
		_оНеПросмотрено = new Анализ('статистика-непросмотрено', РАЗМЕР_ИСТОРИИ_БУФЕРА, 1);
		_чВремяПоследнегоОбновления = NaN;
		Узел('статистика-количестворекламы').textContent = _кКоличествоРекламы;
		Узел('статистика-частотарекламы').textContent = получитьЧастотуРекламы();
		Узел('статистика-исходных').textContent = _кИсходныхСегментов;
		ОбновитьЗначение('статистика-забракованных', _кЗабракованныхСегментов, _кЗабракованныхСегментов !== 0);
		ОбновитьЗначение('статистика-ошибокзагрузки', _кОшибокЗагрузки, _кОшибокЗагрузки !== 0);
		ОбновитьЗначение('статистика-пропущенныхсегментов', _кПропущенныхСегментов, _кПропущенныхСегментов !== 0);
		Узел('статистика-незагруженныхсегментов').textContent = _кНезагруженныхСегментов;
		ОбновитьЗначение('статистика-потерьвидео', _кПотерьВидео, _кПотерьВидео !== 0);
		ОбновитьЗначение('статистика-потерьзвука', _кПотерьЗвука, _кПотерьЗвука !== 0);
		ОбновитьЗначение('статистика-исчерпано', _кИсчерпанийБуфера, _кИсчерпанийБуфера >= ВЫДЕЛИТЬ_ИСЧЕРПАНИЕ_БУФЕРА);
		ОбновитьЗначение('статистика-переполнено', _кПереполненийБуфера, _кПереполненийБуфера !== 0).nextElementSibling.nextElementSibling.textContent = _чПропущеноВБуфере.toFixed(1);
		_чТаймер = setInterval(ДобавитьОбработчикИсключений(ОбновитьСтатистику), 1e3 / ЧАСТОТА_ОБНОВЛЕНИЯ_СТАТИСТИКИ);
		ОбновитьСтатистику();
		м_События.ДобавитьОбработчик('тащилка-перетаскивание-статистика', ОбработатьПеретаскиваниеОкна);
		ПоказатьЭлемент('статистика', true);
		м_Настройки.Изменить('лПоказатьСтатистику', true);
	}
	function ЗакрытьОкно() {
		if (!ОкноОткрыто()) {
			return;
		}
		ПоказатьЭлемент('статистика', false);
		_оИнтервалОбновления.Освободить();
		_оИнтервалОбновления = null;
		_оСегментовДобавлено.Освободить();
		_оСегментовДобавлено = null;
		_оСекундДобавлено.Освободить();
		_оСекундДобавлено = null;
		_оТолщинаСегмента.Освободить();
		_оТолщинаСегмента = null;
		_оТолщинаКанала.Освободить();
		_оТолщинаКанала = null;
		_оОжиданиеОтвета.Освободить();
		_оОжиданиеОтвета = null;
		_оНеПросмотрено.Освободить();
		_оНеПросмотрено = null;
		for (let уз of document.querySelectorAll('[data-очистить]')) {
			уз.textContent = '';
		}
		clearInterval(_чТаймер);
		_чТаймер = 0;
		м_Настройки.Изменить('лПоказатьСтатистику', false);
	}
	function ОбработатьПеретаскиваниеОкна(оПараметры) {
		switch (оПараметры.чШаг) {
		  case 1:
			const оСтиль = getComputedStyle(оПараметры.узТащится);
			оПараметры._чНачальнаяX = Number.parseInt(оСтиль.left, 10);
			оПараметры._чНачальнаяY = Number.parseInt(оСтиль.top, 10);
			break;

		  case 2:
			оПараметры.узТащится.style.setProperty('--x', `${оПараметры._чНачальнаяX + оПараметры.чИзменениеX}px`);
			оПараметры.узТащится.style.setProperty('--y', `${оПараметры._чНачальнаяY + оПараметры.чИзменениеY}px`);
			break;

		  case 3:
			break;

		  default:
			Проверить(false);
		}
	}
	function Запустить() {
		if (м_Настройки.Получить('лПоказатьСтатистику')) {
			ОткрытьОкно();
		}
	}
	function ОчиститьИсторию() {
		if (_оИнтервалОбновления !== null) {
			_оИнтервалОбновления.Очистить();
			_оСегментовДобавлено.Очистить();
			_оСекундДобавлено.Очистить();
			_оТолщинаСегмента.Очистить();
			_оТолщинаКанала.Очистить();
			_оОжиданиеОтвета.Очистить();
			_оНеПросмотрено.Очистить();
			_чВремяПоследнегоОбновления = NaN;
		}
		ОбновитьЗначение('статистика-ошибокзагрузки', _кОшибокЗагрузки = 0, false);
		ОбновитьЗначение('статистика-пропущенныхсегментов', _кПропущенныхСегментов = 0, false);
		Узел('статистика-незагруженныхсегментов').textContent = _кНезагруженныхСегментов = 0;
		ОбновитьЗначение('статистика-исчерпано', _кИсчерпанийБуфера = 0, false);
		ОбновитьЗначение('статистика-переполнено', _кПереполненийБуфера = 0, false).nextElementSibling.nextElementSibling.textContent = (_чПропущеноВБуфере = 0).toFixed(1);
	}
	function ПолучитьTargetDuration() {
		return _nTargetDuration;
	}
	function ПолучитьДлительностьКадраВСекундах() {
		return {
			чМинимальная: Math.max(17, _чМинДлительностьВидеосемпла) / 1e3,
			чМаксимальная: Math.min(1e3 / 25, _чМаксДлительностьВидеосемпла) / 1e3
		};
	}
	function ПолучитьДанныеДляОтчета() {
		return {
			ПараметрыВидео: Узел('статистика-разрешениевидео').textContent + ' ' + Узел('статистика-сжатиевидео').textContent,
			ПараметрыЗвука: Узел('статистика-сжатиезвука').textContent,
			ЗабракованныхСегментов: _кЗабракованныхСегментов,
			ПропущенныхСегментов: _кПропущенныхСегментов,
			ОшибокЗагрузки: _кОшибокЗагрузки,
			НезагруженныхСегментов: _кНезагруженныхСегментов,
			ПотерьВидео: _кПотерьВидео,
			ПотерьЗвука: _кПотерьЗвука,
			ИсчерпанийБуфера: _кИсчерпанийБуфера,
			ИсчерпанийБуфераДосрочно: _кИсчерпанийБуфераДосрочно,
			ПереполненийБуфера: _кПереполненийБуфера,
			ПропущеноВБуфере: _чПропущеноВБуфере,
			Реклама: `${_кКоличествоРекламы} ${получитьЧастотуРекламы()}`
		};
	}
	function РазобранСписокСегментов(оСписок) {
		_nTargetDuration = оСписок.nTargetDuration;
		if (ОкноОткрыто()) {
			if (оСписок.моСегменты.length !== 0) {
				Узел('статистика-сервер').textContent = new URL(оСписок.моСегменты[оСписок.моСегменты.length - 1].сАдрес).host;
			}
			const чДлительностьСписка = оСписок.моСегменты.reduce((чСумма, {чДлительность}) => чСумма + чДлительность, 0);
			Узел('статистика-список').textContent = `${оСписок.моСегменты.length} × ${(чДлительностьСписка / оСписок.моСегменты.length).toFixed(1)} = ${чДлительностьСписка.toFixed(1)} − ${оСписок.кРекламныхСегментов}`;
			Узел('статистика-targetduration').textContent = оСписок.nTargetDuration;
		}
	}
	function ДобавленыСегментыВОчередь(кСегментовДобавлено, кСекундДобавлено) {
		if (ОкноОткрыто()) {
			const чВремя = performance.now();
			_оИнтервалОбновления.ДобавитьЧисло((чВремя - _чВремяПоследнегоОбновления) / 1e3);
			_чВремяПоследнегоОбновления = чВремя;
			_оСегментовДобавлено.ДобавитьЧисло(кСегментовДобавлено, ВыделитьСегментовДобавлено, ВыделитьСегментовДобавлено);
			_оСекундДобавлено.ДобавитьЧисло(кСекундДобавлено);
		}
	}
	function ПолученИсходныйСегмент() {
		++_кИсходныхСегментов;
		if (ОкноОткрыто()) {
			document.getElementById('статистика-исходных').textContent = _кИсходныхСегментов;
		}
	}
	function ЗабракованСегмент() {
		++_кЗабракованныхСегментов;
		if (ОкноОткрыто()) {
			ОбновитьЗначение('статистика-забракованных', _кЗабракованныхСегментов, true);
		}
	}
	function СкачаноНечто(кбСкачано) {
		if (Number.isFinite(кбСкачано)) {
			_кбВсегоСкачано += кбСкачано;
			if (ОкноОткрыто()) {
				document.getElementById('статистика-скачано').textContent = (_кбВсегоСкачано / 1024 / 1024).toFixed();
			}
		}
	}
	function ЗагруженСегмент(чРазмерСегмента, чДлительностьСегмента, чДлительностьЗагрузки, чОжиданиеОтвета) {
		if (ОкноОткрыто()) {
			const чСредняяТолщинаСегмента = _оТолщинаСегмента.ДобавитьЧисло(чРазмерСегмента * 8 / 1e6 / чДлительностьСегмента);
			чДлительностьЗагрузки /= 1e3;
			_оТолщинаКанала.ДобавитьЧисло(чРазмерСегмента * 8 / 1e6 / чДлительностьЗагрузки, чДлительностьЗагрузки > чДлительностьСегмента, чЧисло => чЧисло < чСредняяТолщинаСегмента);
			_оОжиданиеОтвета.ДобавитьЧисло(чОжиданиеОтвета / 1e3, ВыделитьОжиданиеОтвета, ВыделитьОжиданиеОтвета);
		}
	}
	function НеЗагруженыСегменты(кНезагруженныхСегментов) {
		Проверить(кНезагруженныхСегментов > 0);
		_кОшибокЗагрузки++;
		_кНезагруженныхСегментов += кНезагруженныхСегментов;
		if (ОкноОткрыто()) {
			ОбновитьЗначение('статистика-ошибокзагрузки', _кОшибокЗагрузки, true);
			Узел('статистика-незагруженныхсегментов').textContent = _кНезагруженныхСегментов;
		}
	}
	function пропущеныСегменты(кПропущенныхСегментов) {
		Проверить(кПропущенныхСегментов > 0);
		_кПропущенныхСегментов++;
		_кНезагруженныхСегментов += кПропущенныхСегментов;
		if (ОкноОткрыто()) {
			ОбновитьЗначение('статистика-пропущенныхсегментов', _кПропущенныхСегментов, true);
			Узел('статистика-незагруженныхсегментов').textContent = _кНезагруженныхСегментов;
		}
	}
	function ПолученПреобразованныйСегмент(оСегмент) {
		const лОкноОткрыто = ОкноОткрыто();
		const оДанные = оСегмент.пДанные;
		if (оДанные.hasOwnProperty('мбМедиасегмент')) {
			if (оСегмент.лРазрыв) {
				if (оДанные.лЕстьВидео) {
					let сСжатиеВидео = 'H.264' + ` ${ПолучитьНазваниеПрофиляH264(оДанные.nProfileIndication, оДанные.nConstraintSetFlag)}` + ` L${(оДанные.nLevelIndication / 10).toFixed(1)}` + ` RF${оДанные.nMaxNumberReferenceFrames}`;
					if (оДанные.чДиапазон !== -1) {
						сСжатиеВидео += оДанные.чДиапазон === 0 ? ' 16-235' : ' 0-255';
					}
					if (оДанные.лЧересстрочное) {
						сСжатиеВидео += ' чересстрочное';
					}
					if (оДанные.чЧастотаКадров !== 0) {
						сСжатиеВидео += ` ${оДанные.чЧастотаКадров < 0 ? '≈' : ''}${Math.abs(оДанные.чЧастотаКадров).toFixed(2)} ${Текст('J0140')}`;
					}
					Узел('статистика-сжатиевидео').textContent = сСжатиеВидео;
					Узел('статистика-разрешениевидео').textContent = `${оДанные.чШиринаКартинки}x${оДанные.чВысотаКартинки}`;
				} else {
					Узел('статистика-сжатиевидео').textContent = '—';
					Узел('статистика-разрешениевидео').textContent = '—';
				}
				Узел('статистика-частотакадров').textContent = '';
				if (оДанные.лЕстьЗвук) {
					Узел('статистика-сжатиезвука').textContent = [ 'AAC-Main', 'AAC-LC', 'AAC-SSR', 'AAC-LTP' ][оДанные.nAudioObjectType - 1] + ` ${оДанные.чЧастотаДискретизации} ${Текст('J0141')}` + ` ${оДанные.чКоличествоКаналов} ${Текст('J0142')}`;
				} else {
					Узел('статистика-сжатиезвука').textContent = '—';
				}
				Узел('статистика-битрейтзвука').textContent = '';
			}
			if (Number.isFinite(оДанные.чСредняяДлительностьВидеоСемпла)) {
				_чМинДлительностьВидеосемпла = оДанные.чМинДлительностьВидеоСемпла;
				_чМаксДлительностьВидеосемпла = оДанные.чМаксДлительностьВидеоСемпла;
				Проверить(_чМинДлительностьВидеосемпла <= _чМаксДлительностьВидеосемпла);
				const чОтносительноеОтклонение = оДанные.чСредняяДлительностьВидеоСемпла / оДанные.чМаксДлительностьВидеоСемпла;
				const чАбсолютноеОтклонение = оДанные.чМаксДлительностьВидеоСемпла - оДанные.чСредняяДлительностьВидеоСемпла;
				if (чОтносительноеОтклонение <= ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_ОТН && чАбсолютноеОтклонение >= ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_АБС) {
					м_Журнал.Ой(`[Статистика] Превышено отклонение длительности кадра в сегменте ${оСегмент.чНомер}` + ` СредняяДлительностьКадра=${м_Журнал.F0(оДанные.чСредняяДлительностьВидеоСемпла)}мс` + ` АбсолютноеОтклонение=${м_Журнал.F0(чАбсолютноеОтклонение)}мс` + ` ОтносительноеОтклонение=${м_Журнал.F2(чОтносительноеОтклонение)}`);
					оДанные.лПотериВидео = true;
				}
				if (лОкноОткрыто) {
					let сОтклонение = `@${(1e3 / оДанные.чСредняяДлительностьВидеоСемпла).toFixed(1)}`;
					if (оДанные.чМаксДлительностьВидеоСемпла - оДанные.чМинДлительностьВидеоСемпла > 2) {
						сОтклонение += ` −${(100 - оДанные.чСредняяДлительностьВидеоСемпла / оДанные.чМаксДлительностьВидеоСемпла * 100).toFixed()}%` + ` +${(оДанные.чСредняяДлительностьВидеоСемпла / оДанные.чМинДлительностьВидеоСемпла * 100 - 100).toFixed()}%`;
					}
					ОбновитьЗначение('статистика-частотакадров', сОтклонение, чОтносительноеОтклонение <= ВЫДЕЛИТЬ_ЧАСТОТУ_КАДРОВ);
				}
			}
			if (Number.isFinite(оДанные.чБитрейтЗвука) && лОкноОткрыто) {
				Узел('статистика-битрейтзвука').textContent = `${оДанные.чБитрейтЗвука.toFixed()} ${Текст('J0143')}`;
			}
		}
		if (ЭтоЧисло(оДанные.чПреобразованЗа) && лОкноОткрыто) {
			Узел('статистика-преобразованза').textContent = оДанные.чПреобразованЗа.toFixed();
		}
		if (оДанные.лЗабраковано) {
			ЗабракованСегмент();
		}
		if (оДанные.лПотериВидео) {
			++_кПотерьВидео;
			if (лОкноОткрыто) {
				ОбновитьЗначение('статистика-потерьвидео', _кПотерьВидео, true);
			}
		}
		if (оДанные.лПотериЗвука) {
			++_кПотерьЗвука;
			if (лОкноОткрыто) {
				ОбновитьЗначение('статистика-потерьзвука', _кПотерьЗвука, true);
			}
		}
	}
	function обновитьЗаполненностьБуфера(чНеПросмотрено) {
		if (ОкноОткрыто()) {
			_оНеПросмотрено.ДобавитьЧисло(чНеПросмотрено, ВыделитьНеПросмотрено, ВыделитьНеПросмотрено);
		}
	}
	function ИсчерпанБуферПроигрывателя(лДосрочно) {
		++_кИсчерпанийБуфера;
		if (лДосрочно) {
			++_кИсчерпанийБуфераДосрочно;
		}
		if (ОкноОткрыто()) {
			ОбновитьЗначение('статистика-исчерпано', _кИсчерпанийБуфера, _кИсчерпанийБуфера >= ВЫДЕЛИТЬ_ИСЧЕРПАНИЕ_БУФЕРА);
		}
	}
	function получитьЧастотуРекламы() {
		let сРезультат = '';
		for (let ы = 0; ы < _мчНачалоРекламы.length; ++ы) {
			if (ы !== 0) {
				сРезультат += ` <${((_мчНачалоРекламы[ы] - _мчКонецРекламы[ы - 1]) / 1e3).toFixed()}> `;
			}
			if (ы < _мчКонецРекламы.length) {
				сРезультат += ((_мчКонецРекламы[ы] - _мчНачалоРекламы[ы]) / 1e3).toFixed();
			} else {
				сРезультат += '?';
			}
		}
		return сРезультат;
	}
	м_События.ДобавитьОбработчик('список-началорекламы', () => {
		Проверить(_мчНачалоРекламы.length === _мчКонецРекламы.length);
		_кКоличествоРекламы++;
		_мчНачалоРекламы.push(performance.now());
		if (ОкноОткрыто()) {
			Узел('статистика-количестворекламы').textContent = _кКоличествоРекламы;
			Узел('статистика-частотарекламы').textContent = получитьЧастотуРекламы();
		}
	});
	м_События.ДобавитьОбработчик('список-конецрекламы', () => {
		if (_мчНачалоРекламы.length !== _мчКонецРекламы.length) {
			if (_мчКонецРекламы.length === РАЗМЕР_ИСТОРИИ_РЕКЛАМЫ) {
				_мчНачалоРекламы.shift();
				_мчКонецРекламы.shift();
			}
			_мчКонецРекламы.push(performance.now());
			if (ОкноОткрыто()) {
				Узел('статистика-частотарекламы').textContent = получитьЧастотуРекламы();
			}
		}
	});
	м_События.ДобавитьОбработчик('проигрыватель-переполненбуфер', чПропущено => {
		++_кПереполненийБуфера;
		_чПропущеноВБуфере += чПропущено;
		if (ОкноОткрыто()) {
			ОбновитьЗначение('статистика-переполнено', _кПереполненийБуфера, true).nextElementSibling.nextElementSibling.textContent = _чПропущеноВБуфере.toFixed(1);
		}
	});
	м_События.ДобавитьОбработчик('управление-изменилосьсостояние', чСостояние => {
		if (чСостояние === СОСТОЯНИЕ_ЗАПУСК) {
			ОчиститьИсторию();
		}
	});
	м_События.ДобавитьОбработчик('список-выбранварианттрансляции', ([моВарианты]) => {
		if (моВарианты) {
			ОчиститьИсторию();
		}
	});
	return {
		Запустить,
		ОкноОткрыто,
		ОткрытьОкно,
		ЗакрытьОкно,
		ОбновитьЗначение,
		ОчиститьИсторию,
		ПолучитьTargetDuration,
		ПолучитьДлительностьКадраВСекундах,
		ПолучитьДанныеДляОтчета,
		РазобранСписокСегментов,
		ДобавленыСегментыВОчередь,
		ПолученИсходныйСегмент,
		ЗабракованСегмент,
		СкачаноНечто,
		ЗагруженСегмент,
		НеЗагруженыСегменты,
		пропущеныСегменты,
		ПолученПреобразованныйСегмент,
		обновитьЗаполненностьБуфера,
		ИсчерпанБуферПроигрывателя
	};
})();

const м_Окно = (() => {
	function получитьОткрытое() {
		return document.body.getAttribute('data-окно-открыто') || '';
	}
	function открытьОкно(сИдОкна) {
		const элОкно = Узел(сИдОкна);
		Проверить(элОкно.classList.contains('окно'));
		элОкно.classList.add('окнооткрыто', 'анимацияокна');
		document.body.setAttribute('data-окно-открыто', сИдОкна);
		м_События.ПослатьСобытие(`окно-открыто-${сИдОкна}`);
	}
	function закрытьОкно(сИдОкна, лСАнимацией = true) {
		const элОкно = Узел(сИдОкна);
		Проверить(элОкно.classList.contains('окно'));
		элОкно.classList.remove('окнооткрыто');
		элОкно.classList.toggle('анимацияокна', лСАнимацией);
		document.body.removeAttribute('data-окно-открыто');
	}
	function открыть(сИдОкна) {
		Проверить(ЭтоНепустаяСтрока(сИдОкна));
		const сИдОткрытогоОкна = получитьОткрытое();
		if (сИдОкна === сИдОткрытогоОкна) {
			return false;
		}
		if (сИдОткрытогоОкна) {
			закрытьОкно(сИдОткрытогоОкна);
		}
		открытьОкно(сИдОкна);
		return true;
	}
	function закрыть(лСАнимацией = true) {
		const сИдОткрытогоОкна = получитьОткрытое();
		if (сИдОткрытогоОкна) {
			закрытьОкно(сИдОткрытогоОкна, лСАнимацией);
		}
	}
	function переключить(сИдОкна) {
		открыть(сИдОкна) || закрытьОкно(сИдОкна);
	}
	function настроитьИндикаторПрокрутки(пПрокрутка) {
		const элПрокрутка = Узел(пПрокрутка);
		элПрокрутка.scrollTop = 0;
		обновитьИндикаторПрокрутки(элПрокрутка);
	}
	function обновитьИндикаторПрокрутки(элПрокрутка) {
		const лПоказать = !этотЭлементПолностьюПрокручен(элПрокрутка);
		ПоказатьЭлемент(Узел(`индикаторпрокрутки-${элПрокрутка.id}`), лПоказать);
		элПрокрутка[лПоказать ? 'addEventListener' : 'removeEventListener']('scroll', обработатьПрокрутку);
	}
	const обработатьПрокрутку = ДобавитьОбработчикИсключений(оСобытие => {
		обновитьИндикаторПрокрутки(оСобытие.target);
	});
	м_События.ДобавитьОбработчик('управление-левыйщелчок', ({target: элЩелчок}) => {
		const сИдОкна = элЩелчок.getAttribute('data-окно-переключить');
		if (сИдОкна) {
			переключить(сИдОкна);
			return;
		}
		const сИдОткрытогоОкна = получитьОткрытое();
		if (сИдОткрытогоОкна && !Узел(сИдОткрытогоОкна).contains(элЩелчок) && Узел('проигрыватель').contains(элЩелчок)) {
			закрытьОкно(сИдОткрытогоОкна);
		}
	});
	return {
		открыть,
		закрыть,
		переключить,
		настроитьИндикаторПрокрутки
	};
})();

const м_Меню = (() => {
	function задатьДоступностьПункта(пПункт, лДоступен) {
		Узел(пПункт).tabIndex = лДоступен ? 0 : -1;
	}
	Узел('глаз').addEventListener('contextmenu', оСобытие => {
		оСобытие.preventDefault();
		м_Окно.переключить('главноеменю');
	});
	м_События.ДобавитьОбработчик('управление-левыйщелчок', оСобытие => {
		if (оСобытие.target.classList.contains('меню-пункт')) {
			м_Окно.закрыть(false);
		}
	});
	return {
		задатьДоступностьПункта
	};
})();

const м_ПолноэкранныйРежим = (() => {
	let _sRequestFullscreen = 'requestFullscreen';
	let _sExitFullscreen = 'exitFullscreen';
	let _sFullscreenElement = 'fullscreenElement';
	let _sFullscreenchange = 'fullscreenchange';
	if (!document.exitFullscreen) {
		_sRequestFullscreen = 'webkitRequestFullscreen';
		_sExitFullscreen = 'webkitExitFullscreen';
		_sFullscreenElement = 'webkitFullscreenElement';
		_sFullscreenchange = 'webkitfullscreenchange';
	}
	const ОбработатьИзменениеРежима = ДобавитьОбработчикИсключений(() => {
		м_События.ПослатьСобытие('полноэкранныйрежим-изменен', Обновить());
	});
	const ОбработатьДвойнойЩелчок = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.button === ЛЕВАЯ_КНОПКА) {
			оСобытие.preventDefault();
			Переключить();
		}
	});
	function ПолучитьЭлемент() {
		return Узел('проигрывательичат');
	}
	function Включен() {
		return !!document[_sFullscreenElement];
	}
	function Обновить() {
		const лВключен = Включен();
		м_Журнал.Окак(`[ПолноэкранныйРежим] Режим включен: ${лВключен}`);
		ИзменитьКнопку('переключитьполноэкранный', лВключен);
		return лВключен;
	}
	function Включить() {
		if (Включен()) {
			return false;
		}
		м_Журнал.Вот('[ПолноэкранныйРежим] Включаю режим');
		м_Автоскрытие.Скрыть(false);
		м_КартинкаВКартинке.отключить();
		ПолучитьЭлемент()[_sRequestFullscreen]();
		return true;
	}
	function Отключить() {
		if (!Включен()) {
			return false;
		}
		м_Журнал.Вот('[ПолноэкранныйРежим] Отключаю режим');
		м_Автоскрытие.Скрыть(false);
		document[_sExitFullscreen]();
		return true;
	}
	function Переключить() {
		Включить() || Отключить();
	}
	document.addEventListener(_sFullscreenchange, ОбработатьИзменениеРежима);
	Узел('глаз').addEventListener('dblclick', ОбработатьДвойнойЩелчок);
	Обновить();
	return {
		Включен,
		Отключить,
		Переключить,
		ПолучитьЭлемент
	};
})();

const м_КартинкаВКартинке = (() => {
	let _oMediaElement = null;
	const обработатьИзменениеРежима = ДобавитьОбработчикИсключений(() => {
		обновить();
	});
	function включен() {
		return Boolean(document.pictureInPictureElement);
	}
	function обновить() {
		const лВключен = включен();
		м_Журнал.Окак(`[КартинкаВКартинке] Режим включен: ${лВключен}`);
		ИзменитьКнопку('переключитькартинкавкартинке', лВключен);
	}
	function включить() {
		if (включен()) {
			return false;
		}
		м_Журнал.Вот('[КартинкаВКартинке] Включаю режим');
		м_ПолноэкранныйРежим.Отключить();
		_oMediaElement.requestPictureInPicture();
		return true;
	}
	function отключить() {
		if (!включен()) {
			return false;
		}
		м_Журнал.Вот('[КартинкаВКартинке] Отключаю режим');
		document.exitPictureInPicture();
		return true;
	}
	function переключить() {
		_oMediaElement && !document.body.classList.contains('нетвидео') && (включить() || отключить());
	}
	function запустить(oMediaElement) {
		if (!document.pictureInPictureEnabled || oMediaElement.disablePictureInPicture) {
			м_Журнал.Ой(`[КартинкаВКартинке] pictureInPictureEnabled=${document.pictureInPictureEnabled} disablePictureInPicture=${oMediaElement.disablePictureInPicture}`);
			return;
		}
		_oMediaElement = oMediaElement;
		oMediaElement.addEventListener('enterpictureinpicture', обработатьИзменениеРежима);
		oMediaElement.addEventListener('leavepictureinpicture', обработатьИзменениеРежима);
		обновить();
		ПоказатьЭлемент('переключитькартинкавкартинке', true);
	}
	return {
		запустить,
		отключить,
		переключить
	};
})();

const м_Тащилка = (() => {
	const МИН_ИНТЕРВАЛ_ПЕРЕТАСКИВАНИЯ = 45;
	let _чИдУказателя = NaN;
	let _оПараметры = null;
	let _чВремяПоследнегоПеретаскивания;
	let _чНачальнаяX, _чНачальнаяY;
	let _чПоследняяX, _чПоследняяY;
	function Параметры(узНажат, узТащится) {
		this.узНажат = узНажат;
		this.узТащится = узТащится;
		this.чШаг = 1;
		this.лОтмена = false;
		this.лИзмениласьX = false;
		this.лИзмениласьY = false;
		this.чИзменениеX = 0;
		this.чИзменениеY = 0;
	}
	const ОбработатьPointerDown = создатьОбработчикСобытийЭлемента(оСобытие => {
		if (!Number.isNaN(_чИдУказателя) || оСобытие.button !== ЛЕВАЯ_КНОПКА) {
			return;
		}
		const узНажат = оСобытие.target.closest('[data-тащилка]');
		if (узНажат === null) {
			return;
		}
		_чИдУказателя = оСобытие.pointerId;
		_оПараметры = new Параметры(узНажат, Узел(узНажат.getAttribute('data-тащилка')));
		_чВремяПоследнегоПеретаскивания = 0;
		_чНачальнаяX = _чПоследняяX = оСобытие.clientX;
		_чНачальнаяY = _чПоследняяY = оСобытие.clientY;
		м_Журнал.Окак(`[Тащилка] Начинаю перетаскивать ${_оПараметры.узТащится.id} X=${_чНачальнаяX} Y=${_чНачальнаяY} id=${_чИдУказателя} type=${оСобытие.pointerType} primary=${оСобытие.isPrimary}`);
		document.addEventListener('pointermove', ОбработатьPointerMove, ПАССИВНЫЙ_ОБРАБОТЧИК);
		document.addEventListener('pointerup', ОбработатьPointerUpИPointerCancel, ПАССИВНЫЙ_ОБРАБОТЧИК);
		document.addEventListener('pointercancel', ОбработатьPointerUpИPointerCancel);
		м_События.ДобавитьОбработчик('фокусник-изменилосьсостояние', ОбработатьПокиданиеВкладки);
		м_ПолноэкранныйРежим.ПолучитьЭлемент().style.setProperty('cursor', getComputedStyle(узНажат).cursor, 'important');
		м_ПолноэкранныйРежим.ПолучитьЭлемент().classList.add('тащилка-перехват');
		_оПараметры.узТащится.classList.add('тащилка');
		м_События.ПослатьСобытие(`тащилка-перетаскивание-${_оПараметры.узТащится.id}`, _оПараметры);
	});
	const ОбработатьPointerMove = ДобавитьОбработчикИсключений(оСобытие => {
		if (_чИдУказателя === оСобытие.pointerId) {
			if ((оСобытие.buttons & НАЖАТА_ЛЕВАЯ_КНОПКА) == 0) {
				ЗавершитьПеретаскивание('кнопка отпущена');
			} else {
				const чВремя = performance.now();
				if (чВремя - _чВремяПоследнегоПеретаскивания >= МИН_ИНТЕРВАЛ_ПЕРЕТАСКИВАНИЯ) {
					_чВремяПоследнегоПеретаскивания = чВремя;
					_оПараметры.лИзмениласьX = _чПоследняяX !== оСобытие.clientX;
					_оПараметры.лИзмениласьY = _чПоследняяY !== оСобытие.clientY;
					if (_оПараметры.лИзмениласьX || _оПараметры.лИзмениласьY) {
						_чПоследняяX = оСобытие.clientX;
						_чПоследняяY = оСобытие.clientY;
						_оПараметры.чШаг = 2;
						_оПараметры.чИзменениеX = _чПоследняяX - _чНачальнаяX;
						_оПараметры.чИзменениеY = _чПоследняяY - _чНачальнаяY;
						м_События.ПослатьСобытие(`тащилка-перетаскивание-${_оПараметры.узТащится.id}`, _оПараметры);
					}
				}
			}
		}
	});
	const ОбработатьPointerUpИPointerCancel = ДобавитьОбработчикИсключений(оСобытие => {
		if (_чИдУказателя === оСобытие.pointerId) {
			ЗавершитьПеретаскивание(оСобытие.type);
		}
	});
	function ОбработатьПокиданиеВкладки({лАктивен}) {
		if (!лАктивен) {
			ЗавершитьПеретаскивание('вкладка неактивна');
		}
	}
	function ОтменитьПеретаскивание(сИдУзла) {
		Проверить(сИдУзла === void 0 || ЭтоНепустаяСтрока(сИдУзла));
		if (!Number.isNaN(_чИдУказателя) && (сИдУзла === void 0 || сИдУзла === _оПараметры.узТащится.id)) {
			_оПараметры.лОтмена = true;
			ЗавершитьПеретаскивание('операция отменена');
		}
	}
	function ЗавершитьПеретаскивание(сПричина) {
		if (_оПараметры.чШаг !== 3) {
			м_Журнал.Окак(`[Тащилка] Заканчиваю перетаскивание: ${сПричина} X=${_чПоследняяX} Y=${_чПоследняяY}`);
			_оПараметры.чШаг = 3;
			м_События.ПослатьСобытие(`тащилка-перетаскивание-${_оПараметры.узТащится.id}`, _оПараметры);
			м_ПолноэкранныйРежим.ПолучитьЭлемент().style.removeProperty('cursor');
			м_ПолноэкранныйРежим.ПолучитьЭлемент().classList.remove('тащилка-перехват');
			_оПараметры.узТащится.classList.remove('тащилка');
			document.removeEventListener('pointermove', ОбработатьPointerMove, ПАССИВНЫЙ_ОБРАБОТЧИК);
			document.removeEventListener('pointerup', ОбработатьPointerUpИPointerCancel, ПАССИВНЫЙ_ОБРАБОТЧИК);
			document.removeEventListener('pointercancel', ОбработатьPointerUpИPointerCancel);
			м_События.УдалитьОбработчик('фокусник-изменилосьсостояние', ОбработатьПокиданиеВкладки);
			_чИдУказателя = NaN;
			_оПараметры = null;
		}
	}
	document.addEventListener('pointerdown', ОбработатьPointerDown, ПАССИВНЫЙ_ОБРАБОТЧИК);
	return {
		ОтменитьПеретаскивание
	};
})();

const м_Автоскрытие = (() => {
	const МИН_ИНТЕРВАЛ_ДВИЖЕНИЯ = 150;
	const ПОРОГ_ДВИЖЕНИЯ = 3;
	const _узАвтоскрытие = document.getElementById('проигрыватель');
	let _чТаймер = 0;
	let _чСкрытьПосле = 0;
	let _чНеПоказыватьДо = 0;
	let _чЭкранX = 0, _чЭкранY = 0;
	let _чКлиентX = 0, _чКлиентY = 0;
	let _чИдТаймераВыбораСкорости = 0;
	function Показать() {
		if (_чТаймер === 0) {
			document.body.classList.remove('автоскрытие');
			document.body.classList.add('анимацияпанели');
			_чТаймер = setTimeout(обработатьТаймер, м_Настройки.Получить('чИнтервалАвтоскрытия') * 1e3);
			_чСкрытьПосле = _чНеПоказыватьДо = 0;
		} else {
			_чСкрытьПосле = performance.now() + м_Настройки.Получить('чИнтервалАвтоскрытия') * 1e3;
		}
	}
	function Скрыть(лСАнимацией = true) {
		if (_чТаймер !== 0) {
			clearTimeout(_чТаймер);
			_чТаймер = 0;
			document.body.classList.add('автоскрытие');
		}
		document.body.classList.toggle('анимацияпанели', лСАнимацией);
		if (!лСАнимацией) {
			document.body.clientTop;
			document.body.classList.add('анимацияпанели');
			_чНеПоказыватьДо = performance.now() + 500;
		}
	}
	const обработатьТаймер = ДобавитьОбработчикИсключений(() => {
		Проверить(_чТаймер !== 0);
		const чСкрытьЧерез = _чСкрытьПосле - performance.now();
		if (чСкрытьЧерез > 50) {
			_чТаймер = setTimeout(обработатьТаймер, чСкрытьЧерез);
			_чСкрытьПосле = 0;
		} else {
			Скрыть();
		}
	});
	const обработатьДвижениеУказателя = ДобавитьОбработчикИсключений(({screenX, screenY, clientX, clientY}) => {
		_узАвтоскрытие.removeEventListener('pointermove', обработатьДвижениеУказателя, ПАССИВНЫЙ_ОБРАБОТЧИК);
		setTimeout(перехватитьДвижениеУказателя, МИН_ИНТЕРВАЛ_ДВИЖЕНИЯ);
		if ((_чЭкранX !== screenX || _чЭкранY !== screenY) && (_чКлиентX !== clientX || _чКлиентY !== clientY) && (Math.abs(_чКлиентX - clientX) >= ПОРОГ_ДВИЖЕНИЯ || Math.abs(_чКлиентY - clientY) >= ПОРОГ_ДВИЖЕНИЯ) && performance.now() >= _чНеПоказыватьДо) {
			Показать();
		}
		_чЭкранX = screenX;
		_чЭкранY = screenY;
		_чКлиентX = clientX;
		_чКлиентY = clientY;
	});
	const перехватитьДвижениеУказателя = ДобавитьОбработчикИсключений(() => {
		_узАвтоскрытие.addEventListener('pointermove', обработатьДвижениеУказателя, ПАССИВНЫЙ_ОБРАБОТЧИК);
	});
	const обработатьЩелчок = ДобавитьОбработчикИсключений(() => {
		Показать();
	});
	const обработатьПокиданиеУказателя = ДобавитьОбработчикИсключений(() => {
		Скрыть();
	});
	const обработатьВыборСкорости = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.button === ЛЕВАЯ_КНОПКА) {
			if (_чИдТаймераВыбораСкорости !== 0) {
				clearTimeout(_чИдТаймераВыбораСкорости);
			}
			_чИдТаймераВыбораСкорости = setTimeout(() => document.body.classList.remove('выборскорости'), 5e3);
			document.body.classList.add('выборскорости');
		}
	});
	function Запустить() {
		перехватитьДвижениеУказателя();
		_узАвтоскрытие.addEventListener('click', обработатьЩелчок);
		_узАвтоскрытие.addEventListener('mouseleave', обработатьПокиданиеУказателя);
		Узел('скорость').addEventListener('pointerdown', обработатьВыборСкорости);
	}
	return {
		Запустить,
		Показать,
		Скрыть
	};
})();

const м_Медиазапрос = (() => {
	let _чТаймер = -2;
	const обновить = ДобавитьОбработчикИсключений(() => {
		Проверить(_чТаймер !== 0);
		_чТаймер = 0;
		const элПроигрыватель = Узел('проигрыватель');
		const чВысотаПроигрывателя = элПроигрыватель.clientHeight * 100 / м_Настройки.Получить('чРазмерИнтерфейса');
		Проверить(чВысотаПроигрывателя > 0);
		элПроигрыватель.classList.toggle('ужатьглавноеменю', чВысотаПроигрывателя <= 460);
		элПроигрыватель.classList.toggle('ужатьнастройки', чВысотаПроигрывателя <= 412);
		const РАЗМЕР_ШРИФТА_МИН = 100;
		const РАЗМЕР_ШРИФТА_МАКС = 124;
		const РАЗМЕР_ШРИФТА_ШАГ = 8;
		const оСтильПанели = Узел('верхняяпанель').style;
		const элЗаполнитель = Узел('заполнитель');
		for (let чРазмерШрифта = РАЗМЕР_ШРИФТА_МАКС; ;чРазмерШрифта -= РАЗМЕР_ШРИФТА_ШАГ) {
			оСтильПанели.fontSize = `${чРазмерШрифта}%`;
			if (чРазмерШрифта === РАЗМЕР_ШРИФТА_МИН || элЗаполнитель.clientWidth > 0) {
				break;
			}
		}
	});
	function обновитьБыстро() {
		if (_чТаймер !== -1) {
			if (_чТаймер > 0) {
				clearTimeout(_чТаймер);
			}
			_чТаймер = -1;
			requestAnimationFrame(обновить);
		}
	}
	function обновитьМедленно() {
		if (_чТаймер === -2 || _чТаймер === 0) {
			_чТаймер = setTimeout(обновить, 200);
			Проверить(_чТаймер > 0);
		}
	}
	window.addEventListener('resize', ДобавитьОбработчикИсключений(() => {
		if (_чТаймер !== -2) {
			обновитьМедленно();
		}
	}));
	return {
		обновитьБыстро,
		обновитьМедленно
	};
})();

const м_Оформление = (() => {
	const СЕЛЕКТОР_КНОПКИ_ЦВЕТА = 'input[type="color"]';
	let _оПрозрачность = null;
	const ОбработатьВводЦвета = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.matches(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			ОбновитьСтили();
		}
	});
	const ОбработатьИзменениеЦвета = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.matches(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			м_Настройки.Изменить(оСобытие.target.id, оСобытие.target.value);
		}
	});
	function ОбработатьИзменениеПредустановкиОформления() {
		ОбновитьОкноНастроек();
		ОбновитьСтили();
	}
	function ОбновитьОкноНастроек() {
		for (let узКнопка of document.querySelectorAll(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			узКнопка.value = м_Настройки.Получить(узКнопка.id);
		}
		_оПрозрачность.Обновить();
	}
	function ОбновитьСтили() {
		const оСтиль = document.documentElement.style;
		for (let узКнопка of document.querySelectorAll(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			оСтиль.setProperty(`--${узКнопка.id}`, Number.parseInt(узКнопка.value.slice(1, 3), 16) + ',' + Number.parseInt(узКнопка.value.slice(3, 5), 16) + ',' + Number.parseInt(узКнопка.value.slice(5, 7), 16));
		}
		const чНепрозрачность = Округлить(1 - м_Настройки.Получить('чПрозрачность') / 100, 2);
		оСтиль.setProperty('--чНепрозрачность', чНепрозрачность);
		оСтиль.setProperty('--чНепрозрачностьОкна', Ограничить(чНепрозрачность, .85, 1));
	}
	function ПрименитьРазмерИнтерфейса() {
		document.documentElement.style.fontSize = `${16 * м_Настройки.Получить('чРазмерИнтерфейса') / 100}px`;
		м_Медиазапрос.обновитьМедленно();
	}
	function Запустить() {
		м_i18n.TranslateDocument(document);
		_оПрозрачность = new ВводЧисла('чПрозрачность', 5, 0, 'прозрачность');
		_оПрозрачность.ПослеИзменения = ОбновитьСтили;
		document.addEventListener('input', ОбработатьВводЦвета);
		document.addEventListener('change', ОбработатьИзменениеЦвета);
		м_События.ДобавитьОбработчик('настройки-измениласьпредустановка-оформление', ОбработатьИзменениеПредустановкиОформления);
		ОбработатьИзменениеПредустановкиОформления();
		new ВводЧисла('чРазмерИнтерфейса', 1, 0, 'размеринтерфейса').ПослеИзменения = ПрименитьРазмерИнтерфейса;
		ПрименитьРазмерИнтерфейса();
		ПоказатьЭлемент(document.body, true);
	}
	return {
		Запустить
	};
})();

const м_Уведомление = (() => {
	const ПОКАЗЫВАТЬ_УВЕДОМЛЕНИЕ = 2e3;
	let _чТаймер = 0;
	function Показать(сИдЗначка, лЖопа) {
		Проверить(document.getElementById(сИдЗначка) && typeof лЖопа == 'boolean');
		const узУведомление = Узел('уведомление');
		узУведомление.classList.toggle('жопа', лЖопа);
		ПоказатьЭлемент(узУведомление, true);
		узУведомление.firstElementChild.setAttributeNS('http://www.w3.org/1999/xlink', 'href', `#${сИдЗначка}`);
		if (_чТаймер !== 0) {
			clearTimeout(_чТаймер);
		}
		_чТаймер = setTimeout(СкрытьУведомление, ПОКАЗЫВАТЬ_УВЕДОМЛЕНИЕ);
	}
	function ПоказатьСчастье() {
		Показать('svg-success', false);
	}
	function ПоказатьЖопу() {
		Показать('svg-fail', true);
	}
	const СкрытьУведомление = ДобавитьОбработчикИсключений(() => {
		ПоказатьЭлемент('уведомление', false);
		_чТаймер = 0;
	});
	return {
		Показать,
		ПоказатьСчастье,
		ПоказатьЖопу
	};
})();

const м_Шкала = (() => {
	let _чНачало = 0;
	let _чКонец = 0;
	let _чПросмотрено;
	function ОграничитьВремя(чВремя) {
		return Ограничить(чВремя, _чНачало, _чКонец);
	}
	function Обновить() {
		Проверить(Number.isFinite(_чНачало) && Number.isFinite(_чКонец) && Number.isFinite(_чПросмотрено));
		Узел('шкала-просмотрено').style.transform = `scaleX(${((_чПросмотрено - _чНачало) / (_чКонец - _чНачало)).toFixed(4)})`;
	}
	const ОбработатьЩелчок = ДобавитьОбработчикИсключений(оСобытие => {
		if (м_Управление.ПолучитьСостояние() !== СОСТОЯНИЕ_ПОВТОР) {
			return;
		}
		const оБордюр = оСобытие.currentTarget.getBoundingClientRect();
		const оСтиль = getComputedStyle(оСобытие.currentTarget);
		const чНачалоШкалы = Math.round(оБордюр.left + Number.parseFloat(оСтиль.paddingLeft));
		const чКонецШкалы = Math.round(оБордюр.right - Number.parseFloat(оСтиль.paddingRight));
		const чУказатель = оСобытие.clientX + 1;
		const чПеремотатьДо = ОграничитьВремя((чУказатель - чНачалоШкалы) / (чКонецШкалы - чНачалоШкалы) * (_чКонец - _чНачало) + _чНачало);
		м_Журнал.Окак(`[Шкала] Перематываю до ${чПеремотатьДо}`);
		м_Проигрыватель.ПеремотатьПовторДо(чПеремотатьДо);
	});
	function ЗадатьНачалоИКонец(чНачало, чКонец) {
		Проверить(чНачало <= чКонец);
		_чНачало = чНачало;
		_чКонец = чКонец;
		document.getElementById('шкала').addEventListener('click', ОбработатьЩелчок);
	}
	function ЗадатьПросмотрено(чПросмотрено) {
		_чПросмотрено = ОграничитьВремя(чПросмотрено);
		Обновить();
	}
	function ПолучитьНачало() {
		return _чНачало;
	}
	function ПолучитьКонец() {
		return _чКонец;
	}
	return {
		ЗадатьНачалоИКонец,
		ЗадатьПросмотрено,
		ПолучитьНачало,
		ПолучитьКонец
	};
})();

const м_Новости = (() => {
	const ПОКАЗАТЬ_ОДИН_РАЗ = '2000.1.1';
	const ПОКАЗЫВАТЬ_ВСЕГДА = '2000.2.2';
	const ПОЛНАЯ_СПРАВКА = '2000.3.3';
	const ДЛЯ_ПЛАНШЕТА = '2000.4.4';
	const _мНовости = [ [ '2025.5.28', 'J1010', 'F1078' ], [ '2024.6.14', 'J1010', 'F1077' ], [ '2024.6.5', 'J1010', 'F1076' ], [ '2024.6.5', 'J1010', 'F1074' ], [ '2024.5.31', 'F1072', 'F1073' ], [ '2022.1.20', 'J1513', 'F1515' ], [ '2021.12.17', 'J1066', 'F1070', 'F1514' ], [ '2021.12.17', 'J1010', 'F1069' ], [ '2021.3.7', 'J1010', 'F1068' ], [ '2020.10.30', 'J1066', 'F1067' ], [ '2020.10.5', 'J1010', 'F1065' ], [ '2019.10.9', 'J1010', 'F1064' ], [ '2019.3.17', 'J1010', 'F1063' ], [ '2018.10.28', 'J1010', 'F1062' ], [ '2018.8.17', 'J1010', 'F1060' ], [ '2018.7.30', 'J1010', 'F1059' ], [ '2018.6.27', 'J1010', 'F1058' ], [ '2018.6.12', 'J1010', 'F1057' ], [ '2018.5.18', 'J1010', 'F1049' ], [ '2018.4.24', 'J1036', 'F1048' ], [ '2018.4.6', 'J1010', 'F1047' ], [ '2018.3.17', 'J1010', 'F1046' ], [ '2018.3.4', 'J1041', 'F1042' ], [ '2018.2.17', 'J1010', 'F1044' ], [ '2018.1.7', 'J1010', 'F1043' ], [ '2017.11.6', 'J1010', 'F1037', 'F1038' ], [ '2017.10.22', 'J1010', 'F1023' ], [ '2017.10.14', 'J1010', 'F1020' ], [ '2017.9.11', 'J1010', 'F1018' ], [ '2017.8.8', 'J1035', 'F1017' ], [ '2017.6.23', 'J1010', 'F1014' ], [ '2017.5.29', 'J1010', 'F1013' ], [ '2017.3.31', 'J1031', 'F1012' ], [ '2017.2.26', 'J1030', 'F1011' ], [ ПОЛНАЯ_СПРАВКА, 'J1500', 'F1501', 'F1503', 'F1502', 'F1575', 'F1509', 'F1573', 'F1574', 'F1504', 'F1514', 'F1507' ], [ ПОЛНАЯ_СПРАВКА, 'J1513', 'F1570', 'F1571', 'F1572', 'F1515', 'F1511', 'F1506', 'F1510' ], [ ПОКАЗАТЬ_ОДИН_РАЗ, 'J1054', 'F1501' ], [ ДЛЯ_ПЛАНШЕТА, 'J1055', 'F1056' ], [ ПОКАЗЫВАТЬ_ВСЕГДА, 'J1003', 'F1000' ] ];
	function ПеревестиВерсиюВМиллисекунды(сВерсия) {
		const мчЧасти = /^(\d+)\.(\d+)\.(\d+)(?:\.(\d+))?$/.exec(сВерсия);
		мчЧасти[1] |= 0;
		мчЧасти[2] |= 0;
		мчЧасти[3] |= 0;
		мчЧасти[4] |= 0;
		return Date.UTC(мчЧасти[1], мчЧасти[2] - 1, мчЧасти[3], 0, 0, 0, мчЧасти[4]);
	}
	function ЕстьНовостиСВерсиейСтарше(сВерсия) {
		const чВерсия = ПеревестиВерсиюВМиллисекунды(сВерсия);
		return _мНовости.some(мНовость => ПеревестиВерсиюВМиллисекунды(мНовость[0]) > чВерсия);
	}
	function ДобавитьНовости(чДобавитьВерсииСтарше, сДобавитьВерсиюСправки) {
		Проверить(typeof чДобавитьВерсииСтарше == 'number' && чДобавитьВерсииСтарше >= 0);
		Проверить(сДобавитьВерсиюСправки === '' || сДобавитьВерсиюСправки.startsWith('2000'));
		Проверить(Number.isFinite(чДобавитьВерсииСтарше) || сДобавитьВерсиюСправки !== '');
		const элДобавитьВ = Узел('текстновостей');
		элДобавитьВ.textContent = '';
		for (let мНовость of _мНовости) {
			const сВерсия = мНовость[0];
			if (сВерсия.startsWith('2000')) {
				if (сВерсия === сДобавитьВерсиюСправки || сВерсия === ДЛЯ_ПЛАНШЕТА && этоМобильноеУстройство() || сВерсия === ПОКАЗЫВАТЬ_ВСЕГДА) {
					ДобавитьНовость(элДобавитьВ, мНовость, 0);
				}
			} else {
				const чВерсия = ПеревестиВерсиюВМиллисекунды(сВерсия);
				if (чВерсия > чДобавитьВерсииСтарше) {
					ДобавитьНовость(элДобавитьВ, мНовость, чВерсия);
				}
			}
		}
		м_Окно.настроитьИндикаторПрокрутки(элДобавитьВ);
	}
	function ДобавитьНовость(элДобавитьВ, мНовость, чДатаНовости) {
		if (элДобавитьВ.firstElementChild) {
			элДобавитьВ.appendChild(document.createElement('hr'));
		}
		const узЗаголовок = document.createElement('h4');
		if (чДатаНовости === 0) {
			узЗаголовок.textContent = Текст(мНовость[1]);
		} else {
			узЗаголовок.textContent = `${м_i18n.ФорматироватьДату(чДатаНовости)} · ${Текст(мНовость[1])}`;
		}
		элДобавитьВ.appendChild(узЗаголовок);
		if (Текст('M0010') !== 'ru') {
			const элСсылка = узЗаголовок.appendChild(document.createElement('a'));
			элСсылка.className = 'новость-перевести';
			элСсылка.href = 'translate:';
			элСсылка.target = '_blank';
			элСсылка.title = Текст('J0148');
		}
		for (let ы = 2; ы < мНовость.length; ++ы) {
			м_i18n.InsertAdjacentHtmlMessage(элДобавитьВ, 'beforeend', мНовость[ы]);
		}
	}
	function ОткрытьОкно(лПодтвердитьПрочтение) {
		if (лПодтвердитьПрочтение) {
			м_i18n.InsertAdjacentHtmlMessage('закрытьновости', 'content', 'F0619').title = Текст('A0620');
			ПоказатьЭлемент('отложитьновости', true);
		} else {
			м_i18n.InsertAdjacentHtmlMessage('закрытьновости', 'content', 'F0663').title = '';
			ПоказатьЭлемент('отложитьновости', false);
		}
		м_События.ДобавитьОбработчик('управление-левыйщелчок', ОбработатьЛевыйЩелчок);
		м_Окно.открыть('новости');
	}
	function ОбработатьЛевыйЩелчок(оСобытие) {
		if (оСобытие.сПозывной === 'закрытьновости' && ЭлементПоказан('отложитьновости')) {
			ПоказатьЭлемент('открытьновости', false);
			м_Настройки.Изменить('сПредыдущаяВерсия', ВЕРСИЯ_РАСШИРЕНИЯ);
		} else if (оСобытие.target.href === 'translate:') {
			let сТекст = '';
			for (let элТекст = оСобытие.target.parentElement; элТекст && элТекст.nodeName !== 'HR'; элТекст = элТекст.nextElementSibling) {
				сТекст += `${элТекст.textContent}\n\n`;
			}
			оСобытие.target.href = `https://translate.google.com/?op=translate&sl=${Текст('M0010')}&text=${encodeURIComponent(сТекст)}`;
		}
	}
	function ОткрытьСправку() {
		ДобавитьНовости(Infinity, ПОЛНАЯ_СПРАВКА);
		ОткрытьОкно(false);
	}
	function ОткрытьНовости() {
		const {пТекущее: сПредыдущаяВерсия, пНачальное: сНачальнаяВерсия} = м_Настройки.ПолучитьПараметрыНастройки('сПредыдущаяВерсия');
		if (сПредыдущаяВерсия === сНачальнаяВерсия) {
			ДобавитьНовости(Infinity, ПОКАЗАТЬ_ОДИН_РАЗ);
			ОткрытьОкно(false);
			ПоказатьЭлемент('открытьновости', false);
			м_Настройки.Изменить('сПредыдущаяВерсия', ВЕРСИЯ_РАСШИРЕНИЯ);
		} else if (сПредыдущаяВерсия !== ВЕРСИЯ_РАСШИРЕНИЯ) {
			ДобавитьНовости(ПеревестиВерсиюВМиллисекунды(сПредыдущаяВерсия), '');
			ОткрытьОкно(true);
			Узел('открытьновости').classList.remove('непрочитано');
		} else {
			ДобавитьНовости(0, '');
			ОткрытьОкно(false);
		}
	}
	function проверитьОбновлениеРасширения() {
		const ИНТЕРВАЛ_ПРОВЕРКИ_ОБНОВЛЕНИЯ = 1e3 * 60 * 60 * 24 * 5;
		const ЗАНИМАЕТ_УСТАНОВКА_ОБНОВЛЕНИЯ = 1e3 * 60 * 60 * 24 * 3;
		const чСейчас = Date.now();
		let чПоследняяПроверка = м_Настройки.Получить('чПоследняяПроверкаОбновленияРасширения');
		if (Math.abs(чСейчас - Math.abs(чПоследняяПроверка)) < ИНТЕРВАЛ_ПРОВЕРКИ_ОБНОВЛЕНИЯ) {
			return;
		}
		Ждать(null, 900).then(() => {
			return м_Загрузчик.ЗагрузитьJson(null, `https://coolcmd.github.io/tw5/version.json?${чСейчас}`, 3e4, 'обновление расширения', false);
		}).then(оРезультат => {
			let лОбновлениеДоступно = false;
			try {
				const {оПоддерживаемаяВерсия: {оХромой: {сВерсияРасширения, чВерсияБраузера}}} = оРезультат;
				Проверить(ЭтоНепустаяСтрока(сВерсияРасширения) && Number.isSafeInteger(чВерсияБраузера));
				лОбновлениеДоступно = получитьВерсиюДвижкаБраузера() >= чВерсияБраузера && ПеревестиВерсиюВМиллисекунды(ВЕРСИЯ_РАСШИРЕНИЯ) < ПеревестиВерсиюВМиллисекунды(сВерсияРасширения);
			} catch (пИсключение) {
				throw String(пИсключение);
			}
			if (!лОбновлениеДоступно) {
				чПоследняяПроверка = чСейчас;
			} else if (чПоследняяПроверка >= 0) {
				чПоследняяПроверка = -(чСейчас - (ИНТЕРВАЛ_ПРОВЕРКИ_ОБНОВЛЕНИЯ - ЗАНИМАЕТ_УСТАНОВКА_ОБНОВЛЕНИЯ));
			} else {
				чПоследняяПроверка = -чСейчас;
				м_Окно.открыть('обновлениерасширения');
			}
			м_Настройки.Изменить('чПоследняяПроверкаОбновленияРасширения', чПоследняяПроверка);
			м_Настройки.СохранитьИзменения();
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Новости] Не удалось проверить обновление расширения. ${пПричина}`);
				м_Настройки.Изменить('чПоследняяПроверкаОбновленияРасширения', чПоследняяПроверка < 0 ? -чСейчас : чСейчас);
				м_Настройки.СохранитьИзменения();
			} else {
				throw пПричина;
			}
		}));
	}
	function Запустить() {
		const {пТекущее: сПредыдущаяВерсия, пНачальное: сНачальнаяВерсия} = м_Настройки.ПолучитьПараметрыНастройки('сПредыдущаяВерсия');
		if (сПредыдущаяВерсия !== ВЕРСИЯ_РАСШИРЕНИЯ) {
			м_Журнал.Окак(`[Новости] Версия расширения изменилась с ${сПредыдущаяВерсия} на ${ВЕРСИЯ_РАСШИРЕНИЯ}`);
			if (сПредыдущаяВерсия === сНачальнаяВерсия || ЕстьНовостиСВерсиейСтарше(сПредыдущаяВерсия)) {
				ПоказатьЭлемент('открытьновости', true).classList.add('непрочитано');
			} else {
				м_Настройки.Изменить('сПредыдущаяВерсия', ВЕРСИЯ_РАСШИРЕНИЯ);
			}
		}
		проверитьОбновлениеРасширения();
	}
	return {
		Запустить,
		ОткрытьНовости,
		ОткрытьСправку
	};
})();

const м_Управление = (() => {
	const ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА = 5;
	const ПЕРЕМАТЫВАТЬ_ПО_КАДРАМ_НА = 3;
	const НАЗВАНИЕ_ТРАНСЛЯЦИИ_НЕИЗВЕСТНО = '• • •';
	let _чСостояние;
	let _оНачалоВоспроизведения, _оРазмерБуфера, _оРастягиваниеБуфера, _оДлительностьПовтора;
	let _оИнтервалАвтоскрытия;
	function запуститьИзменениеГромкостиКолесом() {
		document.removeEventListener('pointerdown', обработатьНажатиеКолеса);
		document.removeEventListener('wheel', обработатьВращениеКолеса);
		if (м_Настройки.Получить('лМенятьГромкостьКолесом')) {
			document.addEventListener('pointerdown', обработатьНажатиеКолеса);
			if (м_Настройки.Получить('чШагИзмененияГромкостиКолесом') !== 0) {
				document.addEventListener('wheel', обработатьВращениеКолеса, {
					passive: false
				});
			}
		}
	}
	const обработатьНажатиеКолеса = создатьОбработчикСобытийЭлемента(оСобытие => {
		if (!(оСобытие.button !== СРЕДНЯЯ_КНОПКА || оСобытие.shiftKey || оСобытие.ctrlKey || оСобытие.altKey || оСобытие.metaKey || ЭтоСобытиеДляСсылки(оСобытие))) {
			оСобытие.preventDefault();
			СохранитьИПрименитьГромкость(!м_Настройки.Получить('лПриглушить'));
		}
	});
	const обработатьВращениеКолеса = ДобавитьОбработчикИсключений(оСобытие => {
		if (!(оСобытие.shiftKey || оСобытие.ctrlKey || оСобытие.altKey || оСобытие.metaKey || ЭлементВЭтойТочкеМожноПрокрутить(оСобытие.clientX, оСобытие.clientY))) {
			оСобытие.preventDefault();
			м_Журнал.Вот(`[Управление] Движение колеса deltaY=${оСобытие.deltaY} deltaMode=${оСобытие.deltaMode}`);
			if (оСобытие.deltaY !== 0) {
				СохранитьИПрименитьГромкость(void 0, Ограничить(м_Настройки.Получить('чГромкость2') - м_Настройки.Получить('чШагИзмененияГромкостиКолесом') * Math.sign(оСобытие.deltaY), МИНИМАЛЬНАЯ_ГРОМКОСТЬ, МАКСИМАЛЬНАЯ_ГРОМКОСТЬ));
			}
		}
	});
	function ПрименитьМасштабированиеИзображения() {
		Узел('глаз').classList.toggle('масштабировать', м_Настройки.Получить('лМасштабироватьИзображение'));
	}
	function ПрименитьАнимациюИнтерфейса() {
		document.body.classList.toggle('анимацияинтерфейса', м_Настройки.Получить('лАнимацияИнтерфейса'));
	}
	function ОстановитьПросмотрТрансляции() {
		if (_чСостояние === СОСТОЯНИЕ_ОСТАНОВКА || _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
			return false;
		}
		м_Журнал.Окак('[Управление] Останавливаю просмотр трансляции');
		м_Список.Остановить();
		м_Преобразователь.Остановить();
		г_моОчередь.Очистить();
		г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ПРЕОБРАЗОВАН, СОСТОЯНИЕ_ПОВТОР));
		м_Проигрыватель.ДобавитьСледующийСегмент();
		return true;
	}
	function ПереключитьПросмотрТрансляции() {
		if (!ОстановитьПросмотрТрансляции()) {
			м_Журнал.Окак('[Управление] Начинаю просмотр трансляции');
			г_моОчередь.Очистить();
			м_Проигрыватель.Перезагрузить(СОСТОЯНИЕ_ЗАПУСК);
			м_Список.Запустить();
		}
	}
	function ПереключитьОкноСтатистики() {
		if (м_Статистика.ОкноОткрыто()) {
			м_Статистика.ЗакрытьОкно();
		} else {
			м_Статистика.ОткрытьОкно();
		}
	}
	function ПереключитьПроверкуЦвета(оСобытие) {
		if (document.body.classList.toggle('проверкацвета')) {
			document.body.classList.toggle('проверкацветафон', !оСобытие.shiftKey);
			м_Новости.ОткрытьСправку();
		} else {
			document.body.classList.remove('проверкацветафон');
		}
	}
	function КопироватьТекстВБуферОбмена(сТекст) {
		Проверить(typeof сТекст == 'string');
		if (сТекст === '') {
			м_Уведомление.ПоказатьЖопу();
			return;
		}
		navigator.clipboard.writeText(сТекст).then(() => {
			м_Журнал.Вот('[Управление] Копирование в буфер обмена завершено');
			м_Уведомление.ПоказатьСчастье();
		}, пПричина => {
			м_Журнал.Ой(`[Управление] Ошибка при копировании в буфер обмена: ${пПричина}`);
			м_Уведомление.ПоказатьЖопу();
		}).catch(м_Отладка.ПойманоИсключение);
	}
	function КопироватьАдресТрансляцииВБуферОбмена() {
		if (КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение) {
			return;
		}
		КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение = true;
		м_Журнал.Окак('[Управление] Получаю адрес трансляции для копирования');
		м_Twitch.ПолучитьАбсолютныйАдресСпискаВариантов(null, true, false).then(сРезультат => {
			м_Журнал.Вот('[Управление] Копирую адрес трансляции в буфер обмена');
			return navigator.clipboard.writeText(сРезультат).then(() => {
				КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение = false;
				м_Журнал.Вот('[Управление] Копирование в буфер обмена завершено');
				м_Управление.ОстановитьПросмотрТрансляции();
				м_Уведомление.ПоказатьСчастье();
			}, пПричина => {
				throw `Ошибка при копировании в буфер обмена: ${пПричина}`;
			});
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение = false;
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Управление] Ошибка при копировании адреса трансляции в буфер обмена: ${пПричина}`);
				м_Уведомление.ПоказатьЖопу();
			} else {
				throw пПричина;
			}
		}));
	}
	const ОбработатьИзменениеГромкости = ДобавитьОбработчикИсключений(оСобытие => {
		СохранитьИПрименитьГромкость(false, оСобытие.target.valueAsNumber);
	});
	function СохранитьИПрименитьГромкость(лПриглушить, чГромкость) {
		Проверить(лПриглушить !== void 0 || чГромкость !== void 0);
		if (document.body.classList.contains('нетзвука')) {
			return;
		}
		if (лПриглушить !== void 0) {
			м_Настройки.Изменить('лПриглушить', лПриглушить);
		}
		if (чГромкость !== void 0) {
			м_Настройки.Изменить('чГромкость2', Math.round(чГромкость));
		}
		м_Проигрыватель.ПрименитьГромкость();
		ОбновитьГромкость();
		м_Автоскрытие.Показать();
	}
	function ОбновитьГромкость() {
		const чГромкость = м_Настройки.Получить('чГромкость2');
		const узГромкость = Узел('громкость');
		узГромкость.value = чГромкость;
		узГромкость.style.setProperty('--ширина', `${(чГромкость - МИНИМАЛЬНАЯ_ГРОМКОСТЬ) / (100 - МИНИМАЛЬНАЯ_ГРОМКОСТЬ) * 100}%`);
		ИзменитьКнопку('переключитьприглушить', м_Настройки.Получить('лПриглушить'));
	}
	function ОбновитьКоличествоДорожек(лЕстьВидео, лЕстьЗвук) {
		document.body.classList.toggle('нетвидео', !лЕстьВидео);
		document.body.classList.toggle('нетзвука', !лЕстьЗвук);
	}
	function ИзменитьПодпискуЗрителяНаКанал(чПодписка) {
		if (!document.getElementById('зритель-подписка').classList.contains('обновляется')) {
			м_Twitch.ИзменитьПодпискуЗрителяНаКанал(чПодписка);
		}
	}
	const ОбработатьЛевыйЩелчок = создатьОбработчикСобытийЭлемента(оСобытие => {
		if (оСобытие.button !== ЛЕВАЯ_КНОПКА) {
			return;
		}
		const узЩелчок = оСобытие.target;
		let узПозывной = узЩелчок;
		let сПозывной = узПозывной.id || узПозывной.name;
		if (!сПозывной && узЩелчок.parentNode) {
			узПозывной = узЩелчок.parentNode;
			сПозывной = узПозывной.id || узПозывной.name;
		}
		оСобытие.узПозывной = узПозывной;
		оСобытие.сПозывной = сПозывной;
		м_События.ПослатьСобытие('управление-левыйщелчок', оСобытие);
		switch (сПозывной) {
		  case 'переключитьтрансляцию':
			ПереключитьПросмотрТрансляции();
			break;

		  case 'переключитьпаузу':
			if (_чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Проигрыватель.ПереключитьПаузу();
			}
			break;

		  case 'переключитьприглушить':
			СохранитьИПрименитьГромкость(!м_Настройки.Получить('лПриглушить'));
			break;

		  case 'переключитьчат':
			м_Чат.ПереключитьСостояниеПанели();
			break;

		  case 'создатьклип':
			м_Twitch.СоздатьКлип();
			break;

		  case 'переключитькартинкавкартинке':
			м_КартинкаВКартинке.переключить();
			break;

		  case 'переключитьполноэкранный':
			м_ПолноэкранныйРежим.Переключить();
			break;

		  case 'одновременныхзагрузок':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('кОдновременныхЗагрузок', Number.parseInt(узЩелчок.value, 10));
			м_Статистика.ОчиститьИсторию();
			break;

		  case 'анимацияинтерфейса':
			м_Настройки.Изменить('лАнимацияИнтерфейса', узЩелчок.checked);
			ПрименитьАнимациюИнтерфейса();
			break;

		  case 'масштабироватьизображение':
			м_Настройки.Изменить('лМасштабироватьИзображение', узЩелчок.checked);
			ПрименитьМасштабированиеИзображения();
			break;

		  case 'автоположениечата':
			м_Настройки.Изменить('лАвтоПоложениеЧата', узЩелчок.checked);
			ОбновитьОкноНастроек();
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'горизонтальноеположениечата':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('чГоризонтальноеПоложениеЧата', Number.parseInt(узЩелчок.value, 10));
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'вертикальноеположениечата':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('чВертикальноеПоложениеЧата', Number.parseInt(узЩелчок.value, 10));
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'положениечата':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('чПоложениеПанелиЧата', Number.parseInt(узЩелчок.value, 10));
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'состояниезакрытогочата':
			Проверить(узЩелчок.checked);
			м_Чат.СохранитьИПрименитьСостояниеЗакрытойПанели(Number.parseInt(узЩелчок.value, 10));
			break;

		  case 'переключитьстатистику':
		  case 'позиция':
			ПереключитьОкноСтатистики();
			break;

		  case 'открытьновости':
		  case 'открытьновости2':
			м_Новости.ОткрытьНовости();
			break;

		  case 'открытьсправку':
			м_Новости.ОткрытьСправку();
			break;

		  case 'отправитьотзыв':
			м_Отладка.ЗавершитьРаботуИОтправитьОтзыв();
			break;

		  case 'экспортнастроек':
			м_Настройки.Экспорт();
			break;

		  case 'импортнастроек':
			const уз = document.getElementById('выборфайладляимпортанастроек');
			уз.value = '';
			уз.click();
			break;

		  case 'сброситьнастройки':
			м_Настройки.Сбросить();
			break;

		  case 'проверкацвета':
			ПереключитьПроверкуЦвета(оСобытие);
			break;

		  case 'зритель-подписаться':
			ИзменитьПодпискуЗрителяНаКанал(ПОДПИСКА_УВЕДОМЛЯТЬ);
			break;

		  case 'зритель-отписаться':
			ИзменитьПодпискуЗрителяНаКанал(ПОДПИСКА_НЕОФОРМЛЕНА);
			break;

		  case 'зритель-уведомлять':
			ИзменитьПодпискуЗрителяНаКанал(узЩелчок.checked ? ПОДПИСКА_УВЕДОМЛЯТЬ : ПОДПИСКА_НЕУВЕДОМЛЯТЬ);
			break;

		  case 'закрытьстатистику':
			м_Статистика.ЗакрытьОкно();
			break;

		  case 'копироватьадресканала':
			м_Журнал.Вот('[Управление] Копирую адрес канала в буфер обмена');
			КопироватьТекстВБуферОбмена(м_Twitch.ПолучитьАдресКанала(false));
			break;

		  case 'копироватьадрестрансляции':
			КопироватьАдресТрансляцииВБуферОбмена();
		}
	});
	const ОбработатьНажатиеИОтпусканиеКлавы = ДобавитьОбработчикИсключений(оСобытие => {
		const SHIFT_KEY = 1 << 16;
		const CTRL_KEY = 1 << 17;
		const ALT_KEY = 1 << 18;
		const META_KEY = 1 << 19;
		const лНажатие = оСобытие.type === 'keydown';
		const лНажатие1 = лНажатие && !оСобытие.repeat;
		switch (оСобытие.keyCode + оСобытие.shiftKey * SHIFT_KEY + оСобытие.ctrlKey * CTRL_KEY + оСобытие.altKey * ALT_KEY + оСобытие.metaKey * META_KEY) {
		  case 27:
			оСобытие.preventDefault();
			if (лНажатие1) {
				getSelection().removeAllRanges();
				м_Окно.закрыть(false);
				м_Автоскрытие.Скрыть(false);
			}
			break;

		  case 70:
		  case 13:
		  case 13 + ALT_KEY:
			if (лНажатие1) {
				м_ПолноэкранныйРежим.Переключить();
			}
			break;

		  case 13 + SHIFT_KEY:
			if (лНажатие1) {
				м_КартинкаВКартинке.переключить();
			}
			break;

		  case 93:
			if (!лНажатие) {
				Узел('глаз').focus();
			}
			return;

		  case 88:
			if (лНажатие1) {
				м_Окно.переключить('главноеменю');
			}
			break;

		  case 67:
			if (лНажатие1) {
				м_Чат.ПереключитьСостояниеПанели();
			}
			break;

		  case 86:
			if (лНажатие1) {
				м_Окно.переключить('настройки');
			}
			break;

		  case 73:
			if (лНажатие1) {
				м_Окно.переключить('канал');
			}
			break;

		  case 83:
			if (лНажатие1) {
				ПереключитьОкноСтатистики();
			}
			break;

		  case 112:
			if (лНажатие1) {
				м_Новости.ОткрытьСправку();
			}
			break;

		  case 65 + CTRL_KEY:
			break;

		  case 85 + CTRL_KEY:
			if (лНажатие1) {
				м_Чат.ПереключитьПоложениеПанели();
				ОбновитьОкноНастроек();
			}
			break;

		  case 32:
			if (лНажатие1) {
				ПереключитьПросмотрТрансляции();
				м_Автоскрытие.Показать();
			}
			break;

		  case 49:
		  case 50:
		  case 51:
		  case 52:
		  case 53:
		  case 54:
		  case 55:
		  case 56:
		  case 57:
		  case 48:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				задатьСкоростьПовтора(58 - (оСобытие.keyCode === 48 ? 58 : оСобытие.keyCode));
				м_Автоскрытие.Показать();
			}
			break;

		  case 187:
		  case 107:
		  case 190:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				задатьСкоростьПовтора(-Infinity);
				м_Автоскрытие.Показать();
			}
			break;

		  case 189:
		  case 109:
		  case 188:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				задатьСкоростьПовтора(Infinity);
				м_Автоскрытие.Показать();
			}
			break;

		  case 75:
		  case 12:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Проигрыватель.ПереключитьПаузу();
				м_Автоскрытие.Показать();
			}
			break;

		  case 74:
		  case 37:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на -${ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА}с`);
				м_Проигрыватель.ПеремотатьПовторНа(false, -ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА);
				м_Автоскрытие.Показать();
			}
			break;

		  case 76:
		  case 39:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на +${ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА}с`);
				м_Проигрыватель.ПеремотатьПовторНа(false, ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА);
				м_Автоскрытие.Показать();
			}
			break;

		  case 74 + SHIFT_KEY:
		  case 37 + SHIFT_KEY:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на -${ПЕРЕМАТЫВАТЬ_ПО_КАДРАМ_НА} кадров`);
				м_Проигрыватель.ПеремотатьПовторНа(true, -ПЕРЕМАТЫВАТЬ_ПО_КАДРАМ_НА);
			}
			break;

		  case 76 + SHIFT_KEY:
		  case 39 + SHIFT_KEY:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на +1 кадр`);
				м_Проигрыватель.ПеремотатьПовторНа(true, 1);
			}
			break;

		  case 38:
			if (лНажатие) {
				СохранитьИПрименитьГромкость(false, Math.min(м_Настройки.Получить('чГромкость2') + ШАГ_ПОВЫШЕНИЯ_ГРОМКОСТИ_КЛАВОЙ, МАКСИМАЛЬНАЯ_ГРОМКОСТЬ));
			}
			break;

		  case 40:
			if (лНажатие) {
				СохранитьИПрименитьГромкость(false, Math.max(м_Настройки.Получить('чГромкость2') - ШАГ_ПОНИЖЕНИЯ_ГРОМКОСТИ_КЛАВОЙ, МИНИМАЛЬНАЯ_ГРОМКОСТЬ));
			}
			break;

		  case 33:
			if (лНажатие1) {
				СохранитьИПрименитьГромкость(false);
			}
			break;

		  case 34:
			if (лНажатие1) {
				СохранитьИПрименитьГромкость(true);
			}
			break;

		  case 77:
			if (лНажатие1) {
				СохранитьИПрименитьГромкость(!м_Настройки.Получить('лПриглушить'));
			}
			break;

		  case 73 + CTRL_KEY:
			if (лНажатие1) {
				const лМасштабироватьИзображение = м_Настройки.Получить('лМасштабироватьИзображение');
				м_Настройки.Изменить('лМасштабироватьИзображение', !лМасштабироватьИзображение);
				ОбновитьОкноНастроек();
				ПрименитьМасштабированиеИзображения();
				м_Уведомление.Показать(`svg-fullscreen-${лМасштабироватьИзображение}`, false);
			}
			break;

		  case 88 + ALT_KEY:
			if (лНажатие1) {
				м_Twitch.СоздатьКлип();
			}
			break;

		  default:
			return;
		}
		оСобытие.preventDefault();
	});
	function ОбновитьОкноНастроек() {
		document.querySelector(`input[name="одновременныхзагрузок"][value="${м_Настройки.Получить('кОдновременныхЗагрузок')}"]`).checked = true;
		document.querySelector(`input[name="состояниезакрытогочата"][value="${м_Настройки.Получить('чСостояниеЗакрытогоЧата')}"]`).checked = true;
		Узел('адресчата').selectedIndex = м_Настройки.Получить('лПолноценныйЧат') ? 0 : м_Настройки.Получить('лЗатемнитьЧат') ? 2 : 1;
		Узел('масштабироватьизображение').checked = м_Настройки.Получить('лМасштабироватьИзображение');
		Узел('анимацияинтерфейса').checked = м_Настройки.Получить('лАнимацияИнтерфейса');
		Узел('менятьгромкостьколесом').value = м_Настройки.Получить('лМенятьГромкостьКолесом') ? м_Настройки.Получить('чШагИзмененияГромкостиКолесом') : '';
		const лАвтоПоложение = м_Настройки.Получить('лАвтоПоложениеЧата');
		Узел('автоположениечата').checked = лАвтоПоложение;
		const сузСтороны = document.querySelectorAll('.положениечата input');
		if (лАвтоПоложение) {
			const чГоризонтальноеПоложение = м_Настройки.Получить('чГоризонтальноеПоложениеЧата');
			const чВертикальноеПоложение = м_Настройки.Получить('чВертикальноеПоложениеЧата');
			let узГоризонтальноеПоложение, узВертикальноеПоложение;
			for (let узСторона of сузСтороны) {
				const чСторона = Number.parseInt(узСторона.value, 10);
				if (чГоризонтальноеПоложение === чСторона) {
					узГоризонтальноеПоложение = узСторона;
				}
				if (чВертикальноеПоложение === чСторона) {
					узВертикальноеПоложение = узСторона;
				}
				узСторона.name = чСторона === ПРАВАЯ_СТОРОНА || чСторона === ЛЕВАЯ_СТОРОНА ? 'горизонтальноеположениечата' : 'вертикальноеположениечата';
			}
			узГоризонтальноеПоложение.checked = узВертикальноеПоложение.checked = true;
		} else {
			const чПоложение = м_Настройки.Получить('чПоложениеПанелиЧата');
			let узПоложение;
			for (let узСторона of сузСтороны) {
				if (чПоложение === Number.parseInt(узСторона.value, 10)) {
					узПоложение = узСторона;
				}
				узСторона.name = 'положениечата';
			}
			узПоложение.checked = true;
		}
		if (_оНачалоВоспроизведения) {
			_оНачалоВоспроизведения.Обновить();
			_оРазмерБуфера.Обновить();
			_оРастягиваниеБуфера.Обновить();
			_оДлительностьПовтора.Обновить();
			_оИнтервалАвтоскрытия.Обновить();
		} else {
			_оНачалоВоспроизведения = new ВводЧисла('чНачалоВоспроизведения', .5, 1, 'началовоспроизведения');
			_оРазмерБуфера = new ВводЧисла('чРазмерБуфера', .5, 1, 'размербуфера');
			_оРастягиваниеБуфера = new ВводЧисла('чРастягиваниеБуфера', .5, 1, 'растягиваниебуфера');
			_оДлительностьПовтора = new ВводЧисла('чДлительностьПовтора2', 30, 0, 'длительностьповтора');
			_оНачалоВоспроизведения.ПослеИзменения = _оРазмерБуфера.ПослеИзменения = _оРастягиваниеБуфера.ПослеИзменения = м_Статистика.ОчиститьИсторию;
			_оИнтервалАвтоскрытия = new ВводЧисла('чИнтервалАвтоскрытия', .5, 1, 'интервалавтоскрытия');
		}
	}
	function ОбработатьОткрытиеГлавногоМеню() {
		const элПункт = Узел('адресзаписи');
		const сАдрес = м_Twitch.ПолучитьАдресЗаписиДляТекущейПозиции();
		if (сАдрес) {
			элПункт.href = сАдрес;
			м_Меню.задатьДоступностьПункта(элПункт, true);
		} else {
			элПункт.removeAttribute('href');
			м_Меню.задатьДоступностьПункта(элПункт, false);
		}
	}
	function ОбработатьПаузу(лПауза) {
		ИзменитьКнопку('переключитьпаузу', лПауза);
	}
	function ОбработатьИзменениеПредустановкиБуферизации() {
		ОбновитьОкноНастроек();
		м_Статистика.ОчиститьИсторию();
	}
	function получитьСкоростьПовтора() {
		const узСкорость = Узел('скорость');
		if (узСкорость.options[0].text === '') {
			for (const уз of узСкорость.options) {
				уз.text = уз.defaultSelected ? '1x' : м_i18n.ФорматироватьЧисло(уз.value, 2);
			}
		}
		const чСкорость = Number.parseFloat(узСкорость.value);
		Проверить(чСкорость > 0);
		return чСкорость;
	}
	function задатьСкоростьПовтора(чКод) {
		const узСкорость = Узел('скорость');
		if (!Number.isSafeInteger(чКод)) {
			Проверить(узСкорость.selectedIndex >= 0 && (чКод === -Infinity || чКод === Infinity));
			чКод = узСкорость.selectedIndex + Math.sign(чКод);
		}
		if (чКод >= 0 && чКод < узСкорость.options.length) {
			узСкорость.selectedIndex = чКод;
			м_Проигрыватель.ЗадатьСкоростьПовтора(получитьСкоростьПовтора());
		}
	}
	const ОбработатьИзменениеСкоростиВоспроизведения = ДобавитьОбработчикИсключений(оСобытие => {
		if (_чСостояние === СОСТОЯНИЕ_ПОВТОР) {
			м_Проигрыватель.ЗадатьСкоростьПовтора(получитьСкоростьПовтора());
		}
	});
	const ОбработатьИзменениеВариантаТрансляции = ДобавитьОбработчикИсключений(({target: {selectedIndex}}) => {
		if (selectedIndex !== -1) {
			м_Журнал.Окак(`[Управление] Выбран вариант ${selectedIndex}`);
			м_Список.ИзменитьВариантТрансляции(selectedIndex);
		}
	});
	const ОбработатьИзменениеГромкостиКолесом = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.value) {
			м_Настройки.Изменить('лМенятьГромкостьКолесом', true);
			м_Настройки.Изменить('чШагИзмененияГромкостиКолесом', Number(оСобытие.target.value));
		} else {
			м_Настройки.Изменить('лМенятьГромкостьКолесом', false);
		}
		запуститьИзменениеГромкостиКолесом();
	});
	const ОбработатьИзменениеАдресаЧата = ДобавитьОбработчикИсключений(оСобытие => {
		м_Журнал.Окак(`[Управление] Выбран адрес чата ${оСобытие.target.selectedIndex}`);
		switch (оСобытие.target.selectedIndex) {
		  case 0:
			м_Настройки.Изменить('лПолноценныйЧат', true);
			break;

		  case 1:
			м_Настройки.Изменить('лПолноценныйЧат', false);
			м_Настройки.Изменить('лЗатемнитьЧат', false);
			break;

		  case 2:
			м_Настройки.Изменить('лПолноценныйЧат', false);
			м_Настройки.Изменить('лЗатемнитьЧат', true);
			break;

		  default:
			Проверить(false);
		}
		м_Чат.ПрименитьАдрес();
	});
	const ОбработатьВыборФайлаДляИмпортаНастроек = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.files.length === 1) {
			м_Настройки.Импорт(оСобытие.target.files[0]);
		}
	});
	function ОбновитьСписокВариантовТрансляции([моВарианты, оВыбранныйВариант]) {
		const узСписок = Узел('варианттрансляции');
		узСписок.length = 0;
		if (моВарианты) {
			for (const оВариант of моВарианты) {
				let сНазвание = оВариант.сНазвание;
				if (сНазвание === 'audio_only') {
					сНазвание = Текст('J0144');
				} else if (сНазвание.endsWith('(source)')) {
					сНазвание = сНазвание.slice(0, -8) + Текст('J0139');
				}
				узСписок.add(new Option(сНазвание, void 0, оВариант === оВыбранныйВариант, оВариант === оВыбранныйВариант));
			}
		}
		узСписок.disabled = узСписок.length < 2;
	}
	function обработатьНачалоРекламы() {
		document.body.classList.add('реклама');
	}
	function обработатьКонецРекламы() {
		document.body.classList.remove('реклама');
	}
	function обработатьПереполнениеБуфера() {
		м_Уведомление.Показать('svg-cut', true);
	}
	function Запустить() {
		Проверить(_чСостояние === void 0);
		Узел('названиетрансляции').href = м_Twitch.ПолучитьАдресКанала(true);
		const узГромкость = Узел('громкость');
		узГромкость.min = МИНИМАЛЬНАЯ_ГРОМКОСТЬ;
		узГромкость.addEventListener('input', ОбработатьИзменениеГромкости);
		ОбновитьГромкость();
		ОбновитьОкноНастроек();
		м_Настройки.НастроитьСпискиПредустановок();
		м_Автоскрытие.Запустить();
		м_Автоскрытие.Показать();
		м_Новости.Запустить();
		м_Чат.Восстановить();
		м_События.ДобавитьОбработчик('окно-открыто-главноеменю', ОбработатьОткрытиеГлавногоМеню);
		м_События.ДобавитьОбработчик('список-выбранварианттрансляции', ОбновитьСписокВариантовТрансляции);
		м_События.ДобавитьОбработчик('список-началорекламы', обработатьНачалоРекламы);
		м_События.ДобавитьОбработчик('список-конецрекламы', обработатьКонецРекламы);
		м_События.ДобавитьОбработчик('проигрыватель-переполненбуфер', обработатьПереполнениеБуфера);
		м_События.ДобавитьОбработчик('проигрыватель-пауза', ОбработатьПаузу);
		м_События.ДобавитьОбработчик('настройки-измениласьпредустановка-буферизация', ОбработатьИзменениеПредустановкиБуферизации);
		м_События.ДобавитьОбработчик('twitch-полученыметаданныеканала', ПоказатьМетаданныеКанала);
		м_События.ДобавитьОбработчик('twitch-полученыметаданныезрителя', ПоказатьМетаданныеЗрителя);
		м_События.ДобавитьОбработчик('twitch-полученыметаданныетрансляции', ПоказатьМетаданныеТрансляции);
		document.documentElement.addEventListener('click', ОбработатьЛевыйЩелчок);
		document.addEventListener('keydown', ОбработатьНажатиеИОтпусканиеКлавы);
		document.addEventListener('keyup', ОбработатьНажатиеИОтпусканиеКлавы);
		Узел('скорость').addEventListener('change', ОбработатьИзменениеСкоростиВоспроизведения);
		Узел('варианттрансляции').addEventListener('change', ОбработатьИзменениеВариантаТрансляции);
		Узел('менятьгромкостьколесом').addEventListener('change', ОбработатьИзменениеГромкостиКолесом);
		Узел('адресчата').addEventListener('change', ОбработатьИзменениеАдресаЧата);
		Узел('выборфайладляимпортанастроек').addEventListener('change', ОбработатьВыборФайлаДляИмпортаНастроек);
		запуститьИзменениеГромкостиКолесом();
		ИзменитьСостояние(СОСТОЯНИЕ_ЗАПУСК);
		ПрименитьМасштабированиеИзображения();
		ПрименитьАнимациюИнтерфейса();
		м_Оформление.Запустить();
	}
	function ИзменитьСостояние(чНовоеСостояние) {
		Проверить(Number.isInteger(чНовоеСостояние));
		if (_чСостояние === чНовоеСостояние) {
			return;
		}
		м_Журнал.Вот(`[Управление] Состояние трансляции изменилось с ${_чСостояние} на ${чНовоеСостояние}`);
		_чСостояние = чНовоеСостояние;
		document.body.setAttribute('data-состояние', чНовоеСостояние);
		ИзменитьКнопку('переключитьтрансляцию', чНовоеСостояние === СОСТОЯНИЕ_ОСТАНОВКА || чНовоеСостояние === СОСТОЯНИЕ_ПОВТОР);
		м_События.ПослатьСобытие('управление-изменилосьсостояние', чНовоеСостояние);
		switch (чНовоеСостояние) {
		  case СОСТОЯНИЕ_ЗАПУСК:
			ПоказатьМетаданныеТрансляции({
				сТипТрансляции: null,
				сНазваниеТрансляции: НАЗВАНИЕ_ТРАНСЛЯЦИИ_НЕИЗВЕСТНО,
				сНазваниеИгры: null,
				сАдресИгры: null,
				кЗрителей: null,
				чДлительностьТрансляции: null
			});
			м_Twitch.ЗавершитьСборМетаданныхТрансляции(true);
			break;

		  case СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ:
			ПоказатьМетаданныеТрансляции({
				сТипТрансляции: null,
				сНазваниеТрансляции: НАЗВАНИЕ_ТРАНСЛЯЦИИ_НЕИЗВЕСТНО,
				сНазваниеИгры: null,
				сАдресИгры: null,
				кЗрителей: null,
				чДлительностьТрансляции: null
			});
			м_Twitch.НачатьСборМетаданныхТрансляции();
			break;

		  case СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ:
			ПоказатьМетаданныеТрансляции({
				сТипТрансляции: 'завершена',
				кЗрителей: null,
				чДлительностьТрансляции: null
			});
			м_Twitch.ЗавершитьСборМетаданныхТрансляции(true);
			Узел('статистика-задержкатрансляции').textContent = '';
			break;

		  case СОСТОЯНИЕ_ЗАГРУЗКА:
		  case СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ:
		  case СОСТОЯНИЕ_ВОСПРОИЗВЕДЕНИЕ:
			break;

		  case СОСТОЯНИЕ_ОСТАНОВКА:
		  case СОСТОЯНИЕ_ПОВТОР:
			ПоказатьМетаданныеТрансляции({
				кЗрителей: null
			});
			м_Twitch.ЗавершитьСборМетаданныхТрансляции(false);
			Узел('статистика-задержкатрансляции').textContent = '';
			break;

		  default:
			Проверить(false);
		}
	}
	function ПолучитьСостояние() {
		Проверить(_чСостояние !== void 0);
		return _чСостояние;
	}
	function ПоказатьМетаданныеКанала(оМетаданные) {
		if (оМетаданные.сИмя !== void 0) {
			ИзменитьЗаголовокДокумента(`${оМетаданные.сИмя} - Alternate Player for Twitch.tv`);
			Узел('канал-имя').textContent = оМетаданные.сИмя;
		}
		if (оМетаданные.сАватар !== void 0) {
			Проверить(оМетаданные.сАватар);
			Узел('канал-аватар').src = оМетаданные.сАватар;
		}
		if (оМетаданные.сОписание !== void 0) {
			Узел('канал-описание').textContent = оМетаданные.сОписание || '';
		}
		if (оМетаданные.сКодЯзыка !== void 0) {
			const уз = Узел('канал-язык');
			if (оМетаданные.сКодЯзыка) {
				уз.textContent = м_i18n.ПолучитьНазваниеЯзыка(оМетаданные.сКодЯзыка);
				ПоказатьЭлемент(уз.parentNode, true);
			} else {
				ПоказатьЭлемент(уз.parentNode, false);
			}
		}
		if (оМетаданные.кПодписчиков !== void 0) {
			const уз = Узел('канал-подписчиков');
			if (Number.isFinite(оМетаданные.кПодписчиков)) {
				уз.textContent = м_i18n.ФорматироватьЧисло(оМетаданные.кПодписчиков);
				ПоказатьЭлемент(уз.parentNode, true);
			} else {
				ПоказатьЭлемент(уз.parentNode, false);
			}
		}
		if (оМетаданные.чКаналСоздан !== void 0) {
			const уз = Узел('канал-создан');
			if (Number.isFinite(оМетаданные.чКаналСоздан)) {
				уз.textContent = м_i18n.ФорматироватьДату(оМетаданные.чКаналСоздан);
				ПоказатьЭлемент(уз.parentNode, true);
			} else {
				ПоказатьЭлемент(уз.parentNode, false);
			}
		}
		if (оМетаданные.моКоманды !== void 0) {
			ПоказатьМассивСсылок(оМетаданные.моКоманды, 'канал-команды');
		}
	}
	function ПоказатьМассивСсылок(моСсылки, пВставить) {
		const узВставить = Узел(пВставить);
		if (моСсылки.length === 0) {
			ПоказатьЭлемент(узВставить.parentNode, false);
		} else {
			const оФрагмент = document.createDocumentFragment();
			for (let оСсылка, ы = 0; оСсылка = моСсылки[ы]; ++ы) {
				if (ы !== 0) {
					оФрагмент.appendChild(document.createTextNode(', '));
				}
				Проверить(ЭтоНепустаяСтрока(оСсылка.сАдрес) && ЭтоНепустаяСтрока(оСсылка.сИмя));
				const узСсылка = document.createElement('a');
				узСсылка.href = оСсылка.сАдрес;
				узСсылка.rel = 'noopener noreferrer';
				узСсылка.target = '_blank';
				if (оСсылка.сОписание) {
					узСсылка.className = 'канал-ссылка';
					узСсылка.title = оСсылка.сОписание;
				}
				узСсылка.textContent = оСсылка.сИмя;
				оФрагмент.appendChild(узСсылка);
			}
			узВставить.textContent = '';
			узВставить.appendChild(оФрагмент);
			ПоказатьЭлемент(узВставить.parentNode, true);
		}
	}
	function ПоказатьМетаданныеЗрителя(оМетаданные) {
		if (оМетаданные.сИмя !== void 0) {
			if (оМетаданные.сИмя !== '') {
				Узел('зритель-имя').textContent = оМетаданные.сИмя;
			} else {
				м_i18n.InsertAdjacentHtmlMessage('зритель-имя', 'content', 'F0590');
			}
		}
		if (оМетаданные.чПодписка !== void 0) {
			const уз = Узел('зритель-подписка');
			if (оМетаданные.чПодписка === ПОДПИСКА_ОБНОВЛЯЕТСЯ) {
				уз.classList.add('обновляется');
			} else {
				уз.classList.remove('обновляется');
				уз.setAttribute('data-подписка', оМетаданные.чПодписка);
				Узел('зритель-уведомлять').checked = оМетаданные.чПодписка === ПОДПИСКА_УВЕДОМЛЯТЬ;
			}
		}
	}
	const _оТипыТрансляции = {
		завершена: [ 'J0145', 'J0100', false ],
		прямая: [ 'J0146', 'J0149', true ],
		повтор: [ 'J0147', 'J0150', false ]
	};
	function ПоказатьМетаданныеТрансляции(оМетаданные) {
		if (оМетаданные.сТипТрансляции !== void 0) {
			const уз = Узел('типтрансляции');
			if (typeof оМетаданные.сТипТрансляции == 'string') {
				Проверить(_оТипыТрансляции.hasOwnProperty(оМетаданные.сТипТрансляции));
				уз.textContent = Текст(_оТипыТрансляции[оМетаданные.сТипТрансляции][0]);
				уз.parentElement.title = Текст(_оТипыТрансляции[оМетаданные.сТипТрансляции][1]);
				уз.classList.toggle('прямаятрансляция', _оТипыТрансляции[оМетаданные.сТипТрансляции][2]);
				ПоказатьЭлемент(уз.parentElement, true);
			} else {
				ПоказатьЭлемент(уз.parentElement, false);
			}
			м_Медиазапрос.обновитьБыстро();
		}
		if (оМетаданные.сНазваниеТрансляции !== void 0) {
			Проверить(оМетаданные.сНазваниеТрансляции !== null);
			const уз = Узел('названиетрансляции');
			уз.title = оМетаданные.сНазваниеТрансляции + Текст('J0101');
			уз.textContent = оМетаданные.сНазваниеТрансляции;
			м_Медиазапрос.обновитьБыстро();
		}
		if (оМетаданные.сНазваниеИгры !== void 0) {
			const уз = Узел('категориятрансляции');
			if (оМетаданные.сНазваниеИгры) {
				уз.textContent = оМетаданные.сНазваниеИгры;
				уз.title = уз.previousElementSibling.title = оМетаданные.сНазваниеИгры + Текст('J0102');
				if (оМетаданные.сАдресИгры) {
					уз.href = оМетаданные.сАдресИгры;
				} else {
					уз.removeAttribute('href');
				}
				ПоказатьЭлемент(уз, true);
				ПоказатьЭлемент(уз.previousElementSibling, true);
			} else {
				ПоказатьЭлемент(уз, false);
				ПоказатьЭлемент(уз.previousElementSibling, false);
			}
			м_Медиазапрос.обновитьБыстро();
		}
		if (оМетаданные.кЗрителей !== void 0) {
			const уз = Узел('количествозрителей');
			if (Number.isFinite(оМетаданные.кЗрителей) && оМетаданные.кЗрителей >= 0) {
				уз.textContent = м_i18n.ФорматироватьЧисло(оМетаданные.кЗрителей);
				ПоказатьЭлемент(уз, true);
				ПоказатьЭлемент(уз.previousElementSibling, true);
			} else {
				ПоказатьЭлемент(уз, false);
				ПоказатьЭлемент(уз.previousElementSibling, false);
			}
			м_Медиазапрос.обновитьБыстро();
		}
		if (оМетаданные.чДлительностьТрансляции !== void 0) {
			Узел('позиция').textContent = Number.isFinite(оМетаданные.чДлительностьТрансляции) && оМетаданные.чДлительностьТрансляции >= 0 ? м_i18n.ПеревестиСекундыВСтроку(оМетаданные.чДлительностьТрансляции / 1e3, false) : '';
		}
	}
	return {
		Запустить,
		ПолучитьСостояние,
		ИзменитьСостояние,
		получитьСкоростьПовтора,
		ОбновитьКоличествоДорожек,
		ОстановитьПросмотрТрансляции
	};
})();

const м_Чат = (() => {
	let _узЧат = null;
 //! <iframe>
		function ПолучитьПоложениеПанели() {
		switch (getComputedStyle(document.getElementById('проигрывательичат')).flexDirection) {
		  case 'column-reverse':
			return ВЕРХНЯЯ_СТОРОНА;

		  case 'row':
			return ПРАВАЯ_СТОРОНА;

		  case 'column':
			return НИЖНЯЯ_СТОРОНА;

		  case 'row-reverse':
			return ЛЕВАЯ_СТОРОНА;

		  default:
			Проверить(false);
		}
	}
	function ВставитьПанель() {
		if (_узЧат) {
			return;
		}
		const сАдрес = м_Twitch.открытьЧат();
		м_Журнал.Вот(`[Чат] Вставляю iframe ${сАдрес}`);
		_узЧат = document.createElement('iframe');
		_узЧат.src = сАдрес;
		_узЧат.id = 'чат';
		_узЧат.width = м_Настройки.Получить('чШиринаПанелиЧата');
		_узЧат.height = м_Настройки.Получить('чВысотаПанелиЧата');
		Узел('размерчата').insertAdjacentElement('afterend', _узЧат);
	}
	function УдалитьПанель() {
		if (_узЧат) {
			м_Журнал.Вот(`[Чат] Удаляю iframe ${_узЧат.src}`);
			м_Twitch.закрытьЧат();
			_узЧат.remove();
			_узЧат = null;
		}
	}
	function ПрименитьАдрес() {
		if (_узЧат) {
			м_Журнал.Окак('[Чат] Меняю адрес iframe');
			УдалитьПанель();
			ВставитьПанель();
		}
	}
	function ПрименитьСостояниеПанели() {
		const чСостояние = м_Настройки.Получить('чСостояниеЧата');
		м_Журнал.Окак(`[Чат] Новое состояние панели: ${чСостояние}`);
		ОтменитьПеретаскиваниеПанели();
		switch (чСостояние) {
		  case ЧАТ_ВЫГРУЖЕН:
			document.body.classList.add('скрытьчат');
			УдалитьПанель();
			break;

		  case ЧАТ_СКРЫТ:
			ВставитьПанель();
			document.body.classList.add('скрытьчат');
			break;

		  case ЧАТ_ПАНЕЛЬ:
			ВставитьПанель();
			document.body.classList.remove('скрытьчат');
			break;

		  default:
			Проверить(false);
		}
		м_Медиазапрос.обновитьМедленно();
	}
	function ПрименитьПоложениеПанели() {
		ОтменитьПеретаскиваниеПанели();
		const оКлассы = document.body.classList;
		if (м_Настройки.Получить('лАвтоПоложениеЧата')) {
			оКлассы.add('автоположениечата');
			оКлассы.toggle('чатвверху', м_Настройки.Получить('чВертикальноеПоложениеЧата') === ВЕРХНЯЯ_СТОРОНА);
			оКлассы.toggle('чатслева', м_Настройки.Получить('чГоризонтальноеПоложениеЧата') === ЛЕВАЯ_СТОРОНА);
		} else {
			const чПоложение = м_Настройки.Получить('чПоложениеПанелиЧата');
			оКлассы.remove('автоположениечата');
			оКлассы.toggle('чатвверху', чПоложение === ВЕРХНЯЯ_СТОРОНА);
			оКлассы.toggle('чатсправа', чПоложение === ПРАВАЯ_СТОРОНА);
			оКлассы.toggle('чатвнизу', чПоложение === НИЖНЯЯ_СТОРОНА);
			оКлассы.toggle('чатслева', чПоложение === ЛЕВАЯ_СТОРОНА);
		}
		м_Медиазапрос.обновитьМедленно();
	}
	function СохранитьИПрименитьСостояниеЗакрытойПанели(чНовоеСостояние) {
		м_Настройки.Изменить('чСостояниеЗакрытогоЧата', чНовоеСостояние);
		const чСостояние = м_Настройки.Получить('чСостояниеЧата');
		if ((чСостояние === ЧАТ_ВЫГРУЖЕН || чСостояние === ЧАТ_СКРЫТ) && чСостояние !== чНовоеСостояние) {
			м_Настройки.Изменить('чСостояниеЧата', чНовоеСостояние);
			ПрименитьСостояниеПанели();
		}
	}
	function ПереключитьСостояниеПанели() {
		const лПолноэкранныйРежим = м_ПолноэкранныйРежим.Включен();
		switch (м_Настройки.Получить('чСостояниеЧата')) {
		  case ЧАТ_ВЫГРУЖЕН:
		  case ЧАТ_СКРЫТ:
			м_Настройки.Изменить('чСостояниеЧата', ЧАТ_ПАНЕЛЬ, лПолноэкранныйРежим);
			break;

		  case ЧАТ_ПАНЕЛЬ:
			м_Настройки.Изменить('чСостояниеЧата', лПолноэкранныйРежим ? ЧАТ_СКРЫТ : м_Настройки.Получить('чСостояниеЗакрытогоЧата'), лПолноэкранныйРежим);
			break;

		  default:
			Проверить(false);
		}
		ПрименитьСостояниеПанели();
	}
	function ПереключитьПоложениеПанели() {
		if (м_Настройки.Получить('чСостояниеЧата') !== ЧАТ_ПАНЕЛЬ) {
			return;
		}
		let чПоложение;
		if (м_Настройки.Получить('лАвтоПоложениеЧата')) {
			м_Настройки.Изменить('лАвтоПоложениеЧата', false);
			чПоложение = ПолучитьПоложениеПанели();
		} else {
			чПоложение = м_Настройки.Получить('чПоложениеПанелиЧата');
		}
		switch (чПоложение) {
		  case ВЕРХНЯЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', ПРАВАЯ_СТОРОНА);
			break;

		  case ПРАВАЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', НИЖНЯЯ_СТОРОНА);
			break;

		  case НИЖНЯЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', ЛЕВАЯ_СТОРОНА);
			break;

		  case ЛЕВАЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', ВЕРХНЯЯ_СТОРОНА);
			break;

		  default:
			Проверить(false);
		}
		ПрименитьПоложениеПанели();
	}
	function ОбработатьПеретаскиваниеПанели(оПараметры) {
		if (оПараметры.лОтмена) {
			return;
		}
		const чПоложение = ПолучитьПоложениеПанели();
		if (оПараметры.чШаг !== 1 && оПараметры._чНачальноеПоложение !== чПоложение) {
			м_Журнал.Ой(`[Чат] Положение перетаскиваемой панели изменилось с ${оПараметры._чНачальноеПоложение} на ${чПоложение}`);
			ОтменитьПеретаскиваниеПанели();
			return;
		}
		switch (оПараметры.чШаг) {
		  case 1:
			оПараметры._чНачальноеПоложение = чПоложение;
			if (чПоложение === ПРАВАЯ_СТОРОНА || чПоложение === ЛЕВАЯ_СТОРОНА) {
				оПараметры._чНачальныйРазмер = Number.parseInt(getComputedStyle(_узЧат).width, 10);
			} else {
				оПараметры._чНачальныйРазмер = Number.parseInt(getComputedStyle(_узЧат).height, 10);
			}
			break;

		  case 2:
			if (чПоложение === ПРАВАЯ_СТОРОНА || чПоложение === ЛЕВАЯ_СТОРОНА) {
				if (оПараметры.лИзмениласьX) {
					const чМаксРазмер = Number.parseInt(getComputedStyle(Узел('проигрывательичат')).width, 10) - Number.parseInt(getComputedStyle(Узел('проигрыватель')).minWidth, 10);
					_узЧат.width = Math.max(Math.min(чПоложение === ЛЕВАЯ_СТОРОНА ? оПараметры._чНачальныйРазмер + оПараметры.чИзменениеX : оПараметры._чНачальныйРазмер - оПараметры.чИзменениеX, чМаксРазмер), 0);
					м_Медиазапрос.обновитьМедленно();
				}
			} else if (оПараметры.лИзмениласьY) {
				const чМаксРазмер = Number.parseInt(getComputedStyle(Узел('проигрывательичат')).height, 10) - Number.parseInt(getComputedStyle(Узел('проигрыватель')).minHeight, 10);
				_узЧат.height = Math.max(Math.min(чПоложение === ВЕРХНЯЯ_СТОРОНА ? оПараметры._чНачальныйРазмер + оПараметры.чИзменениеY : оПараметры._чНачальныйРазмер - оПараметры.чИзменениеY, чМаксРазмер), 0);
				м_Медиазапрос.обновитьМедленно();
			}
			break;

		  case 3:
			if (чПоложение === ПРАВАЯ_СТОРОНА || чПоложение === ЛЕВАЯ_СТОРОНА) {
				м_Настройки.Изменить('чШиринаПанелиЧата', Number.parseInt(getComputedStyle(_узЧат).width, 10));
			} else {
				м_Настройки.Изменить('чВысотаПанелиЧата', Number.parseInt(getComputedStyle(_узЧат).height, 10));
			}
			break;

		  default:
			Проверить(false);
		}
	}
	function ОтменитьПеретаскиваниеПанели() {
		м_Тащилка.ОтменитьПеретаскивание('размерчата');
	}
	ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме = -1;
	function ОбработатьИзменениеПолноэкранногоРежима(лВключен) {
		if (лВключен) {
			if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме === -1) {
				ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме = м_Настройки.Получить('чСостояниеЧата');
				if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме === ЧАТ_ПАНЕЛЬ) {
					м_Настройки.Изменить('чСостояниеЧата', ЧАТ_СКРЫТ, true);
					ПрименитьСостояниеПанели();
				}
			}
		} else if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме !== -1) {
			if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме === ЧАТ_ПАНЕЛЬ) {
				м_Настройки.Изменить('чСостояниеЧата', ЧАТ_ПАНЕЛЬ);
				ПрименитьСостояниеПанели();
			} else if (м_Настройки.Получить('чСостояниеЧата') === ЧАТ_СКРЫТ && м_Настройки.Получить('чСостояниеЗакрытогоЧата') === ЧАТ_ВЫГРУЖЕН) {
				м_Настройки.Изменить('чСостояниеЧата', ЧАТ_ВЫГРУЖЕН);
				ПрименитьСостояниеПанели();
			}
			ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме = -1;
		}
	}
	function Восстановить() {
		ПрименитьСостояниеПанели();
		ПрименитьПоложениеПанели();
		м_События.ДобавитьОбработчик('тащилка-перетаскивание-размерчата', ОбработатьПеретаскиваниеПанели);
		м_События.ДобавитьОбработчик('полноэкранныйрежим-изменен', ОбработатьИзменениеПолноэкранногоРежима);
	}
	return {
		Восстановить,
		ПрименитьПоложениеПанели,
		ПрименитьАдрес,
		СохранитьИПрименитьСостояниеЗакрытойПанели,
		ПереключитьСостояниеПанели,
		ПереключитьПоложениеПанели
	};
})();

const м_Аудиоустройство = (() => {
	const УСТРОЙСТВО_ПО_УМОЛЧАНИЮ = 'default';
	const УСТРОЙСТВО_ДЛЯ_ОБЩЕНИЯ = 'communications';
	let _oMediaElement = null;
	function обновитьСписокУстройствИВыбратьУстройство() {
		const узСписокУстройств = Узел('аудиоустройства-список');
		м_Журнал.Окак('[Аудиоустройства] Получаю список медиаустройств');
		navigator.mediaDevices.enumerateDevices().then(моМедиаустройства => {
			if (!Array.isArray(моМедиаустройства)) {
				м_Журнал.Ой('[Аудиоустройства] Список аудиоустройств недоступен');
				ПоказатьЭлемент('аудиоустройства', false);
				return;
			}
			узСписокУстройств.length = 0;
			м_Журнал.Вот(`[Аудиоустройства] Текущее устройство ${_oMediaElement.sinkId}`);
			const сТекущееУстройство = _oMediaElement.sinkId === УСТРОЙСТВО_ПО_УМОЛЧАНИЮ ? '' : _oMediaElement.sinkId;
			const сСохраненноеУстройство = м_Настройки.Получить('сИдАудиоустройства');
			let кУстройств = 0, кНастоящихУстройств = 0;
			let лЕстьУстройствоПоУмолчанию = false, лЕстьТекущееУстройство = сТекущееУстройство === '', лЕстьСохраненноеУстройство = сСохраненноеУстройство === '';
			for (const оМедиаустройство of моМедиаустройства) {
				м_Журнал.Вот(`[Аудиоустройства] Медиаустройство kind=${оМедиаустройство.kind} deviceId=${оМедиаустройство.deviceId} groupId=${оМедиаустройство.groupId} label=${оМедиаустройство.label}`);
				if (оМедиаустройство.kind === 'audiooutput') {
					кУстройств++;
					if (оМедиаустройство.deviceId && оМедиаустройство.label) {
						кНастоящихУстройств += оМедиаустройство.deviceId !== УСТРОЙСТВО_ПО_УМОЛЧАНИЮ && оМедиаустройство.deviceId !== УСТРОЙСТВО_ДЛЯ_ОБЩЕНИЯ;
						лЕстьУстройствоПоУмолчанию = лЕстьУстройствоПоУмолчанию || оМедиаустройство.deviceId === УСТРОЙСТВО_ПО_УМОЛЧАНИЮ;
						лЕстьТекущееУстройство = лЕстьТекущееУстройство || оМедиаустройство.deviceId === сТекущееУстройство;
						лЕстьСохраненноеУстройство = лЕстьСохраненноеУстройство || оМедиаустройство.deviceId === сСохраненноеУстройство;
						узСписокУстройств.add(new Option(оМедиаустройство.label, оМедиаустройство.deviceId === УСТРОЙСТВО_ПО_УМОЛЧАНИЮ ? '' : оМедиаустройство.deviceId));
					}
				}
			}
			if (кУстройств !== 0 && узСписокУстройств.length === 0) {
				if (получитьВерсиюДвижкаБраузера() <= 68 && chrome.extension.inIncognitoContext) {
					ПоказатьЭлемент('аудиоустройства', false);
				} else {
					ПоказатьЭлемент('аудиоустройства-доступ', true);
					ПоказатьЭлемент(узСписокУстройств, false);
					ПоказатьЭлемент('аудиоустройства', true);
					м_События.ДобавитьОбработчик('управление-левыйщелчок', обработатьЩелчокИПолучитьДоступКАудиоустройствам);
				}
			} else {
				if (!лЕстьУстройствоПоУмолчанию && узСписокУстройств.length !== 0) {
					узСписокУстройств.add(new Option('Default', ''), 0);
				}
				узСписокУстройств.value = сТекущееУстройство;
				узСписокУстройств.disabled = узСписокУстройств.length === 0;
				ПоказатьЭлемент('аудиоустройства-доступ', false);
				ПоказатьЭлемент(узСписокУстройств, true);
				if (кНастоящихУстройств > 1) {
					ПоказатьЭлемент('аудиоустройства', true);
					узСписокУстройств.addEventListener('change', обработатьВыборУстройства);
				}
				let сВыбрать;
				if (лЕстьСохраненноеУстройство && сСохраненноеУстройство !== сТекущееУстройство) {
					сВыбрать = сСохраненноеУстройство;
				} else if (!лЕстьТекущееУстройство && узСписокУстройств.length !== 0) {
					сВыбрать = '';
				}
				if (сВыбрать !== void 0) {
					м_Журнал.Окак(`[Аудиоустройства] Выбираю устройство ${сВыбрать}`);
					return _oMediaElement.setSinkId(сВыбрать).then(() => {
						м_Журнал.Вот('[Аудиоустройства] Устройство выбрано');
						узСписокУстройств.value = сВыбрать;
					}, пПричина => {
						м_Журнал.Ой(`[Аудиоустройства] Не удалось выбрать устройство: ${пПричина}`);
					});
				}
			}
		}, пПричина => {
			м_Журнал.Ой(`[Аудиоустройства] Не удалось получить список медиаустройств: ${пПричина}`);
			узСписокУстройств.length = 0;
			узСписокУстройств.disabled = true;
		}).catch(м_Отладка.ПойманоИсключение);
	}
	function обработатьЩелчокИПолучитьДоступКАудиоустройствам({сПозывной}) {
		if (сПозывной !== 'аудиоустройства-доступ') {
			return;
		}
		м_Журнал.Окак('[Аудиоустройства] Запрашиваю разрешение contentSettings');
		chrome.permissions.request({
			permissions: [ 'contentSettings' ]
		}, ДобавитьОбработчикИсключений(лРазрешениеПолучено => {
			if (лРазрешениеПолучено) {
				м_Журнал.Окак('[Аудиоустройства] Получаю доступ к аудиоустройствам');
				chrome.contentSettings.microphone.set({
					primaryPattern: `*://${chrome.runtime.id}/*`,
					setting: 'allow',
					scope: chrome.extension.inIncognitoContext ? 'incognito_session_only' : 'regular'
				}, ДобавитьОбработчикИсключений(() => {
					if (chrome.runtime.lastError) {
						м_Журнал.Ой(`[Аудиоустройства] Доступ не получен: ${chrome.runtime.lastError.message}`);
						м_Уведомление.ПоказатьЖопу();
					}
					обновитьСписокУстройствИВыбратьУстройство();
				}));
			} else {
				м_Журнал.Ой(`[Аудиоустройства] Разрешение не получено: ${chrome.runtime.lastError && chrome.runtime.lastError.message}`);
				м_Уведомление.ПоказатьЖопу();
			}
		}));
	}
	const обработатьВыборУстройства = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.selectedIndex !== -1) {
			const сВыбрать = оСобытие.target.value;
			м_Журнал.Окак(`[Аудиоустройства] Выбираю устройство ${сВыбрать} вместо ${_oMediaElement.sinkId}`);
			_oMediaElement.setSinkId(сВыбрать).then(() => {
				м_Журнал.Вот('[Аудиоустройства] Устройство выбрано');
				м_Настройки.Изменить('сИдАудиоустройства', сВыбрать);
			}, пПричина => {
				м_Журнал.Ой(`[Аудиоустройства] Не удалось выбрать устройство: ${пПричина}`);
				м_Уведомление.ПоказатьЖопу();
				обновитьСписокУстройствИВыбратьУстройство();
			}).catch(м_Отладка.ПойманоИсключение);
		}
	});
	function запустить(oMediaElement) {
		if (_oMediaElement) {
			return;
		}
		_oMediaElement = oMediaElement;
		if (!('setSinkId' in _oMediaElement)) {
			м_Журнал.Ой('[Аудиоустройства] Браузер не поддерживает MediaElement.setSinkId');
			return;
		}
		if (!('addEventListener' in navigator.mediaDevices)) {
			м_Журнал.Ой('[Аудиоустройства] Браузер не поддерживает MediaDevices.ondevicechange');
		} else {
			navigator.mediaDevices.addEventListener('devicechange', ДобавитьОбработчикИсключений(обновитьСписокУстройствИВыбратьУстройство));
		}
		обновитьСписокУстройствИВыбратьУстройство();
	}
	return {
		запустить
	};
})();

const м_Проигрыватель = (() => {
	const ИНТЕРВАЛ_УДАЛЕНИЯ_ВИДЕО = 10;
	const ИСЧЕРПАНИЕ_БУФЕРА = 1 / 25 * 7;
	const ПОВТОР_ДОСТУПЕН_ЕСЛИ_ПРОСМОТРЕНО = 1;
	const ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА = -1;
	const ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ = -2;
	const ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ = -3;
	const ПРОВЕРИТЬ_ОСТАНОВКА_ВОСПРОИЗВЕДЕНИЯ = -4;
	const ВОСПРОИЗВЕДЕНИЕ_НЕВОЗМОЖНО = 0;
	const ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО = 1;
	const ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО_ПОСЛЕ_ПЕРЕМОТКИ = 2;
	let _oMediaElement;
	let _oMediaSource;
	let _oMediaSourceBuffer = null;
	let _лЕстьВидеодорожка = false;
	let _чВоспроизведениеНачиналось = 0;
	let _лАсинхроннаяОперация = false;
	let _сРазмерБуфера = 'чНачалоВоспроизведения';
	let _лЖдатьЗаполненияБуфера = true;
	let _чСмещениеТрансляции = NaN;
	let _лНужнаПеремотка = false;
	const _оПрямаяТрансляция = {
		ОбработатьSourceOpen() {
			Проверить(_oMediaElement.paused);
			_чВоспроизведениеНачиналось = Math.max(_чВоспроизведениеНачиналось, 1);
			ДобавитьСледующийСегмент();
		},
		ОбработатьProgress() {
			if (!_лАсинхроннаяОперация) {
				НачатьВоспроизведение(ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА));
			}
		},
		ОбработатьWaiting() {},
		ОбработатьPlaying() {
			if (м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ && !_oMediaElement.paused) {
				м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_ВОСПРОИЗВЕДЕНИЕ);
			}
		},
		ОбработатьSeeking: ЗАГЛУШКА,
		ОбработатьSeeked: НачатьВоспроизведение,
		ОбработатьEnded() {
			ПерезагрузитьПроигрыватель(СОСТОЯНИЕ_ЗАГРУЗКА);
		},
		ОбработатьTimeUpdate() {
			if (!_oMediaElement.seeking && !_oMediaElement.paused && !_oMediaElement.ended) {
				ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ);
			}
		}
	};
	const _оПовтор = {
		лПауза: true,
		ОбработатьSourceOpen() {
			Проверить(_oMediaElement.paused);
			_чВоспроизведениеНачиналось = Math.max(_чВоспроизведениеНачиналось, 1);
		},
		ОбработатьProgress: ЗАГЛУШКА,
		ОбработатьWaiting: ЗАГЛУШКА,
		ОбработатьPlaying: ЗАГЛУШКА,
		ОбработатьSeeked: ЗАГЛУШКА,
		ОбработатьSeeking() {
			м_Шкала.ЗадатьПросмотрено(_oMediaElement.currentTime);
		},
		ОбработатьEnded() {
			if (!this.лПауза) {
				_oMediaElement.play();
			}
		},
		ОбработатьTimeUpdate() {
			if (!this.лПауза && !_oMediaElement.seeking) {
				this.ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ);
			}
			м_Шкала.ЗадатьПросмотрено(_oMediaElement.currentTime);
		},
		ПроверитьПозициюВоспроизведения(чВремя) {
			Проверить(Number.isFinite(чВремя));
			Проверить(чВремя === ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ || чВремя === ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ || чВремя >= 0);
			const оБуфер = _oMediaElement.buffered;
			const чПоследняяОбласть = оБуфер.length - 1;
			const чТекущееВремя = _oMediaElement.currentTime + 1e-4;
			let чПеремотатьДо = чВремя >= 0 ? чВремя : чТекущееВремя;
			let сПричинаПеремотки = '';
			for (let лНачатьСначала = false; ;) {
				let чНужноДляВоспроизведения = чВремя === ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ ? ИСЧЕРПАНИЕ_БУФЕРА : МИН_РАЗМЕР_БУФЕРА;
				for (let чОбласть = 0; чОбласть <= чПоследняяОбласть; ++чОбласть) {
					if (чПеремотатьДо < оБуфер.start(чОбласть)) {
						чНужноДляВоспроизведения = МИН_РАЗМЕР_БУФЕРА;
						сПричинаПеремотки += 'Перепрыгиваю яму. ';
						чПеремотатьДо = оБуфер.start(чОбласть);
					}
					if (оБуфер.end(чОбласть) - чПеремотатьДо >= чНужноДляВоспроизведения) {
						break;
					}
				}
				if (this.лПауза || чПеремотатьДо < м_Шкала.ПолучитьКонец()) {
					break;
				}
				if (лНачатьСначала) {
					ПоказатьСостояние('Ой', `Бесконечная перемотка Время=${чВремя}`);
					return;
				}
				чПеремотатьДо = м_Шкала.ПолучитьНачало();
				сПричинаПеремотки += 'Начинаю сначала. ';
				лНачатьСначала = true;
			}
			if (чПеремотатьДо !== чТекущееВремя) {
				ПоказатьСостояние('Окак', `${сПричинаПеремотки}Перематываю до ${чПеремотатьДо}`);
				_oMediaElement.currentTime = чПеремотатьДо;
			}
		}
	};
	let _оПоведение = _оПрямаяТрансляция;
	function ПоказатьСостояние(сВажность, сЗапись) {
		const оБуфер = _oMediaSource.sourceBuffers.length !== 0 ? _oMediaSource.sourceBuffers[0] : null;
		const сОбластиБуфера = ПеревестиОбластиВСтроку(оБуфер ? оБуфер.buffered : null);
		const сОбласти = ПеревестиОбластиВСтроку(_oMediaElement.buffered);
		const лОбластиРавны = сОбластиБуфера === сОбласти;
		if (сВажность === 'Вот' && (оБуфер && оБуфер.buffered.length > 1 || _oMediaElement.buffered.length > 1)) {
			сВажность = 'Окак';
		}
		if (_oMediaElement.error || !лОбластиРавны) {
			сВажность = 'Ой';
		}
		м_Журнал[сВажность](`${сЗапись.charAt(0) === '[' ? '' : '[Проигрыватель] '}${сЗапись} •••` + (оБуфер && оБуфер.updating ? ' [U]' : '') + (_oMediaElement.paused ? ' [P]' : '') + (_oMediaElement.seeking ? ' [S]' : '') + (_oMediaElement.ended ? ' [E]' : '') + (_oMediaElement.error ? ` error=${_oMediaElement.error.code}` : '') + (_oMediaElement.src.startsWith('blob:') || _oMediaElement.src.startsWith('mediasource:') ? '' : ` src=${_oMediaElement.src}`) + (_oMediaSource.readyState === 'open' ? '' : ` MSE.readyState=${_oMediaSource.readyState}`) + (_oMediaSource.sourceBuffers.length === 1 ? '' : ` MSE.buffers=${_oMediaSource.sourceBuffers.length}`) + (_oMediaElement.networkState === HTMLMediaElement.NETWORK_LOADING ? '' : ` networkState=${_oMediaElement.networkState}`) + ` readyState=${_oMediaElement.readyState}` + ` currentTime=${_oMediaElement.currentTime}` + (лОбластиРавны ? ` buffered=${сОбласти}` : ` MSE.buffered=${сОбластиБуфера} buffered=${сОбласти}`) + (_oMediaElement.duration === Infinity ? '' : ` duration=${_oMediaElement.duration}`) + ` seekable=${ПеревестиОбластиВСтроку(_oMediaElement.seekable)}` + ` played=${ПеревестиОбластиВСтроку(_oMediaElement.played)}`);
	}
	function ПеревестиОбластиВСтроку(оОбласти) {
		let сРезультат = '';
		if (оОбласти && оОбласти.length !== 0) {
			let чОбласть = Math.max(оОбласти.length - 5, 0);
			if (чОбласть !== 0) {
				сРезультат = `[${чОбласть}]`;
			}
			for (;чОбласть < оОбласти.length; ++чОбласть) {
				if (чОбласть !== 0) {
					сРезультат += `(${(оОбласти.start(чОбласть) - оОбласти.end(чОбласть - 1)).toFixed(3)})`;
				}
				сРезультат += `${оОбласти.start(чОбласть)}-${оОбласти.end(чОбласть)}`;
			}
		}
		return сРезультат;
	}
	function ПолучитьЗаполненностьБуфера(оБуфер = _oMediaElement.buffered) {
		let чПросмотрено = 0;
		let чНеПросмотрено = 0;
		if (оБуфер.length !== 0) {
			const чНачало = оБуфер.start(0);
			const чКонец = оБуфер.end(оБуфер.length - 1);
			const чТекущееВремя = Ограничить(_oMediaElement.currentTime, чНачало, чКонец);
			чПросмотрено = чТекущееВремя - чНачало;
			чНеПросмотрено = чКонец - чТекущееВремя;
		}
		return {
			чПросмотрено,
			чНеПросмотрено
		};
	}
	function ПолучитьКоличествоПропущенныхКадров() {
		return _oMediaElement.getVideoPlaybackQuality ? _oMediaElement.getVideoPlaybackQuality() : {
			totalVideoFrames: _oMediaElement.webkitDecodedFrameCount,
			droppedVideoFrames: _oMediaElement.webkitDroppedFrameCount
		};
	}
	function ПолучитьПозициюВоспроизведенияТрансляции(лДляКлипа) {
		if (Number.isNaN(_чСмещениеТрансляции)) {
			return -1;
		}
		СледитьЗаОшибками();
		let чПозиция = _oMediaElement.currentTime;
		if (лДляКлипа && м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР) {
			чПозиция = м_Шкала.ПолучитьКонец();
		}
		if (!лДляКлипа && чПозиция === 0 && _oMediaSourceBuffer !== null) {
			if (_oMediaSourceBuffer.buffered.length !== 0) {
				чПозиция = _oMediaSourceBuffer.buffered.start(0);
			}
		}
		return чПозиция === 0 ? -1 : Math.max(чПозиция + _чСмещениеТрансляции, 0);
	}
	function РасчитатьСмещениеТрансляции(оСегмент) {
		if (Number.isFinite(оСегмент.пДанные.чПозицияКодирования) && Number.isFinite(оСегмент.пДанные.чПозицияТрансляции)) {
			const чСмещениеТрансляции = оСегмент.пДанные.чПозицияТрансляции - оСегмент.пДанные.чПозицияКодирования;
			м_Журнал[Math.abs(чСмещениеТрансляции - _чСмещениеТрансляции) > 2 ? 'Ой' : 'Вот'](`[Проигрыватель] Смещение трансляции: ${м_Журнал.F1(чСмещениеТрансляции)}с`);
			_чСмещениеТрансляции = чСмещениеТрансляции;
		}
	}
	function ПоказатьЗадержкуТрансляции(оСегмент) {
		if (м_Статистика.ОкноОткрыто() && Number.isFinite(оСегмент.пДанные.чПозицияКодирования) && Number.isFinite(оСегмент.пДанные.чВремяКодирования) && _oMediaElement.currentTime !== 0) {
			const чПолучение = (performance.now() + г_чТочноеВремя - оСегмент.пДанные.чВремяКодирования) / 1e3;
			const чВоспроизведение = оСегмент.пДанные.чПозицияКодирования - _oMediaElement.currentTime;
			const сЗадержка = `${чПолучение.toFixed(1)} + ${чВоспроизведение.toFixed(1)} = ${(чПолучение + чВоспроизведение).toFixed(1)}`;
			м_Журнал[чПолучение > 0 && чВоспроизведение > -.1 ? 'Вот' : 'Ой'](`[Проигрыватель] Задержка трансляции: ${сЗадержка}с`);
			Узел('статистика-задержкатрансляции').textContent = сЗадержка;
		}
	}
	function ПрименитьГромкость() {
		_oMediaElement.volume = м_Настройки.Получить('чГромкость2') / МАКСИМАЛЬНАЯ_ГРОМКОСТЬ;
		_oMediaElement.muted = м_Настройки.Получить('лПриглушить');
	}
	function ПерезагрузитьИЖдатьЗаполненияБуфера(чНовоеСостояние) {
		_лЖдатьЗаполненияБуфера = true;
		ПерезагрузитьПроигрыватель(чНовоеСостояние);
	}
	function ПерезагрузитьПроигрыватель(чНовоеСостояние) {
		ПоказатьСостояние('Окак', 'Перезагрузка проигрывателя');
		м_Управление.ИзменитьСостояние(чНовоеСостояние);
		_оПоведение = _оПрямаяТрансляция;
		_oMediaSourceBuffer = null;
		_лНужнаПеремотка = false;
		подключитьMediaSourceКMediaElement();
	}
	function СледитьЗаОшибками() {
		if (_oMediaElement.error) {
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0206');
		}
	}
	const СледитьЗаСобытиямиMediaSource = ДобавитьОбработчикИсключений(оСобытие => {
		СледитьЗаОшибками();
		const сЗапись = `[MediaSource] ${оСобытие.type}`;
		switch (оСобытие.type) {
		  case 'sourceopen':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьSourceOpen();
			break;

		  case 'sourceended':
		  case 'sourceclose':
			ПоказатьСостояние('Вот', сЗапись);
			break;

		  default:
			м_Журнал.Вот(сЗапись);
		}
	});
	const СледитьЗаСобытиямиMediaElement = ДобавитьОбработчикИсключений(оСобытие => {
		СледитьЗаОшибками();
		const сЗапись = `[MediaElement] ${оСобытие.type}`;
		switch (оСобытие.type) {
		  case 'loadstart':
			ПоказатьСостояние('Вот', `${сЗапись} src=${_oMediaElement.src} currentSrc=${_oMediaElement.currentSrc}`);
			break;

		  case 'progress':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьProgress();
			break;

		  case 'abort':
			ПоказатьСостояние('Вот', сЗапись);
			break;

		  case 'waiting':
			ПоказатьСостояние('Окак', сЗапись);
			_оПоведение.ОбработатьWaiting();
			break;

		  case 'playing':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьPlaying();
			break;

		  case 'seeking':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьSeeking();
			break;

		  case 'seeked':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьSeeked();
			break;

		  case 'ended':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьEnded();
			break;

		  case 'timeupdate':
			м_Журнал.Вот(`${сЗапись} readyState=${_oMediaElement.readyState} currentTime=${_oMediaElement.currentTime} НеПросмотрено=${м_Журнал.F2(ПолучитьЗаполненностьБуфера().чНеПросмотрено)}`);
			_оПоведение.ОбработатьTimeUpdate();
			break;

		  default:
			м_Журнал.Вот(сЗапись);
		}
	});
	function ПроверитьПозициюВоспроизведения(чИсточникПроверки, чБудетДобавлено = 0) {
		const оБуфер = _oMediaElement.buffered;
		const чПоследняяОбласть = оБуфер.length - 1;
		if (чПоследняяОбласть === -1) {
			return false;
		}
		const чТекущееВремя = _oMediaElement.currentTime + 1e-4;
		let чПеремотатьДо = Math.max(чТекущееВремя, оБуфер.start(0));
		let сПричинаПеремотки = '';
		const чНеПросмотрено = оБуфер.end(чПоследняяОбласть) - чПеремотатьДо;
		if (чИсточникПроверки === ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА) {
			const чРазмерБуфера = м_Настройки.Получить('чМаксРазмерБуфера');
			const чПереполнение = чРазмерБуфера + м_Настройки.Получить('чРастягиваниеБуфера');
			if (чНеПросмотрено <= чПереполнение) {
				return;
			}
			if (_чВоспроизведениеНачиналось === 2) {
				м_События.ПослатьСобытие('проигрыватель-переполненбуфер', чНеПросмотрено - чРазмерБуфера);
			}
			сПричинаПеремотки += `Переполнен буфер проигрывателя ${чНеПросмотрено.toFixed(2)}с > ${чПереполнение}с. `;
			чПеремотатьДо = оБуфер.end(чПоследняяОбласть) - чРазмерБуфера - .1;
		}
		if (чИсточникПроверки === ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ && _чВоспроизведениеНачиналось !== 2) {
			_чВоспроизведениеНачиналось = 2;
			const чПереполнение = м_Настройки.Получить('чМаксРазмерБуфера') + м_Статистика.ПолучитьTargetDuration() / 2;
			if (чНеПросмотрено > чПереполнение) {
				сПричинаПеремотки += `Превышена задержка трансляции ${чНеПросмотрено.toFixed(2)}с > ${чПереполнение}с. `;
				чПеремотатьДо = оБуфер.end(чПоследняяОбласть) - чПереполнение;
			}
		}
		Проверить(ИСЧЕРПАНИЕ_БУФЕРА < МИН_РАЗМЕР_БУФЕРА);
		let чНужноДляВоспроизведения = чИсточникПроверки === ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ ? ИСЧЕРПАНИЕ_БУФЕРА : чИсточникПроверки === ПРОВЕРИТЬ_ОСТАНОВКА_ВОСПРОИЗВЕДЕНИЯ ? Infinity : МИН_РАЗМЕР_БУФЕРА;
		let лВоспроизведениеВозможно = _oMediaSource.readyState === 'ended';
		let чДоКонцаОбласти;
		for (let чОбласть = 0; чОбласть <= чПоследняяОбласть; ++чОбласть) {
			if (чПеремотатьДо < оБуфер.start(чОбласть)) {
				чНужноДляВоспроизведения = МИН_РАЗМЕР_БУФЕРА;
				сПричинаПеремотки += 'Перепрыгиваю яму. ';
				чПеремотатьДо = оБуфер.start(чОбласть);
			}
			чДоКонцаОбласти = оБуфер.end(чОбласть) - чПеремотатьДо;
			if (чДоКонцаОбласти >= чНужноДляВоспроизведения) {
				лВоспроизведениеВозможно = true;
				break;
			}
		}
		if (!лВоспроизведениеВозможно && !_oMediaElement.paused) {
			БуферИсчерпан(чДоКонцаОбласти, чНеПросмотрено, чБудетДобавлено);
		}
		if ((лВоспроизведениеВозможно || чИсточникПроверки === ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА) && (чПеремотатьДо !== чТекущееВремя || _лНужнаПеремотка)) {
			if (чПеремотатьДо === чТекущееВремя) {
				чПеремотатьДо = _oMediaElement.currentTime;
			}
			ПоказатьСостояние(сПричинаПеремотки ? 'Ой' : 'Окак', `${сПричинаПеремотки}Перематываю до ${чПеремотатьДо}`);
			_лНужнаПеремотка = false;
			_oMediaElement.currentTime = чПеремотатьДо;
			return ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО_ПОСЛЕ_ПЕРЕМОТКИ;
		}
		return лВоспроизведениеВозможно ? ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО : ВОСПРОИЗВЕДЕНИЕ_НЕВОЗМОЖНО;
	}
	function НачатьВоспроизведение(чПроверка) {
		if (_oMediaElement.seeking || чПроверка === ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО_ПОСЛЕ_ПЕРЕМОТКИ || !_oMediaElement.paused || _oMediaElement.ended) {
			return;
		}
		if (_лЖдатьЗаполненияБуфера && _oMediaSource.readyState !== 'ended') {
			const {чНеПросмотрено} = ПолучитьЗаполненностьБуфера();
			const чРазмерБуфера = м_Настройки.Получить(_сРазмерБуфера);
			if (чНеПросмотрено < чРазмерБуфера) {
				м_Журнал.Вот(`[Проигрыватель] В буфере не просмотрено ${м_Журнал.F3(чНеПросмотрено)}с < ${чРазмерБуфера}с`);
				return;
			}
			м_Журнал.Окак(`[Проигрыватель] В буфере не просмотрено ${м_Журнал.F3(чНеПросмотрено)}с >= ${чРазмерБуфера}с`);
		} else {
			м_Журнал.Окак('[Проигрыватель] Не нужно ждать заполнения буфера');
		}
		switch (ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ)) {
		  case ВОСПРОИЗВЕДЕНИЕ_НЕВОЗМОЖНО:
			ПоказатьСостояние('Ой', `Не найдена область >= ${МИН_РАЗМЕР_БУФЕРА}с для начала воспроизведения`);
			_лЖдатьЗаполненияБуфера = true;
			break;

		  case ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО:
			ПоказатьСостояние('Окак', 'Начало воспроизведения');
			_лЖдатьЗаполненияБуфера = true;
			_oMediaElement.play();
			м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ);
		}
	}
	function ОстановитьВоспроизведение(чНовоеСостояние) {
		if (чНовоеСостояние !== void 0) {
			м_Управление.ИзменитьСостояние(чНовоеСостояние);
		}
		_oMediaElement.pause();
	}
	function БуферИсчерпан(чДоКонцаПоследнейОбласти, чНеПросмотрено, чБудетДобавлено) {
		Проверить(_oMediaSource.readyState !== 'ended');
		Проверить(чДоКонцаПоследнейОбласти < МИН_РАЗМЕР_БУФЕРА);
		const лДосрочно = чНеПросмотрено > 1;
		м_Статистика.ИсчерпанБуферПроигрывателя(лДосрочно);
		_сРазмерБуфера = 'чМаксРазмерБуфера';
		const чРазмерБуфера = м_Настройки.Получить(_сРазмерБуфера);
		if (чДоКонцаПоследнейОбласти + чБудетДобавлено >= МИН_РАЗМЕР_БУФЕРА && чНеПросмотрено + чБудетДобавлено >= чРазмерБуфера) {
			ПоказатьСостояние(лДосрочно ? 'Ой' : 'Окак', `Буфер исчерпан, остановка не нужна БудетДобавлено=${м_Журнал.F3(чБудетДобавлено)}с ДоКонцаПоследнейОбласти=${м_Журнал.F3(чДоКонцаПоследнейОбласти)}с НеПросмотрено=${м_Журнал.F3(чНеПросмотрено)}с РазмерБуфера=${чРазмерБуфера}с`);
		} else {
			ПоказатьСостояние(лДосрочно ? 'Ой' : 'Окак', `Приостанавливаю воспроизведение для заполнения буфера ДоКонцаПоследнейОбласти=${м_Журнал.F3(чДоКонцаПоследнейОбласти)}с НеПросмотрено=${м_Журнал.F3(чНеПросмотрено)}с РазмерБуфера=${чРазмерБуфера}с`);
			_лНужнаПеремотка = true;
			ОстановитьВоспроизведение(СОСТОЯНИЕ_ЗАГРУЗКА);
		}
	}
	function ЗавершитьПоток(оСегмент) {
		ПоказатьСостояние('Окак', `Сегмент ${оСегмент.чНомер} вызвал окончание потока`);
		if (_oMediaElement.buffered.length === 0 || _oMediaElement.paused && ПолучитьЗаполненностьБуфера().чНеПросмотрено < ИСЧЕРПАНИЕ_БУФЕРА + .1) {
			ПерезагрузитьИЖдатьЗаполненияБуфера(СОСТОЯНИЕ_ЗАГРУЗКА);
		} else {
			_лЖдатьЗаполненияБуфера = typeof оСегмент.пДанные == 'number' || !_oMediaElement.seeking && _oMediaElement.paused;
			_oMediaSource.endOfStream();
			НачатьВоспроизведение();
		}
	}
	function УдалитьПросмотренноеВидео(оСегмент) {
		const МАКС_ДЛИТЕЛЬНОСТЬ_ПОВТОРА_ЗВУКА = 640;
		СледитьЗаОшибками();
		let чДлительностьПовтора = м_Настройки.Получить('чДлительностьПовтора2');
		if (чДлительностьПовтора === АВТОНАСТРОЙКА) {
			if (_лЕстьВидеодорожка) {
				return Promise.resolve(оСегмент);
			}
			чДлительностьПовтора = МАКС_ДЛИТЕЛЬНОСТЬ_ПОВТОРА_ЗВУКА;
		}
		const {чПросмотрено} = ПолучитьЗаполненностьБуфера(_oMediaSourceBuffer.buffered);
		if (чПросмотрено < чДлительностьПовтора + ИНТЕРВАЛ_УДАЛЕНИЯ_ВИДЕО) {
			return Promise.resolve(оСегмент);
		}
		const чУдалитьДо = _oMediaElement.currentTime - чДлительностьПовтора;
		return new Promise((фВыполнить, фОтказаться) => {
			ПоказатьСостояние('Вот', `Удаляю просмотренное видео Просмотрено=${м_Журнал.F3(чПросмотрено)}с УдалитьДо=${м_Журнал.F3(чУдалитьДо)}с`);
			_oMediaSourceBuffer.addEventListener('updateend', Удалено);
			let чПрошлоВремени = -performance.now();
			_oMediaSourceBuffer.remove(0, чУдалитьДо);
			function Удалено() {
				try {
					if (_oMediaSourceBuffer === null) {
						фОтказаться(ОтменаОбещания.ПРИЧИНА);
					} else {
						чПрошлоВремени += performance.now();
						_oMediaSourceBuffer.removeEventListener('updateend', Удалено);
						const {чПросмотрено} = ПолучитьЗаполненностьБуфера(_oMediaSourceBuffer.buffered);
						ПоказатьСостояние(чПрошлоВремени > 100 || чПросмотрено < МИН_РАЗМЕР_БУФЕРА ? 'Ой' : 'Вот', `Просмотренное видео удалено за ${м_Журнал.F0(чПрошлоВремени)}мс Просмотрено=${м_Журнал.F0(чПросмотрено)}с`);
						фВыполнить(оСегмент);
					}
				} catch (пИсключение) {
					фОтказаться(пИсключение);
				}
			}
		});
	}
	function ДобавитьСегментИнициализации(оСегмент) {
		return ДобавитьСегмент(оСегмент, оСегмент.пДанные.мбСегментИнициализации, 'сегмент инициализации');
	}
	function ДобавитьМедиасегмент(оСегмент) {
		return ДобавитьСегмент(оСегмент, оСегмент.пДанные.мбМедиасегмент, 'медиасегмент');
	}
	function ДобавитьСегмент(оСегмент, мбДобавить, сДобавить) {
		СледитьЗаОшибками();
		return new Promise((фВыполнить, фОтказаться) => {
			ПоказатьСостояние('Вот', `Добавляю ${сДобавить} ${оСегмент.чНомер}`);
			_oMediaSourceBuffer.addEventListener('updateend', Добавлено);
			let чПрошлоВремени = -performance.now();
			_oMediaSourceBuffer.appendBuffer(мбДобавить);
			function Добавлено() {
				try {
					if (_oMediaSourceBuffer === null) {
						фОтказаться(ОтменаОбещания.ПРИЧИНА);
					} else {
						чПрошлоВремени += performance.now();
						_oMediaSourceBuffer.removeEventListener('updateend', Добавлено);
						ПоказатьСостояние(чПрошлоВремени > 100 ? 'Ой' : 'Вот', `Добавлен ${сДобавить} ${оСегмент.чНомер} за ${м_Журнал.F0(чПрошлоВремени)}мс`);
						фВыполнить(оСегмент);
					}
				} catch (пИсключение) {
					фОтказаться(пИсключение);
				}
			}
		});
	}
	function ПроверитьИсчерпаниеБуфера(оСегмент) {
		if (!_oMediaElement.seeking && !_oMediaElement.paused && !_oMediaElement.ended) {
			ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ, оСегмент.чДлительность);
		}
		if (_oMediaElement.played.length !== 0) {
			м_Статистика.обновитьЗаполненностьБуфера(ПолучитьЗаполненностьБуфера().чНеПросмотрено);
		}
		return оСегмент;
	}
	function СегментБылДобавлен(оСегмент) {
		_лАсинхроннаяОперация = false;
		г_моОчередь.Удалить(оСегмент);
		РасчитатьСмещениеТрансляции(оСегмент);
		if (!(г_моОчередь[0] && г_моОчередь[0].пДанные === СОСТОЯНИЕ_ПОВТОР)) {
			const чПроверка = ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА);
			if (!(г_моОчередь[0] && г_моОчередь[0].чОбработка === ОБРАБОТКА_ПРЕОБРАЗОВАН)) {
				НачатьВоспроизведение(чПроверка);
				ПоказатьЗадержкуТрансляции(оСегмент);
			}
		}
		ДобавитьСледующийСегмент();
	}
	const СегментНеБылДобавлен = ДобавитьОбработчикИсключений(пПричина => {
		_лАсинхроннаяОперация = false;
		if (пПричина === 'ДОБАВЛЕНИЕ СЕГМЕНТА ОТЛОЖЕНО') {
			return;
		}
		if (пПричина === ОтменаОбещания.ПРИЧИНА) {
			м_Журнал.Вот('[Проигрыватель] Отменено добавление сегмента');
		} else {
			throw пПричина;
		}
	});
	function ПредотвратитьПереполнениеОчереди() {
		const {чДлительность} = г_моОчередь.ПодсчитатьПреобразованныеСегменты();
		if (чДлительность >= ПЕРЕПОЛНЕНИЕ_БУФЕРА) {
			м_Журнал.Ой(`[Проигрыватель] MediaSource закрыт слишком долго ${чДлительность}с >= ${ПЕРЕПОЛНЕНИЕ_БУФЕРА}с`);
			Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ЗАПУСК || м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ);
			м_Управление.ОстановитьПросмотрТрансляции();
		}
	}
	function НайтиИОбработатьСменуВариантаТрансляции() {
		for (let ы = г_моОчередь.length; --ы >= 0; ) {
			if (г_моОчередь[ы].пДанные === СОСТОЯНИЕ_СМЕНА_ВАРИАНТА && г_моОчередь[ы].чОбработка === ОБРАБОТКА_ПРЕОБРАЗОВАН) {
				г_моОчередь.ПоказатьСостояние();
				do {
					if (г_моОчередь[ы].пДанные === СОСТОЯНИЕ_СМЕНА_ВАРИАНТА || typeof г_моОчередь[ы].пДанные != 'number') {
						г_моОчередь.Удалить(ы);
					}
				} while (--ы >= 0);
				г_моОчередь.ПоказатьСостояние();
				ПерезагрузитьИЖдатьЗаполненияБуфера(СОСТОЯНИЕ_ЗАГРУЗКА);
				break;
			}
		}
	}
	function ДобавитьСледующийСегмент() {
		СледитьЗаОшибками();
		НайтиИОбработатьСменуВариантаТрансляции();
		const оСегмент = г_моОчередь[0];
		if (!оСегмент || оСегмент.чОбработка !== ОБРАБОТКА_ПРЕОБРАЗОВАН) {
			return;
		}
		Проверить(_оПоведение === _оПрямаяТрансляция);
		if (оСегмент.пДанные === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ) {
			Проверить(_oMediaSource.sourceBuffers.length === 0);
			_чСмещениеТрансляции = NaN;
			м_Управление.ИзменитьСостояние(оСегмент.пДанные);
			г_моОчередь.Удалить(0);
			ДобавитьСледующийСегмент();
			return;
		}
		if (_лАсинхроннаяОперация) {
			return;
		}
		if (оСегмент.пДанные === СОСТОЯНИЕ_ПОВТОР) {
			Проверить(м_Управление.ПолучитьСостояние() !== СОСТОЯНИЕ_ОСТАНОВКА && м_Управление.ПолучитьСостояние() !== СОСТОЯНИЕ_ПОВТОР);
			ЗапуститьПовтор();
			г_моОчередь.Удалить(0);
			ДобавитьСледующийСегмент();
			return;
		}
		const сГотовность = _oMediaSource.readyState;
		if (сГотовность !== 'open') {
			м_Журнал.Вот(`[Проигрыватель] Добавление сегмента ${оСегмент.чНомер} отложено MediaSource.readyState=${сГотовность} MediaElement.src=${_oMediaElement.src}`);
			if (сГотовность === 'closed' && _чВоспроизведениеНачиналось === 0) {
				ПредотвратитьПереполнениеОчереди();
			}
			return;
		}
		if (оСегмент.лРазрыв && _oMediaSource.sourceBuffers.length !== 0) {
			ЗавершитьПоток(оСегмент);
			return;
		}
		if (оСегмент.пДанные === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ) {
			Проверить(оСегмент.лРазрыв && _oMediaSource.sourceBuffers.length === 0);
			м_Управление.ИзменитьСостояние(оСегмент.пДанные);
			г_моОчередь.Удалить(0);
			ДобавитьСледующийСегмент();
			return;
		}
		if (_oMediaSource.sourceBuffers.length === 0) {
			ДобавитьБуферы(оСегмент);
			м_Управление.ОбновитьКоличествоДорожек(оСегмент.пДанные.лЕстьВидео, оСегмент.пДанные.лЕстьЗвук);
		}
		_лАсинхроннаяОперация = true;
		let оОбещание = УдалитьПросмотренноеВидео(оСегмент).then(ПроверитьИсчерпаниеБуфера);
		if (оСегмент.пДанные.мбСегментИнициализации) {
			оОбещание = оОбещание.then(ДобавитьСегментИнициализации);
		}
		оОбещание.then(ДобавитьМедиасегмент).then(СегментБылДобавлен).catch(СегментНеБылДобавлен);
	}
	function ПеремотатьПовторДо(чПеремотатьДо) {
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		_оПовтор.ПроверитьПозициюВоспроизведения(чПеремотатьДо);
	}
	function ПеремотатьПовторНа(лКадры, чПеремотатьНа) {
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		Проверить(Number.isFinite(чПеремотатьНа));
		if (лКадры) {
			чПеремотатьНа *= м_Статистика.ПолучитьДлительностьКадраВСекундах().чМинимальная;
		}
		if (чПеремотатьНа !== 0) {
			ПеремотатьПовторДо(Ограничить(_oMediaElement.currentTime + чПеремотатьНа, м_Шкала.ПолучитьНачало(), м_Шкала.ПолучитьКонец()));
		}
	}
	function ПереключитьПаузу() {
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		if (_оПовтор.лПауза = !_оПовтор.лПауза) {
			м_Журнал.Окак('[Проигрыватель] Ставлю повтор на паузу');
			_oMediaElement.pause();
		} else {
			м_Журнал.Окак('[Проигрыватель] Снимаю повтор с паузы');
			_оПовтор.ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ);
			_oMediaElement.play();
		}
		м_События.ПослатьСобытие('проигрыватель-пауза', _оПовтор.лПауза);
	}
	function ЗадатьСкоростьПовтора(чСкорость) {
		Проверить(чСкорость > 0);
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		м_Журнал.Окак(`[Проигрыватель] Задана скорость ${чСкорость}`);
		_oMediaElement.playbackRate = чСкорость;
	}
	function ЗапуститьПовтор() {
		_оПовтор.лПауза = true;
		_оПоведение = _оПовтор;
		ОстановитьВоспроизведение();
		if (_oMediaSource.sourceBuffers.length !== 0 && _oMediaSource.readyState === 'open') {
			_oMediaSource.endOfStream();
		}
		if (_oMediaElement.played.length === 0 || ПолучитьЗаполненностьБуфера().чПросмотрено < ПОВТОР_ДОСТУПЕН_ЕСЛИ_ПРОСМОТРЕНО) {
			ПоказатьСостояние('Окак', 'Повторять нечего');
			м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_ОСТАНОВКА);
			return;
		}
		ПоказатьСостояние('Окак', 'Запуск повтора');
		м_События.ПослатьСобытие('проигрыватель-пауза', _оПовтор.лПауза);
		м_Шкала.ЗадатьНачалоИКонец(_oMediaElement.buffered.start(0), _oMediaElement.buffered.end(_oMediaElement.buffered.length - 1));
		м_Шкала.ЗадатьПросмотрено(_oMediaElement.currentTime);
		м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_ПОВТОР);
		ЗадатьСкоростьПовтора(м_Управление.получитьСкоростьПовтора());
	}
	function ДобавитьБуферы(оСегмент) {
		м_Журнал.Окак(`[Проигрыватель] Добавляю буфер ${оСегмент.пДанные.сКодеки}`);
		Проверить(оСегмент.лРазрыв && оСегмент.пДанные.сКодеки);
		try {
			_oMediaSourceBuffer = _oMediaSource.addSourceBuffer(оСегмент.пДанные.сКодеки);
		} catch (пИсключение) {
			if (ЭтоОбъект(пИсключение) && пИсключение.name === 'NotSupportedError') {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0201');
			} else {
				м_Отладка.ПойманоИсключение(пИсключение);
			}
		}
		_лЕстьВидеодорожка = оСегмент.пДанные.лЕстьВидео;
		_oMediaSourceBuffer.addEventListener('updatestart', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('update', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('updateend', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('abort', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('error', СледитьЗаСобытиямиMediaSource);
	}
	function подключитьMediaSourceКMediaElement() {
		if (_oMediaElement.src) {
			URL.revokeObjectURL(_oMediaElement.src);
		}
		_oMediaElement.src = URL.createObjectURL(_oMediaSource);
		м_Аудиоустройство.запустить(_oMediaElement);
	}
	function Запустить() {
		Проверить(!_oMediaElement);
		try {
			_oMediaSource = new MediaSource();
		} catch (пИсключение) {
			console.error(`MediaSource ${пИсключение}`);
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0221');
		}
		_oMediaSource.addEventListener('sourceopen', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.addEventListener('sourceended', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.addEventListener('sourceclose', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.sourceBuffers.addEventListener('addsourcebuffer', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.sourceBuffers.addEventListener('removesourcebuffer', СледитьЗаСобытиямиMediaSource);
		_oMediaElement = document.getElementById('глаз');
		ПрименитьГромкость();
		м_КартинкаВКартинке.запустить(_oMediaElement);
		for (let сСобытие of [ 'progress', 'error', 'playing', 'seeking', 'seeked', 'ended', 'timeupdate', 'waiting', 'loadstart', 'suspend', 'abort', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'durationchange', 'play', 'pause', 'ratechange', 'resize' ]) {
			_oMediaElement.addEventListener(сСобытие, СледитьЗаСобытиямиMediaElement);
		}
		подключитьMediaSourceКMediaElement();
		return true;
	}
	function Остановить() {
		if (_oMediaElement) {
			URL.revokeObjectURL(_oMediaElement.src);
			_oMediaElement.removeAttribute('src');
			_oMediaElement.load();
		}
	}
	return {
		Запустить,
		Остановить,
		ПолучитьЗаполненностьБуфера,
		ПолучитьКоличествоПропущенныхКадров,
		ПолучитьПозициюВоспроизведенияТрансляции,
		ПоказатьСостояние,
		Перезагрузить: ПерезагрузитьИЖдатьЗаполненияБуфера,
		ПрименитьГромкость,
		ДобавитьСледующийСегмент,
		ПеремотатьПовторДо,
		ПеремотатьПовторНа,
		ПереключитьПаузу,
		ЗадатьСкоростьПовтора
	};
})();

const м_Список = (() => {
	const ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_С_РЕКЛАМОЙ = 2e3;
	const МИН_ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКОВ = 500;
	class ОбновлениеСписков {
		constructor(лБезРекламы) {
			this._лБезРекламы = лБезРекламы;
			this._оОтменаОбещания = null;
			this.очистить();
		}
		очистить() {
			this.оСписокВариантов = null;
			this.оСписокСегментов = null;
			this.оВыбранныйВариант = null;
		}
		запустить() {
			Проверить(!this._оОтменаОбещания);
			this._оОтменаОбещания = new ОтменаОбещания();
			this._обновить(this._оОтменаОбещания, -Infinity);
		}
		остановить() {
			if (this._оОтменаОбещания) {
				м_Журнал.Вот(`[Список] Останавливаю обновление списков ${+this._лБезРекламы}`);
				this._оОтменаОбещания.Отменить();
				this._оОтменаОбещания = null;
			}
		}
		сохранитьВариантТрансляции(оВариант) {
			м_Настройки.Изменить('сНазваниеВарианта', оВариант.сИдентификатор);
			м_Настройки.Изменить('чБитрейтВарианта', оВариант.чБитрейт);
		}
		выбратьВариантТрансляции(моВарианты) {
			const сСохраненныйИд = м_Настройки.Получить('сНазваниеВарианта');
			const чСохраненныйБитрейт = м_Настройки.Получить('чБитрейтВарианта');
			let оВыбранныйВариант = моВарианты.find(({сИдентификатор}) => сИдентификатор === сСохраненныйИд);
			if (!оВыбранныйВариант) {
				if (сСохраненныйИд === 'chunked' || сСохраненныйИд === 'audio_only') {
					оВыбранныйВариант = моВарианты[0];
				} else {
					оВыбранныйВариант = моВарианты.find(({сИдентификатор, чБитрейт}) => сИдентификатор !== 'audio_only' && чБитрейт <= чСохраненныйБитрейт);
					if (!оВыбранныйВариант) {
						оВыбранныйВариант = моВарианты.reduceRight((оРезультат, оВариант) => оРезультат.сИдентификатор === 'audio_only' ? оВариант : оРезультат);
					}
				}
			}
			м_Журнал.Вот(`[Список] Для списка ${+this._лБезРекламы} выбран вариант трансляции ${оВыбранныйВариант.сИдентификатор}/${оВыбранныйВариант.чБитрейт}. Сохраненный ${сСохраненныйИд}/${чСохраненныйБитрейт}`);
			return оВыбранныйВариант;
		}
		_обновить(оОтменаОбещания, чЧерез) {
			Проверить(ЭтоЧисло(чЧерез));
			if (чЧерез >= МИН_ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКОВ || чЧерез === -Infinity) {
				м_Журнал.Вот(`[Список] Обновление списков ${+this._лБезРекламы} начнется через ${м_Журнал.F0(чЧерез)}мс`);
			} else {
				м_Журнал.Ой(`[Список] Обновление списков ${+this._лБезРекламы} начнется через ${МИН_ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКОВ}мс вместо ${м_Журнал.F0(чЧерез)}мс`);
				чЧерез = МИН_ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКОВ;
			}
			let оОбещание = Ждать(оОтменаОбещания, чЧерез);
			let {оСписокВариантов, оВыбранныйВариант} = this;
			if (оСписокВариантов === null) {
				let сАбсолютныйАдресСпискаВариантов;
				оОбещание = оОбещание.then(() => м_Twitch.ПолучитьАбсолютныйАдресСпискаВариантов(оОтменаОбещания, false, this._лБезРекламы)).then(сРезультат => {
					сАбсолютныйАдресСпискаВариантов = сРезультат;
					return м_Загрузчик.ЗагрузитьТекст(оОтменаОбещания, сАбсолютныйАдресСпискаВариантов, ЗАГРУЖАТЬ_СПИСОК_ВАРИАНТОВ_НЕ_ДОЛЬШЕ, `список вариантов ${+this._лБезРекламы}`, false);
				}).then(сРезультат => {
					м_Отладка.СохранитьСписокВариантов(сРезультат);
					оСписокВариантов = РазобратьСписок(true, сАбсолютныйАдресСпискаВариантов, сРезультат);
					if (оСписокВариантов.моВарианты.length === 0) {
						throw `Список вариантов пуст`;
					}
				});
			}
			let чНачалоОбновления;
			оОбещание.then(() => {
				if (оВыбранныйВариант === null) {
					оВыбранныйВариант = this.выбратьВариантТрансляции(оСписокВариантов.моВарианты);
				}
				чНачалоОбновления = performance.now();
				return м_Загрузчик.ЗагрузитьТекст(оОтменаОбещания, оВыбранныйВариант.сАбсолютныйАдресСпискаСегментов, ЗАГРУЖАТЬ_СПИСОК_СЕГМЕНТОВ_НЕ_ДОЛЬШЕ, `список сегментов ${+this._лБезРекламы}`, false);
			}).then(сРезультат => {
				м_Отладка.СохранитьСписокСегментов(сРезультат);
				const оСписокСегментов = РазобратьСписок(false, оВыбранныйВариант.сАбсолютныйАдресСпискаСегментов, сРезультат);
				let чИнтервалОбновления;
				if (this._этоТухлыйСписокСегментов(оСписокВариантов, оСписокСегментов, оВыбранныйВариант)) {
					м_Статистика.ДобавленыСегментыВОчередь(0, 0);
					if (оСписокСегментов.лКонецСписка) {
						throw 'КОНЕЦ_СПИСКА';
					}
					чИнтервалОбновления = ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_С_РЕКЛАМОЙ;
				} else {
					const лУкороченныйИнтервал = чЧерез === -Infinity || this.оСписокВариантов === null;
					this.оСписокВариантов = оСписокВариантов;
					this.оСписокСегментов = оСписокСегментов;
					this.оВыбранныйВариант = оВыбранныйВариант;
					чИнтервалОбновления = this._обновленСписокСегментов(лУкороченныйИнтервал);
				}
				this._обновить(оОтменаОбещания, чНачалоОбновления + чИнтервалОбновления - performance.now());
				м_Загрузчик.ЗагрузитьСледующийСегмент();
			}).catch(ДобавитьОбработчикИсключений(пПричина => {
				if (typeof пПричина == 'string') {
					this._списокНеОбновлен(оОтменаОбещания, пПричина);
					м_Загрузчик.ЗагрузитьСледующийСегмент();
				} else if (пПричина === ОтменаОбещания.ПРИЧИНА) {
					м_Журнал.Вот(`[Список] Отменено обновление списков ${+this._лБезРекламы}`);
				} else {
					throw пПричина;
				}
			}));
		}
		_этоТухлыйСписокСегментов(оСписокВариантов, оСписокСегментов, оВыбранныйВариант) {
			const ПОРОГ_СМЕНЫ_СЕССИИ = 5;
			Проверить(this.оСписокВариантов === null == (this.оСписокСегментов === null));
			if (оСписокСегментов.моСегменты.length === 0) {
				м_Журнал.Ой(`[Список] Список сегментов ${+this._лБезРекламы} пуст`);
				return true;
			}
			if (this.оСписокСегментов === null) {
				return false;
			}
			Проверить(!(this.оСписокВариантов.сИдТрансляции !== оСписокВариантов.сИдТрансляции && this.оСписокВариантов.чИдСессии === оСписокВариантов.чИдСессии));
			if (this.оСписокСегментов.nTargetDuration !== оСписокСегментов.nTargetDuration) {
				м_Журнал.Ой(`[Список] В списке ${+this._лБезРекламы} изменился target duration ${this.оСписокСегментов.nTargetDuration} ==> ${оСписокСегментов.nTargetDuration}`);
			}
			if (this.оВыбранныйВариант !== null) {
				const чРазница = оСписокСегментов.чПорядковыйНомер - this.оСписокСегментов.чПорядковыйНомер;
				const чНачало = Math.max(-чРазница, 0);
				const чКонец = Math.min(this.оСписокСегментов.моСегменты.length - чРазница, оСписокСегментов.моСегменты.length);
				for (let чНовый = чНачало, чСтарый = чНачало + чРазница; чНовый < чКонец; чНовый++, чСтарый++) {
					if (оСписокСегментов.моСегменты[чНовый].сАдрес !== this.оСписокСегментов.моСегменты[чСтарый].сАдрес) {
						м_Журнал.Ой(`[Список] В списке ${+this._лБезРекламы} у сегмента ${оСписокСегментов.чПорядковыйНомер + чНовый} изменился адрес ${ОграничитьДлинуСтроки(this.оСписокСегментов.моСегменты[чСтарый].сАдрес, 100)} ==> ${ОграничитьДлинуСтроки(оСписокСегментов.моСегменты[чНовый].сАдрес, 100)}`);
						оСписокСегментов.лХаос = true;
						break;
					}
				}
			}
			const чРазница = this.оСписокСегментов.чПорядковыйНомер + this.оСписокСегментов.моСегменты.length - оСписокСегментов.чПорядковыйНомер - оСписокСегментов.моСегменты.length;
			if (чРазница > 0) {
				if (this.оВыбранныйВариант === null && чРазница <= ПОРОГ_СМЕНЫ_СЕССИИ) {
					м_Журнал.Ой(`[Список] При переключении варианта в списке ${+this._лБезРекламы} уменьшился порядковый номер ${this.оСписокСегментов.чПорядковыйНомер} + ${this.оСписокСегментов.моСегменты.length} ==> ${оСписокСегментов.чПорядковыйНомер} + ${оСписокСегментов.моСегменты.length}`);
					return false;
				}
				if (оСписокСегментов.чПорядковыйНомер === 0 || чРазница > ПОРОГ_СМЕНЫ_СЕССИИ) {
					м_Журнал.Ой(`[Список] Меняю ИдСессии: в списке ${+this._лБезРекламы} уменьшился порядковый номер ${this.оСписокСегментов.чПорядковыйНомер} + ${this.оСписокСегментов.моСегменты.length} ==> ${оСписокСегментов.чПорядковыйНомер} + ${оСписокСегментов.моСегменты.length}`);
					оСписокВариантов.чИдСессии = _чИдСессии++;
					return false;
				}
				м_Журнал.Ой(`[Список] Получен протухший список ${+this._лБезРекламы}: порядковый номер ${this.оСписокСегментов.чПорядковыйНомер} + ${this.оСписокСегментов.моСегменты.length} ==> ${оСписокСегментов.чПорядковыйНомер} + ${оСписокСегментов.моСегменты.length}`);
				return true;
			}
			if (this.оСписокСегментов.чПорядковыйНомер > оСписокСегментов.чПорядковыйНомер) {
				м_Журнал.Ой(`[Список] В списке ${+this._лБезРекламы} уменьшился порядковый номер ${this.оСписокСегментов.чПорядковыйНомер} ==> ${оСписокСегментов.чПорядковыйНомер}`);
			}
			return false;
		}
	}
	class ОбновлениеСписковСРекламой extends ОбновлениеСписков {
		constructor() {
			super(false);
		}
		_обновленСписокСегментов(лУкороченныйИнтервал) {
			const лСписокЗаканчиваетсяРекламой = этотСписокЗаканчиваетсяРекламой(this.оСписокСегментов);
			м_Twitch.отправитьДанныеСлеженияЗаРекламой(лСписокЗаканчиваетсяРекламой ? this.оСписокСегментов : null);
			if (!_лИдетРеклама || !лСписокЗаканчиваетсяРекламой) {
				лУкороченныйИнтервал = ДобавитьСегментыВОчередь(this.оСписокВариантов, this.оСписокСегментов, this.оВыбранныйВариант) || лУкороченныйИнтервал;
			}
			if (this.оСписокСегментов.лКонецСписка) {
				throw 'КОНЕЦ_СПИСКА';
			}
			задатьСостояниеРекламы(лСписокЗаканчиваетсяРекламой);
			return лСписокЗаканчиваетсяРекламой ? ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_С_РЕКЛАМОЙ : получитьИнтервалОбновленияСпискаСегментов(this.оСписокСегментов, лУкороченныйИнтервал);
		}
		_списокНеОбновлен(оОтменаОбещания, сПричина) {
			if (сПричина === 'ОТКАЗАНО_В_ДОСТУПЕ') {
				м_Управление.ОстановитьПросмотрТрансляции();
				м_Уведомление.ПоказатьЖопу();
			} else {
				м_Журнал[сПричина === 'КОНЕЦ_СПИСКА' ? 'Окак' : 'Ой'](`[Список] Трансляция завершена. ${сПричина}`);
				ЗавершитьТрансляцию();
				this._обновить(оОтменаОбещания, получитьИнтервалОбновленияСпискаВариантов());
			}
		}
	}
	class ОбновлениеСписковБезРекламы extends ОбновлениеСписков {
		constructor() {
			super(true);
		}
		остановить() {
			super.остановить();
			this.очистить();
		}
		_обновленСписокСегментов(лУкороченныйИнтервал) {
			if (этотСписокЗаканчиваетсяРекламой(this.оСписокСегментов)) {
				throw 'Найдена реклама';
			}
			лУкороченныйИнтервал = ДобавитьСегментыВОчередь(this.оСписокВариантов, this.оСписокСегментов, this.оВыбранныйВариант) || лУкороченныйИнтервал;
			if (this.оСписокСегментов.лКонецСписка) {
				throw 'КОНЕЦ_СПИСКА';
			}
			return получитьИнтервалОбновленияСпискаСегментов(this.оСписокСегментов, лУкороченныйИнтервал);
		}
		_списокНеОбновлен(оОтменаОбещания, сПричина) {
			м_Журнал.Ой(`[Список] Список 1 не обновлен. ${сПричина}`);
			this.остановить();
		}
	}
	const _оСпискиСРекламой = new ОбновлениеСписковСРекламой();
	const _оСпискиБезРекламы = new ОбновлениеСписковБезРекламы();
	let _чСостояние = СОСТОЯНИЕ_ОСТАНОВКА;
	let _лИдетРеклама = false;
	let _чИнтервалОбновленияСпискаВариантов = -1;
	let _чИдСессии = 1;
	function РазобратьСписок(лЭтоСписокВариантов, сАбсолютныйАдресСписка, сРазбираемыйСписок) {
		const МАКС_ПОДДЕРЖИВАЕМАЯ_ВЕРСИЯ_HLS = 7;
		if (сРазбираемыйСписок.includes('shelblock.proxy')) {
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0220');
		}
		if (!сРазбираемыйСписок.startsWith('#EXTM3U')) {
			throw `Вместо списка загружена какая-то фигня длиною ${сРазбираемыйСписок.length}\n${сРазбираемыйСписок}`;
		}
		let чВерсия = 1;
		let mapRenditionGroups, моВарианты, оНовыйВариант, сИдТрансляции, сАдресСлеженияЗаПросмотром;
		let nTargetDuration, чПорядковыйНомер, лКонецСписка, кРекламныхСегментов, сТипРекламы, кРоликов, чНомерРолика, чПродолжительностьРолика, сТокенРекламы, сИдРолика1, сИдРолика2, сИдРолика3, сИдРолика4, сИдРолика5, сИдРолика6, чНомерКвартеля, моСегменты, оНовыйСегмент;
		let лРазрыв, чВремя;
		if (лЭтоСписокВариантов) {
			mapRenditionGroups = new Map();
			моВарианты = [];
			оНовыйВариант = null;
			сИдТрансляции = '';
			сАдресСлеженияЗаПросмотром = '';
		} else {
			nTargetDuration = -1;
			чПорядковыйНомер = 0;
			лКонецСписка = false;
			кРекламныхСегментов = 0;
			сТипРекламы = '';
			моСегменты = [];
			оНовыйСегмент = null;
			лРазрыв = false;
			чВремя = NaN;
		}
		const рвТегИлиАдрес = /^#EXT([^:\r\n]+)(?::(.*))?$|^[^#\r\n].*$/gm;
		рвТегИлиАдрес.lastIndex = 7;
		for (let мсТегИлиАдрес; мсТегИлиАдрес = рвТегИлиАдрес.exec(сРазбираемыйСписок); ) {
			const [сАдрес, сНазваниеТега = '', сЗначениеТега = ''] = мсТегИлиАдрес;
			try {
				switch (сНазваниеТега) {
				  case '':
					if (лЭтоСписокВариантов) {
						Проверить(оНовыйВариант !== null);
						оНовыйВариант.сАбсолютныйАдресСпискаСегментов = ResolveRelativeUrl(сАдрес, сАбсолютныйАдресСписка);
						моВарианты.push(оНовыйВариант);
						оНовыйВариант = null;
					} else {
						браковать(оНовыйСегмент !== null);
						оНовыйСегмент.сАдрес = ResolveRelativeUrl(сАдрес, сАбсолютныйАдресСписка);
						оНовыйСегмент.лРазрыв = лРазрыв;
						моСегменты.push(оНовыйСегмент);
						лРазрыв = false;
						кРекламныхСегментов += Boolean(оНовыйСегмент.лРеклама);
						оНовыйСегмент = null;
					}
					break;

				  case 'INF':
					{
						Проверить(!лЭтоСписокВариантов);
						Проверить(nTargetDuration !== -1);
						Проверить(оНовыйСегмент === null);
						оНовыйСегмент = Object.create(null);
						const {чДлительность, сИмяСегмента} = разобратьEXTINF(сЗначениеТега);
						оНовыйСегмент.чДлительность = чДлительность;
						оНовыйСегмент.лРеклама = м_Twitch.этоРекламныйСегмент(сИмяСегмента);
						if (оНовыйСегмент.лРеклама) {
							чВремя = NaN;
						}
						оНовыйСегмент.чВремя = чВремя;
						чВремя++;
						if (оНовыйСегмент.чДлительность < 0) {
							м_Журнал.Ой(`[Список] У сегмента ${чПорядковыйНомер + моСегменты.length} отрицательная длительность ${сЗначениеТега}`);
							оНовыйСегмент.чДлительность = 0;
						}
						if (Math.round(оНовыйСегмент.чДлительность) > nTargetDuration) {
							м_Журнал.Ой(`[Список] Длительность сегмента ${чПорядковыйНомер + моСегменты.length} больше target duration на ${оНовыйСегмент.чДлительность - nTargetDuration}с`);
							if (оНовыйСегмент.чДлительность > nTargetDuration * 3) {
								оНовыйСегмент.чДлительность = 0;
							}
						}
						break;
					}

				  case '-X-DISCONTINUITY':
					Проверить(!лЭтоСписокВариантов);
					Проверить(!сЗначениеТега);
					лРазрыв = true;
					break;

				  case '-X-PROGRAM-DATE-TIME':
					Проверить(!лЭтоСписокВариантов);
					break;

				  case '-X-KEY':
				  case '-X-MAP':
					Проверить(!лЭтоСписокВариантов);
					м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0219', 'J0731', м_Twitch.ПолучитьАдресКанала(true));
					break;

				  case '-X-BYTERANGE':
				  case '-X-GAP':
					Проверить(false);
					break;

				  case '-X-TARGETDURATION':
					Проверить(!лЭтоСписокВариантов);
					Проверить(nTargetDuration === -1);
					nTargetDuration = РазобратьЦелоеПоложительноеЧисло(сЗначениеТега);
					Проверить(nTargetDuration > 0 && nTargetDuration < 60);
					break;

				  case '-X-MEDIA-SEQUENCE':
					Проверить(!лЭтоСписокВариантов);
					Проверить(чПорядковыйНомер === 0);
					чПорядковыйНомер = РазобратьЦелоеПоложительноеЧисло(сЗначениеТега);
					break;

				  case '-X-ENDLIST':
					Проверить(!лЭтоСписокВариантов);
					Проверить(!сЗначениеТега);
					лКонецСписка = true;
					break;

				  case '-X-DISCONTINUITY-SEQUENCE':
					Проверить(!лЭтоСписокВариантов);
					break;

				  case '-X-PLAYLIST-TYPE':
				  case '-X-I-FRAMES-ONLY':
					Проверить(false);
					break;

				  case '-X-TWITCH-LIVE-SEQUENCE':
					Проверить(!лЭтоСписокВариантов);
					чВремя = РазобратьЦелоеПоложительноеЧисло(сЗначениеТега);
					break;

				  case '-X-DATERANGE':
					{
						Проверить(!лЭтоСписокВариантов);
						const амАтрибуты = РазобратьСписокАтрибутов(сЗначениеТега);
						try {
							switch (амАтрибуты.get('CLASS')) {
							  case 'twitch-stitched-ad':
								сТипРекламы = амАтрибуты.get('X-TV-TWITCH-AD-ROLL-TYPE');
								кРоликов = РазобратьЦелоеПоложительноеЧисло(амАтрибуты.get('X-TV-TWITCH-AD-POD-LENGTH'));
								чНомерРолика = РазобратьЦелоеПоложительноеЧисло(амАтрибуты.get('X-TV-TWITCH-AD-POD-POSITION'));
								чПродолжительностьРолика = РазобратьПоложительноеЧисло(амАтрибуты.get('DURATION') || '0');
								сТокенРекламы = амАтрибуты.get('X-TV-TWITCH-AD-RADS-TOKEN') || '';
								сИдРолика1 = амАтрибуты.get('X-TV-TWITCH-AD-ADVERTISER-ID') || '';
								сИдРолика2 = амАтрибуты.get('X-TV-TWITCH-AD-CREATIVE-ID') || '';
								сИдРолика3 = амАтрибуты.get('X-TV-TWITCH-AD-LINE-ITEM-ID') || '';
								сИдРолика4 = амАтрибуты.get('X-TV-TWITCH-AD-ORDER-ID') || '';
								сИдРолика5 = амАтрибуты.get('X-TV-TWITCH-AD-AD-SESSION-ID') || '';
								сИдРолика6 = амАтрибуты.get('X-TV-TWITCH-AD-AD-FORMAT') || '';
								Проверить(сТипРекламы);
							}
						} catch (пИсключение) {
							сТипРекламы = '';
							м_Журнал.Ой(`[Список] Ошибка разбора рекламы: ${сЗначениеТега}`);
						}
						break;
					}

				  case '-X-MEDIA':
					{
						Проверить(лЭтоСписокВариантов);
						const амАтрибуты = РазобратьСписокАтрибутов(сЗначениеТега);
						const сТип = амАтрибуты.get('TYPE');
						Проверить(сТип);
						Проверить(сТип !== 'VIDEO' && сТип !== 'AUDIO' || !амАтрибуты.has('URI'));
						if (сТип === 'VIDEO') {
							const сГруппа = амАтрибуты.get('GROUP-ID');
							const сИмя = амАтрибуты.get('NAME');
							Проверить(сГруппа && сИмя);
							Проверить(!mapRenditionGroups.has(сГруппа));
							mapRenditionGroups.set(сГруппа, сИмя);
						} else {
							м_Журнал.Ой(`[Список] Найден #EXT-X-MEDIA TYPE=${сТип}`);
						}
						break;
					}

				  case '-X-STREAM-INF':
					{
						Проверить(лЭтоСписокВариантов);
						Проверить(оНовыйВариант === null);
						оНовыйВариант = Object.create(null);
						const амАтрибуты = РазобратьСписокАтрибутов(сЗначениеТега);
						оНовыйВариант.чБитрейт = РазобратьЦелоеПоложительноеЧисло(амАтрибуты.get('BANDWIDTH'));
						Проверить(!амАтрибуты.has('AUDIO') && !амАтрибуты.has('SUBTITLES') && !амАтрибуты.has('CLOSED-CAPTIONS'));
						оНовыйВариант.сИдентификатор = амАтрибуты.get('VIDEO') || '';
						break;
					}

				  case '-X-I-FRAME-STREAM-INF':
				  case '-X-SESSION-DATA':
				  case '-X-SESSION-KEY':
					Проверить(лЭтоСписокВариантов);
					break;

				  case '-X-TWITCH-INFO':
					{
						Проверить(лЭтоСписокВариантов);
						const амАтрибуты = РазобратьСписокАтрибутов(сЗначениеТега);
						const чСекунды = РазобратьПоложительноеЧисло(амАтрибуты.get('SERVER-TIME'));
						Проверить(чСекунды > 1531267200 && чСекунды < 1846886400);
						const чМиллисекунды = чСекунды * 1e3 + 50;
						г_чТочноеВремя = чМиллисекунды - performance.now();
						const чРассинхронизацияВремени = чМиллисекунды - Date.now();
						сИдТрансляции = амАтрибуты.get('BROADCAST-ID');
						Проверить(сИдТрансляции);
						try {
							const сАдрес = atob(амАтрибуты.get('C'));
							Проверить(сАдрес.startsWith('https://'));
							сАдресСлеженияЗаПросмотром = сАдрес;
						} catch (пИсключение) {
							м_Журнал.Ой(`[Список] Не удалось разобрать адрес слежения за просмотром: ${пИсключение}`);
						}
						м_Журнал[Math.abs(чРассинхронизацияВремени) > 5e3 ? 'Ой' : 'Окак'](`[Список] РассинхронизацияВремени=${чРассинхронизацияВремени}мс ИдТрансляции=${сИдТрансляции}`);
						break;
					}

				  case '-X-VERSION':
					Проверить(чВерсия === 1);
					чВерсия = РазобратьЦелоеПоложительноеЧисло(сЗначениеТега);
					Проверить(чВерсия >= 2 && чВерсия <= МАКС_ПОДДЕРЖИВАЕМАЯ_ВЕРСИЯ_HLS);
					break;

				  case '-X-START':
					м_Журнал.Ой(`[Список] Найден #EXT-X-START=${сЗначениеТега}`);
					break;

				  case 'M3U':
				  case '-X-DEFINE':
					Проверить(false);
				}
			} catch (пИсключение) {
				if (пИсключение instanceof Error && пИсключение.message === 'БРАКОВАТЬ') {
					throw `Ошибка разбора строки списка:\n${ПеревестиИсключениеВСтроку(пИсключение)}\n${сАдрес}`;
				}
			}
		}
		if (лЭтоСписокВариантов) {
			Проверить(оНовыйВариант === null);
			for (let оВариант of моВарианты) {
				if (оВариант.сИдентификатор) {
					Проверить(mapRenditionGroups.has(оВариант.сИдентификатор));
					оВариант.сНазвание = mapRenditionGroups.get(оВариант.сИдентификатор);
				} else {
					оВариант.сИдентификатор = `CoolCmd${оВариант.чБитрейт}`;
					оВариант.сНазвание = `${м_i18n.ФорматироватьЧисло(оВариант.чБитрейт / 1e6, 1)} ${Текст('J0114')}`;
				}
			}
			м_Журнал.Вот(`[Список] Количество вариантов в списке: ${моВарианты.length}`);
			return м_Twitch.сортироватьСписокВариантов({
				сИдТрансляции,
				чИдСессии: _чИдСессии++,
				сАдресСлеженияЗаПросмотром,
				моВарианты
			});
		} else {
			Проверить(оНовыйСегмент === null);
			Проверить(nTargetDuration !== -1);
			const оСписокСегментов = {
				nTargetDuration,
				чПорядковыйНомер,
				лКонецСписка,
				лХаос: false,
				кРекламныхСегментов,
				сТипРекламы,
				кРоликов,
				чНомерРолика,
				чПродолжительностьРолика,
				сТокенРекламы,
				сИдРолика1,
				сИдРолика2,
				сИдРолика3,
				сИдРолика4,
				сИдРолика5,
				сИдРолика6,
				моСегменты
			};
			м_Журнал.Вот(`[Список] Разобран список сегментов TargetDuration=${nTargetDuration} ПорядковыйНомер=${чПорядковыйНомер} КонецСписка=${лКонецСписка} КоличествоСегментов=${моСегменты.length} РекламныхСегментов=${кРекламныхСегментов}`);
			if (сТипРекламы) {
				м_Журнал.Окак(`[Список] Найдена реклама ТипРекламы=${сТипРекламы} ТокенРекламы=${сТокенРекламы.slice(-10)} Роликов=${кРоликов} НомерРолика=${чНомерРолика} ПродолжительностьРолика=${чПродолжительностьРолика} НомерКвартеля=${чНомерКвартеля} ЗаканчиваетсяРекламой=${этотСписокЗаканчиваетсяРекламой(оСписокСегментов)}`);
			}
			м_Статистика.РазобранСписокСегментов(оСписокСегментов);
			return оСписокСегментов;
		}
	}
	function браковать(пУсловие) {
		if (!пУсловие) {
			throw new Error('БРАКОВАТЬ');
		}
	}
	function РазобратьСписокАтрибутов(сИсходныйТекст) {
		const амАтрибуты = new Map();
		const рвАтрибут = /([A-Z0-9-]+)=(?:"([^"]*)"|([^",]+))(?:,|$)/g;
		while (рвАтрибут.lastIndex !== сИсходныйТекст.length) {
			const {lastIndex} = рвАтрибут;
			const мсАтрибут = рвАтрибут.exec(сИсходныйТекст);
			Проверить(мсАтрибут.index === lastIndex);
			Проверить(!амАтрибуты.has(мсАтрибут[1]));
			амАтрибуты.set(мсАтрибут[1], мсАтрибут[3] || мсАтрибут[2]);
		}
		return амАтрибуты;
	}
	function РазобратьЦелоеПоложительноеЧисло(сИсходныйТекст) {
		const чРезультат = parseFloat(сИсходныйТекст);
		Проверить(Number.isSafeInteger(чРезультат) && чРезультат >= 0);
		return чРезультат;
	}
	function РазобратьПоложительноеЧисло(сИсходныйТекст) {
		const чРезультат = parseFloat(сИсходныйТекст);
		Проверить(Number.isFinite(чРезультат) && чРезультат >= 0);
		return чРезультат;
	}
	function РазобратьЛюбоеЧисло(сИсходныйТекст) {
		const чРезультат = parseFloat(сИсходныйТекст);
		Проверить(Number.isFinite(чРезультат));
		return чРезультат;
	}
	function разобратьEXTINF(сИсходныйТекст) {
		let чЗапятая = сИсходныйТекст.indexOf(',');
		if (чЗапятая === -1) {
			чЗапятая = сИсходныйТекст.length;
		}
		return {
			чДлительность: РазобратьЛюбоеЧисло(сИсходныйТекст.slice(0, чЗапятая)),
			сИмяСегмента: сИсходныйТекст.slice(чЗапятая + 1)
		};
	}
	function этотСписокЗаканчиваетсяРекламой(оСписок) {
		return оСписок !== null && оСписок.моСегменты.length !== 0 && оСписок.моСегменты[оСписок.моСегменты.length - 1].лРеклама;
	}
	function задатьСостояниеРекламы(лИдетРеклама) {
		if (_лИдетРеклама !== лИдетРеклама) {
			_лИдетРеклама = лИдетРеклама;
			if (лИдетРеклама) {
				_оСпискиБезРекламы.запустить();
				м_События.ПослатьСобытие('список-началорекламы');
			} else {
				_оСпискиБезРекламы.остановить();
				м_События.ПослатьСобытие('список-конецрекламы');
			}
		}
		if (!лИдетРеклама) {
			м_Twitch.отправитьДанныеСлеженияЗаРекламой(null);
		}
	}
	let _сДобавленныйИдТрансляции;
	let _чДобавленныйИдСессии;
	let _сДобавленныйИдВарианта;
	let _чДобавленныйПорядковыйНомер;
	let _чДобавленноеВремя;
	let _лДобавитьРазрыв;
	function очиститьСтатистикуДобавления() {
		_сДобавленныйИдТрансляции = '';
		_чДобавленныйИдСессии = NaN;
		_сДобавленныйИдВарианта = '';
		_чДобавленныйПорядковыйНомер = -1;
		_чДобавленноеВремя = -1;
		_лДобавитьРазрыв = false;
	}
	очиститьСтатистикуДобавления();
	function ДобавитьСегментыВОчередь(оНовыеВарианты, оНовыеСегменты, оВыбранныйВариант) {
		Проверить(!(_сДобавленныйИдТрансляции !== оНовыеВарианты.сИдТрансляции && _чДобавленныйИдСессии === оНовыеВарианты.чИдСессии));
		if (оНовыеСегменты.лХаос) {
			_лДобавитьРазрыв = true;
			м_Статистика.ДобавленыСегментыВОчередь(0, 0);
			return false;
		}
		let кСегментовДобавлено = 0;
		let кСекундДобавлено = 0;
		let чИндексДобавляемогоСегмента = оНовыеСегменты.моСегменты.length;
		let кДобавитьСегментов = _сДобавленныйИдТрансляции !== оНовыеВарианты.сИдТрансляции ? 1 : 3;
		let чДобавитьСекунд = м_Настройки.Получить('чРазмерБуфера');
		while (--чИндексДобавляемогоСегмента > 0) {
			if (!оНовыеСегменты.моСегменты[чИндексДобавляемогоСегмента].лРеклама && оНовыеСегменты.моСегменты[чИндексДобавляемогоСегмента].чДлительность !== 0) {
				кДобавитьСегментов--;
				чДобавитьСекунд -= оНовыеСегменты.моСегменты[чИндексДобавляемогоСегмента].чДлительность;
				if (кДобавитьСегментов <= 0 && чДобавитьСекунд <= 0) {
					break;
				}
			}
		}
		if (_сДобавленныйИдТрансляции !== оНовыеВарианты.сИдТрансляции) {
			м_Журнал.Окак(`[Список] Изменился ИдТрансляции ${_сДобавленныйИдТрансляции} ==> ${оНовыеВарианты.сИдТрансляции}`);
			_чДобавленноеВремя = -1;
			_лДобавитьРазрыв = true;
			for (let оДобавляемыйСегмент; оДобавляемыйСегмент = оНовыеСегменты.моСегменты[чИндексДобавляемогоСегмента]; чИндексДобавляемогоСегмента++) {
				добавитьСегментВОчередь(оДобавляемыйСегмент, оНовыеСегменты.чПорядковыйНомер + чИндексДобавляемогоСегмента);
			}
		} else if (_чДобавленныйИдСессии !== оНовыеВарианты.чИдСессии) {
			м_Журнал.Окак(`[Список] Изменился ИдСессии ${_чДобавленныйИдСессии} ==> ${оНовыеВарианты.чИдСессии}`);
			_лДобавитьРазрыв = true;
			for (let оДобавляемыйСегмент; оДобавляемыйСегмент = оНовыеСегменты.моСегменты[чИндексДобавляемогоСегмента]; чИндексДобавляемогоСегмента++) {
				if (оДобавляемыйСегмент.чВремя > _чДобавленноеВремя) {
					добавитьСегментВОчередь(оДобавляемыйСегмент, оНовыеСегменты.чПорядковыйНомер + чИндексДобавляемогоСегмента);
				}
			}
		} else {
			if (_сДобавленныйИдВарианта !== оВыбранныйВариант.сИдентификатор) {
				м_Журнал.Окак(`[Список] Изменился ИдВарианта ${_сДобавленныйИдВарианта} ==> ${оВыбранныйВариант.сИдентификатор}`);
				_лДобавитьРазрыв = true;
			}
			for (let оДобавляемыйСегмент; оДобавляемыйСегмент = оНовыеСегменты.моСегменты[чИндексДобавляемогоСегмента]; чИндексДобавляемогоСегмента++) {
				if (оНовыеСегменты.чПорядковыйНомер + чИндексДобавляемогоСегмента > _чДобавленныйПорядковыйНомер) {
					добавитьСегментВОчередь(оДобавляемыйСегмент, оНовыеСегменты.чПорядковыйНомер + чИндексДобавляемогоСегмента);
				}
			}
		}
		м_Статистика.ДобавленыСегментыВОчередь(кСегментовДобавлено, кСекундДобавлено);
		return кСегментовДобавлено === 0;
		function добавитьСегментВОчередь(оСегмент, чПорядковыйНомер) {
			начатьТрансляцию();
			if (оСегмент.лРеклама) {
				м_Журнал.Вот(`[Список] Не добавляю рекламу ПорядковыйНомер=${чПорядковыйНомер}`);
				return;
			}
			if (оСегмент.чДлительность === 0) {
				м_Журнал.Ой(`[Список] Не добавляю сегмент ПорядковыйНомер=${чПорядковыйНомер} Время=${оСегмент.чВремя} Длительность=0`);
				return;
			}
			if (_чДобавленныйИдСессии === оНовыеВарианты.чИдСессии && _чДобавленныйПорядковыйНомер + 1 < чПорядковыйНомер) {
				м_Журнал.Ой(`[Список] Пропущены сегменты с ${_чДобавленныйПорядковыйНомер + 1} по ${чПорядковыйНомер - 1}`);
				м_Статистика.пропущеныСегменты(чПорядковыйНомер - _чДобавленныйПорядковыйНомер - 1);
				_лДобавитьРазрыв = true;
			}
			const оДобавлено = г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ, оСегмент.сАдрес, оСегмент.чДлительность, оСегмент.лРазрыв || _лДобавитьРазрыв));
			м_Журнал[оДобавлено.лРазрыв ? 'Окак' : 'Вот'](`[Список] Добавлен сегмент ${оДобавлено.чНомер} ПорядковыйНомер=${чПорядковыйНомер} Время=${оСегмент.чВремя} Длительность=${оДобавлено.чДлительность} Разрыв=${оДобавлено.лРазрыв}`);
			кСегментовДобавлено++;
			кСекундДобавлено += оДобавлено.чДлительность;
			_сДобавленныйИдТрансляции = оНовыеВарианты.сИдТрансляции;
			_чДобавленныйИдСессии = оНовыеВарианты.чИдСессии;
			_сДобавленныйИдВарианта = оВыбранныйВариант.сИдентификатор;
			_чДобавленныйПорядковыйНомер = чПорядковыйНомер;
			if (!Number.isNaN(оСегмент.чВремя)) {
				_чДобавленноеВремя = оСегмент.чВремя;
			}
			_лДобавитьРазрыв = false;
		}
	}
	function получитьИнтервалОбновленияСпискаСегментов(оСписокСегментов, лУкороченныйИнтервал) {
		let кСегментов = 0, чДлительностьСписка = 0;
		let чСредняяДлительностьСегмента, чМинДлительностьСегмента = Infinity, чМаксДлительностьСегмента = -Infinity;
		for (const {лРеклама, чДлительность} of оСписокСегментов.моСегменты) {
			if (!лРеклама && чДлительность > 0) {
				кСегментов++;
				чДлительностьСписка += чДлительность;
				чМинДлительностьСегмента = Math.min(чМинДлительностьСегмента, чДлительность);
				чМаксДлительностьСегмента = Math.max(чМаксДлительностьСегмента, чДлительность);
			}
		}
		if (кСегментов !== 0) {
			чСредняяДлительностьСегмента = чДлительностьСписка / кСегментов;
			м_Журнал.Вот(`[Список] ДлительностьСегментов=${м_Журнал.F2(чМинДлительностьСегмента)}<${м_Журнал.F2(чСредняяДлительностьСегмента)}<${м_Журнал.F2(чМаксДлительностьСегмента)} ДлительностьСписка=${м_Журнал.F1(чДлительностьСписка)} НеЗагружать=${оСписокСегментов.моСегменты.length - кСегментов}`);
		} else {
			чСредняяДлительностьСегмента = чМинДлительностьСегмента = чМаксДлительностьСегмента = Math.max(оСписокСегментов.nTargetDuration / 3, 1);
			м_Журнал.Ой(`[Список] Предполагаемая длительность сегментов ${м_Журнал.F1(чСредняяДлительностьСегмента)}`);
		}
		return лУкороченныйИнтервал ? чСредняяДлительностьСегмента / 2 * 1e3 : чСредняяДлительностьСегмента * 1e3 - 16;
	}
	function получитьИнтервалОбновленияСпискаВариантов() {
		Проверить(_чСостояние === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ);
		if (_чИнтервалОбновленияСпискаВариантов === -1) {
			_чИнтервалОбновленияСпискаВариантов = 1e3;
		} else {
			_чИнтервалОбновленияСпискаВариантов = Math.min(_чИнтервалОбновленияСпискаВариантов + 1e3, 3e4);
		}
		return _чИнтервалОбновленияСпискаВариантов;
	}
	function начатьТрансляцию() {
		if (_чСостояние !== СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ) {
			_чСостояние = СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ;
			г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЗАГРУЖЕН, СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ));
			м_События.ПослатьСобытие('список-выбранварианттрансляции', [ _оСпискиСРекламой.оСписокВариантов.моВарианты, _оСпискиСРекламой.оВыбранныйВариант ]);
		}
	}
	function ЗавершитьТрансляцию() {
		if (_чСостояние !== СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ) {
			_чСостояние = СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ;
			_чИнтервалОбновленияСпискаВариантов = -1;
			г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЗАГРУЖЕН, СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ));
			м_События.ПослатьСобытие('список-выбранварианттрансляции', [ null, null ]);
		}
		_оСпискиСРекламой.очистить();
		задатьСостояниеРекламы(false);
	}
	function ИзменитьВариантТрансляции(чВыбранныйВариант) {
		if (_оСпискиСРекламой.оСписокВариантов !== null) {
			_оСпискиСРекламой.сохранитьВариантТрансляции(_оСпискиСРекламой.оСписокВариантов.моВарианты[чВыбранныйВариант]);
			_оСпискиСРекламой.оВыбранныйВариант = null;
			if (_чСостояние === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ) {
				_оСпискиСРекламой.остановить();
				_оСпискиСРекламой.запустить();
				if (!_лИдетРеклама) {
					очиститьСтатистикуДобавления();
					г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЗАГРУЖЕН, СОСТОЯНИЕ_СМЕНА_ВАРИАНТА));
					м_Загрузчик.ЗагрузитьСледующийСегмент();
				}
			}
		}
	}
	function Остановить() {
		_чСостояние = СОСТОЯНИЕ_ОСТАНОВКА;
		_оСпискиСРекламой.остановить();
		очиститьСтатистикуДобавления();
		задатьСостояниеРекламы(false);
	}
	function Запустить() {
		Проверить(_чСостояние === СОСТОЯНИЕ_ОСТАНОВКА);
		_оСпискиСРекламой.запустить();
	}
	return {
		Запустить,
		Остановить,
		ИзменитьВариантТрансляции
	};
})();

const м_Преобразователь = (() => {
	let _оРабочийПоток = null;
	let _чПоследнийЗагруженный = -1;
	function ПреобразоватьСледующийСегмент() {
		let чУдалить, кУдалить = 0;
		for (let оСегмент, чСегмент = 0; оСегмент = г_моОчередь[чСегмент]; ++чСегмент) {
			if (оСегмент.чОбработка > ОБРАБОТКА_ЗАГРУЖЕН) {
				continue;
			}
			if (оСегмент.чОбработка < ОБРАБОТКА_ЗАГРУЖЕН) {
				break;
			}
			if (_чПоследнийЗагруженный !== -1 && _чПоследнийЗагруженный + 1 !== оСегмент.чНомер) {
				м_Журнал.Ой(`[Преобразование] Не загружены сегменты между ${_чПоследнийЗагруженный} и ${оСегмент.чНомер}`);
				оСегмент.лРазрыв = true;
			}
			_чПоследнийЗагруженный = оСегмент.чНомер;
			if (typeof оСегмент.пДанные == 'number' && _оРабочийПоток === null) {
				м_Журнал.Вот(`[Преобразование] Пропускаю сегмент ${оСегмент.чНомер} Состояние=${оСегмент.пДанные}`);
				оСегмент.чОбработка = ОБРАБОТКА_ПРЕОБРАЗОВАН;
				if (оСегмент.пДанные === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ) {
					СоздатьРабочийПоток();
				}
			} else {
				if (typeof оСегмент.пДанные == 'number') {
					м_Журнал.Вот(`[Преобразование] Отсылаю сегмент ${оСегмент.чНомер} Состояние=${оСегмент.пДанные}`);
					_оРабочийПоток.postMessage(оСегмент);
				} else {
					м_Отладка.СохранитьТранспортныйПоток(оСегмент);
					м_Статистика.ПолученИсходныйСегмент();
					м_Журнал.Вот(`[Преобразование] Отсылаю сегмент ${оСегмент.чНомер}`);
					_оРабочийПоток.postMessage(оСегмент, [ оСегмент.пДанные ]);
				}
				if (++кУдалить == 1) {
					чУдалить = чСегмент;
				}
			}
		}
		if (кУдалить !== 0) {
			г_моОчередь.Удалить(чУдалить, кУдалить);
		}
		м_Проигрыватель.ДобавитьСледующийСегмент();
	}
	const ОбработатьОкончаниеПреобразования = ДобавитьОбработчикИсключений(оСобытие => {
		const мДанные = оСобытие.data;
		Проверить(Array.isArray(мДанные));
		switch (мДанные[0]) {
		  case 1:
			Проверить(мДанные.length === 2 && ЭтоОбъект(мДанные[1]));
			const оСегмент = new Сегмент(ОБРАБОТКА_ПРЕОБРАЗОВАН, мДанные[1].пДанные, мДанные[1].чДлительность, мДанные[1].лРазрыв, мДанные[1].чНомер);
			м_Журнал.Вот(`[Преобразование] Получен сегмент ${оСегмент.чНомер} ПреобразованЗа=${м_Журнал.F0(оСегмент.пДанные.чПреобразованЗа)}мс`);
			if (typeof оСегмент.пДанные != 'number') {
				м_Статистика.ПолученПреобразованныйСегмент(оСегмент);
				if (!оСегмент.пДанные.hasOwnProperty('мбМедиасегмент')) {
					return;
				}
				м_Отладка.СохранитьПреобразованныйСегмент(оСегмент);
			}
			г_моОчередь.Добавить(оСегмент);
			м_Проигрыватель.ДобавитьСледующийСегмент();
			return;

		  case 2:
			const мсВажность = мДанные[1], мсЗаписи = мДанные[2];
			Проверить(мДанные.length === 3 && Array.isArray(мсВажность) && Array.isArray(мсЗаписи) && мсВажность.length === мсЗаписи.length);
			for (let ы = 0; ы < мсВажность.length; ++ы) {
				Проверить((мсВажность[ы] === 'Вот' || мсВажность[ы] === 'Окак' || мсВажность[ы] === 'Ой') && typeof мсЗаписи[ы] == 'string');
				м_Журнал[мсВажность[ы]](мсЗаписи[ы]);
			}
			return;

		  case 3:
			Проверить(мДанные.length === 3 && typeof мДанные[1] == 'string' && typeof мДанные[2] == 'object');
			м_Отладка.ЗавершитьРаботуИОтправитьОтчет(мДанные[1], мДанные[2]);
			return;

		  case 4:
			Проверить(мДанные.length === 2 && typeof мДанные[1] == 'string');
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение(мДанные[1]);
			return;

		  case 5:
			Проверить(мДанные.length === 2 && мДанные[1].byteLength);
			м_Помойка.Выбросить(мДанные[1]);
			return;

		  default:
			Проверить(false);
		}
	});
	function ОбработатьОшибкуПреобразования(оСобытие) {
		м_Отладка.ЗавершитьРаботуИОтправитьОтчет(`Произошло событие ${оСобытие.type} в рабочем потоке в строке ${оСобытие.lineno}. ${оСобытие.message}`);
	}
	function СоздатьРабочийПоток() {
		м_Журнал.Вот('[Преобразование] Создаю рабочий поток');
		_оРабочийПоток = new Worker('/worker.js');
		_оРабочийПоток.addEventListener('message', ОбработатьОкончаниеПреобразования);
		_оРабочийПоток.addEventListener('error', ОбработатьОшибкуПреобразования);
		_оРабочийПоток.addEventListener('messageerror', ОбработатьОшибкуПреобразования);
	}
	function Остановить() {
		_чПоследнийЗагруженный = -1;
		if (_оРабочийПоток) {
			м_Журнал.Вот('[Преобразование] Убиваю рабочий поток');
			_оРабочийПоток.terminate();
			_оРабочийПоток = null;
		}
	}
	return {
		Остановить,
		ПреобразоватьСледующийСегмент
	};
})();

const м_Загрузчик = (() => {
	const МАКС_КОЛИЧЕСТВО_ПОПЫТОК = 2;
	function ЗагрузитьТекст(оОтменаОбещания, сАдрес, чНеДольше, сНазвание, лЖурнал, оЗаголовки = null, сМетод = 'GET') {
		return Загрузить(оОтменаОбещания, сМетод, сАдрес, чНеДольше, оЗаголовки, null, сНазвание, лЖурнал, 'text');
	}
	function ЗагрузитьJson(оОтменаОбещания, сАдрес, чНеДольше, сНазвание, лЖурнал, оЗаголовки = null, сМетод = 'GET') {
		return Загрузить(оОтменаОбещания, сМетод, сАдрес, чНеДольше, оЗаголовки, null, сНазвание, лЖурнал, 'json');
	}
	function Загрузить(оОтменаОбещания, сМетод, сАдрес, чНеДольше, оЗаголовки, пТело, сНазвание, лЖурнал, пТипДанных) {
		if (г_лРаботаЗавершена) {
			throw void 0;
		}
		Проверить(сМетод === 'GET' || сМетод === 'PUT' || сМетод === 'DELETE' || сМетод === 'POST');
		Проверить(typeof сАдрес == 'string');
		Проверить(Number.isFinite(чНеДольше) && (чНеДольше === 0 || чНеДольше > 1e3));
		Проверить(пТело === null || сМетод !== 'GET' && (пТело instanceof URLSearchParams || typeof пТело == 'string' && оЗаголовки && ЭтоНепустаяСтрока(оЗаголовки['Content-Type'])));
		Проверить(typeof оЗаголовки == 'object' && typeof сНазвание == 'string' && typeof лЖурнал == 'boolean');
		Проверить(пТипДанных === 'none' || пТипДанных === 'text' || пТипДанных === 'json' || Number.isFinite(пТипДанных));
		if (оОтменаОбещания && оОтменаОбещания.лОтменено) {
			return Promise.reject(ОтменаОбещания.ПРИЧИНА);
		}
		м_Журнал.Вот(`[Загрузчик] ${сМетод} ${сНазвание} не дольше ${м_Журнал.F0(чНеДольше)}мс`);
		м_Twitch.проверитьДоступностьАдреса(сАдрес);
		const оЗапрос = new XMLHttpRequest();
		оЗапрос._сМетод = сМетод;
		оЗапрос._сАдрес = сАдрес;
		оЗапрос._чНеДольше = чНеДольше;
		оЗапрос._оЗаголовки = оЗаголовки;
		оЗапрос._пТело = пТело;
		оЗапрос._сНазвание = сНазвание;
		оЗапрос._лЖурнал = лЖурнал;
		оЗапрос._пТипДанных = пТипДанных;
		оЗапрос._кОсталосьПопыток = typeof пТипДанных == 'number' ? 1 : МАКС_КОЛИЧЕСТВО_ПОПЫТОК;
		оЗапрос._чВремяОтправкиЗапроса = performance.now();
		оЗапрос._чОжиданиеОтвета = NaN;
		оЗапрос.addEventListener('timeout', ОбработатьОшибку);
		оЗапрос.addEventListener('error', ОбработатьОшибку);
		оЗапрос.addEventListener('abort', ОбработатьОшибку);
		оЗапрос.addEventListener('load', ОбработатьОкончаниеЗагрузки);
		if (лЖурнал && typeof пТипДанных == 'number') {
			оЗапрос.addEventListener('readystatechange', ОбработатьПолучениеОтвета);
		}
		return new Promise((фВыполнить, фОтказаться) => {
			оЗапрос._фВыполнить = фВыполнить;
			оЗапрос._фОтказаться = фОтказаться;
			if (оОтменаОбещания) {
				оЗапрос._оОтменаОбещания = оОтменаОбещания;
				оОтменаОбещания.ЗаменитьОбработчик(ПолучитьОбработчикОтменыОбещания(оЗапрос));
			}
			ПослатьЗапрос(оЗапрос, false);
		});
	}
	function ПослатьЗапрос(оЗапрос, лПовторно) {
		if (оЗапрос._кОсталосьПопыток === 0) {
			return false;
		}
		if (лПовторно) {
			м_Журнал.Ой(`[Загрузчик] Повторно загружаю ${оЗапрос._сНазвание}`);
		}
		оЗапрос._кОсталосьПопыток--;
		оЗапрос.open(оЗапрос._сМетод, оЗапрос._сАдрес);
		оЗапрос.responseType = typeof оЗапрос._пТипДанных == 'number' ? 'arraybuffer' : 'text';
		оЗапрос.timeout = оЗапрос._чНеДольше;
		if (оЗапрос._оЗаголовки) {
			for (let сЗаголовок of Object.keys(оЗапрос._оЗаголовки)) {
				оЗапрос.setRequestHeader(сЗаголовок, оЗапрос._оЗаголовки[сЗаголовок]);
			}
		}
		if (оЗапрос._пТело instanceof URLSearchParams) {
			оЗапрос.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
			оЗапрос.send(оЗапрос._пТело.toString());
		} else {
			оЗапрос.send(оЗапрос._пТело);
		}
		return true;
	}
	function ПолучитьОбработчикОтменыОбещания(оЗапрос) {
		return () => {
			м_Журнал.Вот(`[Загрузчик] Отменяю загрузку ${оЗапрос._сНазвание} readyState=${оЗапрос.readyState}`);
			оЗапрос.removeEventListener('abort', ОбработатьОшибку);
			оЗапрос.abort();
			оЗапрос._фОтказаться(ОтменаОбещания.ПРИЧИНА);
		};
	}
	const ОбработатьПолучениеОтвета = ДобавитьОбработчикИсключений(({target: оЗапрос}) => {
		if (оЗапрос.readyState >= XMLHttpRequest.HEADERS_RECEIVED) {
			оЗапрос.removeEventListener('readystatechange', ОбработатьПолучениеОтвета);
			Проверить(Number.isNaN(оЗапрос._чОжиданиеОтвета));
			оЗапрос._чОжиданиеОтвета = Math.round(performance.now() - оЗапрос._чВремяОтправкиЗапроса);
		}
	});
	const ОбработатьОшибку = ДобавитьОбработчикИсключений(({target: оЗапрос, type: сТипСобытия}) => {
		м_Журнал.Ой(`[Загрузчик] Не удалось загрузить ${оЗапрос._сНазвание}. Произошло событие ${сТипСобытия}` + ` readyState=${оЗапрос.readyState}` + (оЗапрос._лЖурнал && typeof оЗапрос._пТипДанных == 'number' ? ` ОжиданиеОтвета=${оЗапрос._чОжиданиеОтвета}мс` : ``));
		if (сТипСобытия === 'abort' || !ПослатьЗапрос(оЗапрос, true)) {
			if (оЗапрос.responseType === 'arraybuffer') {
				м_Статистика.ЗагруженСегмент(NaN, NaN, NaN, оЗапрос._чОжиданиеОтвета);
			}
			оЗапрос._оОтменаОбещания && оЗапрос._оОтменаОбещания.ЗаменитьОбработчик(null);
			оЗапрос._фОтказаться(`Произошло событие ${сТипСобытия}`);
		}
	});
	const ОбработатьОкончаниеЗагрузки = ДобавитьОбработчикИсключений(({target: оЗапрос}) => {
		Проверить(оЗапрос.readyState === XMLHttpRequest.DONE);
		const чКод = оЗапрос.status;
		if (чКод >= 200 && чКод <= 299 && (оЗапрос._пТипДанных === 'none' || оЗапрос.response !== null)) {
			const чДлительностьЗагрузки = Math.round(performance.now() - оЗапрос._чВремяОтправкиЗапроса);
			оЗапрос._оОтменаОбещания && оЗапрос._оОтменаОбещания.ЗаменитьОбработчик(null);
			м_Журнал.Вот(`[Загрузчик] Загрузил ${оЗапрос._сНазвание} за ${чДлительностьЗагрузки}мс` + (оЗапрос._лЖурнал && typeof оЗапрос._пТипДанных == 'number' ? ` ОжиданиеОтвета=${оЗапрос._чОжиданиеОтвета}мс` : ``) + (typeof оЗапрос._пТипДанных == 'number' ? ` Отношение=${м_Журнал.F1(чДлительностьЗагрузки / оЗапрос._пТипДанных / 1e3)}` : ``) + (чКод === 200 ? `` : ` Код=${чКод} ${оЗапрос.statusText}`) + (оЗапрос._пТипДанных === 'none' ? '' : оЗапрос._лЖурнал && ЭтоНепустаяСтрока(оЗапрос.response) ? `\n${оЗапрос.response}` : оЗапрос.responseType === 'arraybuffer' ? ` Размер=${оЗапрос.response.byteLength}байт` : ` Размер=${оЗапрос.response.length}символов`));
			if (оЗапрос._чНеДольше !== 0) {
				м_Статистика.СкачаноНечто(ПолучитьРазмерОтвета(оЗапрос));
			}
			switch (оЗапрос._пТипДанных) {
			  case 'none':
				оЗапрос._фВыполнить();
				break;

			  case 'text':
				оЗапрос._фВыполнить(оЗапрос.response);
				break;

			  case 'json':
				try {
					оЗапрос._фВыполнить(JSON.parse(оЗапрос.response));
				} catch (пИсключение) {
					м_Журнал.Ой(`[Загрузчик] Не удалось разобрать ${оЗапрос._сНазвание}. ${пИсключение}`);
					оЗапрос._фОтказаться('Не удалось разобрать JSON');
				}
				break;

			  default:
				м_Статистика.ЗагруженСегмент(оЗапрос.response.byteLength, оЗапрос._пТипДанных, чДлительностьЗагрузки, оЗапрос._чОжиданиеОтвета);
				оЗапрос._фВыполнить(оЗапрос.response);
			}
		} else {
			м_Журнал.Ой(`[Загрузчик] Не удалось загрузить ${оЗапрос._сНазвание}. ${КОД_ОТВЕТА + чКод} ${оЗапрос.statusText}` + (оЗапрос._лЖурнал && typeof оЗапрос._пТипДанных == 'number' ? ` ОжиданиеОтвета=${оЗапрос._чОжиданиеОтвета}мс` : ``) + (ЭтоНепустаяСтрока(оЗапрос.response) ? `\n${оЗапрос.response}` : оЗапрос.response === null ? ' response=null' : оЗапрос.responseType === 'arraybuffer' ? ` Размер=${оЗапрос.response.byteLength}байт` : ` Размер=${оЗапрос.response.length}символов`));
			if (чКод >= 400 && чКод <= 499 || оЗапрос.response === null || !ПослатьЗапрос(оЗапрос, true)) {
				if (оЗапрос.responseType === 'arraybuffer') {
					м_Статистика.ЗагруженСегмент(NaN, NaN, NaN, оЗапрос._чОжиданиеОтвета);
				}
				оЗапрос._оОтменаОбещания && оЗапрос._оОтменаОбещания.ЗаменитьОбработчик(null);
				оЗапрос._фОтказаться(КОД_ОТВЕТА + чКод);
			}
		}
	});
	function ПолучитьРазмерОтвета(оЗапрос) {
		let кбРазмерЗаголовков = 17 + оЗапрос.statusText.length + оЗапрос.getAllResponseHeaders().length;
		if (ЭтоHTTP2(оЗапрос)) {
			кбРазмерЗаголовков = Math.round(кбРазмерЗаголовков * .5);
		}
		let кбРазмерТела;
		let сЗаголовок = оЗапрос.getResponseHeader('Content-Length');
		if (сЗаголовок) {
			кбРазмерТела = Number.parseInt(сЗаголовок, 10);
		} else if (оЗапрос.responseType === 'arraybuffer') {
			кбРазмерТела = оЗапрос.response.byteLength;
		} else {
			кбРазмерТела = оЗапрос.response.length;
			сЗаголовок = оЗапрос.getResponseHeader('Content-Encoding');
			if (сЗаголовок && сЗаголовок !== 'identity') {
				кбРазмерТела = Math.round(кбРазмерТела * .35);
			}
		}
		return кбРазмерЗаголовков + кбРазмерТела;
	}
	function ЭтоHTTP2(оЗапрос) {
		return оЗапрос.statusText.length === 0;
	}
	function ЗагрузитьСледующийСегмент() {
		let ч = г_моОчередь.length - 1;
		if (ч >= 0 && г_моОчередь[ч].пДанные === СОСТОЯНИЕ_СМЕНА_ВАРИАНТА && г_моОчередь[ч].чОбработка === ОБРАБОТКА_ЗАГРУЖЕН) {
			г_моОчередь.ПоказатьСостояние();
			while (--ч >= 0 && г_моОчередь[ч].чОбработка <= ОБРАБОТКА_ЗАГРУЖЕН) {
				if (typeof г_моОчередь[ч].пДанные != 'number') {
					г_моОчередь.Удалить(ч);
				}
			}
			г_моОчередь.ПоказатьСостояние();
		} else {
			let кОдновременныхЗагрузок = м_Настройки.Получить('кОдновременныхЗагрузок');
			let чДлительностьВсехЗагрузок = 0;
			for (let оСегмент of г_моОчередь) {
				if (оСегмент.чОбработка <= ОБРАБОТКА_ЗАГРУЖЕН) {
					чДлительностьВсехЗагрузок += оСегмент.чДлительность;
					if (оСегмент.чОбработка <= ОБРАБОТКА_ЗАГРУЖАЕТСЯ) {
						--кОдновременныхЗагрузок;
						if (оСегмент.чОбработка === ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ && кОдновременныхЗагрузок >= 0) {
							ЗагрузитьСегмент(оСегмент);
						}
					}
				}
			}
			const чПереполнениеОчереди = м_Настройки.Получить('чМаксРазмерБуфера') + м_Настройки.Получить('чРастягиваниеБуфера');
			if (чДлительностьВсехЗагрузок > чПереполнениеОчереди) {
				м_Журнал.Ой(`[Загрузчик] Длительность всех загрузок в очереди ${м_Журнал.F1(чДлительностьВсехЗагрузок)}с > ${м_Журнал.F1(чПереполнениеОчереди)}с`);
				ОбработатьНеудачнуюЗагрузкуСегмента(null);
				ЗагрузитьСледующийСегмент();
				return;
			}
		}
		м_Преобразователь.ПреобразоватьСледующийСегмент();
	}
	function ЗагрузитьСегмент(оСегмент) {
		const сАдрес = оСегмент.пДанные;
		оСегмент.пДанные = new ОтменаОбещания();
		оСегмент.чОбработка = ОБРАБОТКА_ЗАГРУЖАЕТСЯ;
		Загрузить(оСегмент.пДанные, 'GET', сАдрес, ЗагружатьСегментНеДольше(оСегмент), null, null, `сегмент ${оСегмент.чНомер}`, м_Статистика.ОкноОткрыто(), оСегмент.чДлительность).then(буфДанные => {
			Проверить(г_моОчередь.includes(оСегмент));
			оСегмент.пДанные = буфДанные;
			оСегмент.чОбработка = ОБРАБОТКА_ЗАГРУЖЕН;
			ЗагрузитьСледующийСегмент();
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			if (typeof пПричина == 'string' && оСегмент.чОбработка === ОБРАБОТКА_ЗАГРУЖАЕТСЯ) {
				Проверить(г_моОчередь.includes(оСегмент));
				ОбработатьНеудачнуюЗагрузкуСегмента(пПричина.сПричина === КОД_ОТВЕТА + 404 || пПричина.сПричина === КОД_ОТВЕТА + 410 ? null : оСегмент);
				Проверить(!г_моОчередь.includes(оСегмент));
				ЗагрузитьСледующийСегмент();
			} else if (пПричина === ОтменаОбещания.ПРИЧИНА) {
				м_Журнал.Вот(`[Загрузчик] Отменена загрузка сегмента ${оСегмент.чНомер}`);
				Проверить(!г_моОчередь.includes(оСегмент));
			} else {
				throw пПричина;
			}
		}));
	}
	function ЗагружатьСегментНеДольше(оСегмент) {
		const чПеременная = оСегмент.чДлительность * м_Настройки.Получить('кОдновременныхЗагрузок') * 1.15;
		const чПостоянная = 8;
		return (чПеременная + чПостоянная) * 1e3;
	}
	function ОбработатьНеудачнуюЗагрузкуСегмента(оНезагруженныйСегмент) {
		г_моОчередь.ПоказатьСостояние();
		const кВОчереди = г_моОчередь.length;
		if (оНезагруженныйСегмент) {
			г_моОчередь.Удалить(оНезагруженныйСегмент);
		} else {
			let чРазмерБуфера = м_Настройки.Получить('чРазмерБуфера');
			for (let оСегмент, ы = кВОчереди; оСегмент = г_моОчередь[--ы]; ) {
				if (оСегмент.чОбработка === ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ) {
					if (чРазмерБуфера > 0) {
						чРазмерБуфера -= оСегмент.чДлительность;
					} else {
						г_моОчередь.Удалить(ы);
					}
				} else if (оСегмент.чОбработка === ОБРАБОТКА_ЗАГРУЖАЕТСЯ) {
					г_моОчередь.Удалить(ы);
				}
			}
		}
		г_моОчередь.ПоказатьСостояние();
		м_Статистика.НеЗагруженыСегменты(кВОчереди - г_моОчередь.length);
	}
	const обработатьИзменениеСети = ДобавитьОбработчикИсключений(оСобытие => {
		м_Журнал.Ой(`[Загрузчик] Событие ${оСобытие.type} navigator.onLine=${navigator.onLine} connection.type=${navigator.connection && navigator.connection.type}`);
	});
	if (navigator.connection) {
		navigator.connection.addEventListener('onchange' in navigator.connection ? 'change' : 'typechange', обработатьИзменениеСети);
	} else {
		window.addEventListener('online', обработатьИзменениеСети);
		window.addEventListener('offline', обработатьИзменениеСети);
	}
	if (!navigator.onLine) {
		м_Журнал.Ой('[Загрузчик] navigator.onLine=false');
	}
	return {
		Загрузить,
		ЗагрузитьТекст,
		ЗагрузитьJson,
		ЗагрузитьСледующийСегмент
	};
})();

const м_Twitch = (() => {
	const ИНТЕРВАЛ_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ТРАНСЛЯЦИИ = 6e4;
	const ИНТЕРВАЛ_СЛЕЖЕНИЯ_ЗА_ПРОСМОТРОМ = 6e4;
	let _сАдресСлеженияЗаПросмотром = 'https://spade.twitch.tv/track';
	let _сКодКанала = '';
	let _сИдКанала = '';
	let _сИдТрансляции = '';
	let _сАдресЗаписи = '';
	let _сИдУстройства = '';
	let _сИдЗрителя = '';
	let _сКодЗрителя = '';
	let _сТокенЗрителя = '';
	let _сИмяЗрителя = '';
	let _сТокенGql = '';
	let _чТокенGqlПротухнетПосле = 0;
	let _sPlaySessionID = '';
	let _оОтменаОбновленияМетаданных = null;
	let _чТаймерСлеженияЗаПросмотром = 0;
	function ОчиститьДанныеТрансляции() {
		_сИдТрансляции = _сАдресЗаписи = '';
	}
	function ПолучитьАдресКанала(лНеПеренаправлять) {
		return лНеПеренаправлять ? `https://www.twitch.tv/${encodeURIComponent(_сКодКанала)}?${АДРЕС_НЕ_ПЕРЕНАПРАВЛЯТЬ}` : `https://www.twitch.tv/${encodeURIComponent(_сКодКанала)}`;
	}
	function ПолучитьАдресПанелиЧата() {
		if (м_Настройки.Получить('лПолноценныйЧат')) {
			return `https://www.twitch.tv/popout/${encodeURIComponent(_сКодКанала)}/chat?no-mobile-redirect=true&popout=`;
		}
		return `https://www.twitch.tv/embed/${encodeURIComponent(_сКодКанала)}/chat?${м_Настройки.Получить('лЗатемнитьЧат') ? 'darkpopout&' : ''}parent=localhost`;
	}
	function ПолучитьАдресЗаписи(сИдЗаписи) {
		Проверить(ЭтоНепустаяСтрока(сИдЗаписи));
		return `https://www.twitch.tv/videos/${encodeURIComponent(сИдЗаписи)}`;
	}
	function получитьАдресКатегории(сИмяКатегории) {
		Проверить(ЭтоНепустаяСтрока(сИмяКатегории));
		return `https://www.twitch.tv/directory/category/${encodeURIComponent(сИмяКатегории)}`;
	}
	function получитьАдресКоманды(сИмяКоманды) {
		Проверить(ЭтоНепустаяСтрока(сИмяКоманды));
		return `https://www.twitch.tv/team/${encodeURIComponent(сИмяКоманды)}`;
	}
	function проверитьДоступностьАдреса(сАдрес) {
		if (сАдрес.startsWith('https://coolcmd.github.io/')) {
			return;
		}
		if (!/^https?:\/\/(?:[^/]+\.)?(?:twitch\.tv|twitchcdn\.net|ttvnw\.net|jtvnw\.net|live-video\.net|akamaized\.net|cloudfront\.net)\//.test(сАдрес)) {
			throw new Error(`Неизвестный адрес: ${сАдрес}`);
		}
	}
	function создатьУникальныйИдентификатор(кДлина) {
		Проверить(Number.isInteger(кДлина) && кДлина > 0);
		const сДопустимыеСимволы = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
		let сРезультат = '';
		while (сРезультат.length !== кДлина) {
			сРезультат += сДопустимыеСимволы[Math.floor(Math.random() * сДопустимыеСимволы.length)];
		}
		return сРезультат;
	}
	получитьТокенGql._оОбещание = null;
	получитьТокенGql.фИзменилсяТокенGql = null;
	function получитьТокенGql() {
		const ЖДАТЬ_ПОЛУЧЕНИЯ_ТОКЕНА = 3e4;
		if (получитьТокенGql._оОбещание === null) {
			получитьТокенGql._оОбещание = new Promise((фВыполнить, фОтказаться) => {
				м_Журнал.Окак('[Twitch] Вставляю фрейм для перехвата токена GQL');
				const элФрейм = document.createElement('iframe');
				элФрейм.src = 'https://www.twitch.tv/popout/';
				элФрейм.id = 'токенgql';
				элФрейм.hidden = true;
				Проверить(!document.getElementById(элФрейм.id));
				document.body.appendChild(элФрейм);
				const чТаймер = setTimeout(ДобавитьОбработчикИсключений(() => {
					м_Журнал.Ой('[Twitch] Истекло время получения токена GQL');
					элФрейм.remove();
					получитьТокенGql._оОбещание = получитьТокенGql.фИзменилсяТокенGql = null;
					фОтказаться('ОТКАЗАНО_В_ДОСТУПЕ');
				}), ЖДАТЬ_ПОЛУЧЕНИЯ_ТОКЕНА);
				получитьТокенGql.фИзменилсяТокенGql = (() => {
					if (_сТокенGql !== '') {
						clearTimeout(чТаймер);
						элФрейм.remove();
						получитьТокенGql._оОбещание = получитьТокенGql.фИзменилсяТокенGql = null;
						фВыполнить(_сТокенGql);
					}
				});
			});
		}
		return получитьТокенGql._оОбещание;
	}
	function отправитьЗапросGql(оОтменаОбещания, сЗапрос, оПеременные, лПосылатьТокенЗрителя, лПосылатьТокенGql, лПовторятьЗапрос, сНазваниеЗагрузки, чЗагружатьНеДольше = ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ) {
		const ПОВТОРЯТЬ_ЗАПРОС_ЧЕРЕЗ = 5e3;
		Проверить(ЭтоНепустаяСтрока(_сИдУстройства));
		if (оПеременные !== null) {
			сЗапрос = создатьТелоЗапросаGql(сЗапрос, оПеременные);
		}
		const оЗаголовкиЗапроса = {
			'Accept-Language': 'en-US',
			'Client-ID': 'kimne78kx3ncx6brgo4mv6wki5h1ko',
			'Content-Type': 'text/plain; charset=UTF-8',
			'X-Device-ID': _сИдУстройства
		};
		if (лПосылатьТокенЗрителя && _сТокенЗрителя) {
			оЗаголовкиЗапроса.Authorization = `OAuth ${_сТокенЗрителя}`;
		}
		let лСвежийТокен = false;
		let оОбещание;
		if (лПосылатьТокенGql) {
			if (_сТокенGql !== '' && _чТокенGqlПротухнетПосле > Date.now()) {
				м_Журнал.Вот(`[Twitch] Токен GQL протухнет через ${м_Журнал.F0((_чТокенGqlПротухнетПосле - Date.now()) / 1e3)}с`);
				оЗаголовкиЗапроса['Client-Integrity'] = _сТокенGql;
				оОбещание = Promise.resolve();
			} else {
				лСвежийТокен = true;
				оОбещание = получитьТокенGql().then(сТокен => {
					оЗаголовкиЗапроса['Client-Integrity'] = сТокен;
				});
			}
		} else {
			оОбещание = Promise.resolve();
		}
		return оОбещание.then(() => м_Загрузчик.Загрузить(оОтменаОбещания, 'POST', 'https://gql.twitch.tv/gql', чЗагружатьНеДольше, оЗаголовкиЗапроса, сЗапрос, сНазваниеЗагрузки, true, 'json')).then(оРезультат => {
			if (!оРезультат.errors) {
				return оРезультат;
			}
			let оОбещание;
			if (оРезультат.errors.some(({message}) => message === 'failed integrity check')) {
				м_Журнал.Ой('[Twitch] Серверу не понравился токен GQL');
				if (оЗаголовкиЗапроса['Client-Integrity'] === _сТокенGql && _сТокенGql !== '') {
					очиститьТокенGql();
				}
				if (!лПосылатьТокенGql || лСвежийТокен) {
					throw 'ОТКАЗАНО_В_ДОСТУПЕ';
				}
				if (оЗаголовкиЗапроса['Client-Integrity'] !== _сТокенGql && _сТокенGql !== '') {
					оЗаголовкиЗапроса['Client-Integrity'] = _сТокенGql;
					оОбещание = Promise.resolve();
				} else {
					оОбещание = получитьТокенGql().then(сТокен => {
						оЗаголовкиЗапроса['Client-Integrity'] = сТокен;
					});
				}
			} else if (оРезультат.errors.some(({message}) => message === 'service timeout')) {
				if (!лПовторятьЗапрос) {
					м_Журнал.Ой('[Twitch] Сервер GQL занят');
					return оРезультат;
				}
				const повторитьЧерез = ПОВТОРЯТЬ_ЗАПРОС_ЧЕРЕЗ + ПОВТОРЯТЬ_ЗАПРОС_ЧЕРЕЗ / 2 * Math.random();
				м_Журнал.Ой(`[Twitch] Сервер GQL занят. Запрос будет повторно отправлен через ${повторитьЧерез.toFixed()}мс`);
				оОбещание = Ждать(оОтменаОбещания, повторитьЧерез);
			} else {
				м_Журнал.Ой('[Twitch] В ответе GQL есть неизвестные ошибки');
				return оРезультат;
			}
			return оОбещание.then(() => м_Загрузчик.Загрузить(оОтменаОбещания, 'POST', 'https://gql.twitch.tv/gql', чЗагружатьНеДольше, оЗаголовкиЗапроса, сЗапрос, сНазваниеЗагрузки, true, 'json')).then(оРезультат => {
				if (оРезультат.errors) {
					if (оРезультат.errors.some(({message}) => message === 'failed integrity check')) {
						м_Журнал.Ой('[Twitch] Серверу не понравился токен GQL');
						if (оЗаголовкиЗапроса['Client-Integrity'] === _сТокенGql && _сТокенGql !== '') {
							очиститьТокенGql();
						}
						throw 'ОТКАЗАНО_В_ДОСТУПЕ';
					}
					м_Журнал.Ой(оРезультат.errors.some(({message}) => message === 'service timeout') ? '[Twitch] Сервер GQL занят' : '[Twitch] В ответе GQL есть неизвестные ошибки');
				}
				return оРезультат;
			});
		});
	}
	function ИзменитьПодпискуЗрителяНаКанал(чПодписка) {
		Проверить(_сИдКанала && _сИдЗрителя && _сТокенЗрителя);
		Проверить(_сИдКанала !== _сИдЗрителя);
		switch (чПодписка) {
		  case ПОДПИСКА_НЕОФОРМЛЕНА:
			неОтслеживатьКанал();
			break;

		  case ПОДПИСКА_НЕУВЕДОМЛЯТЬ:
		  case ПОДПИСКА_УВЕДОМЛЯТЬ:
			отслеживатьКанал(чПодписка);
			break;

		  default:
			Проверить(false);
		}
	}
	function неОтслеживатьКанал() {
		отправитьЗапросGql(null, `mutation($input: UnfollowUserInput!) {\n\t\t\t\tunfollowUser(input: $input) {\n\t\t\t\t\t__typename\n\t\t\t\t}\n\t\t\t}`, {
			input: {
				targetID: _сИдКанала
			}
		}, true, true, true, 'не отслеживать канал').then(оРезультат => {
			if (оРезультат.errors || !оРезультат.data || !оРезультат.data.unfollowUser) {
				throw 'Сервер не смог выполнить операцию';
			}
			м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
				чПодписка: ПОДПИСКА_НЕОФОРМЛЕНА
			});
		}).catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось не отслеживать канал. ${пПричина}`);
				м_Уведомление.ПоказатьЖопу();
				м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
					чПодписка: ПОДПИСКА_НЕДОСТУПНА
				});
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	}
	function отслеживатьКанал(чПодписка) {
		отправитьЗапросGql(null, `mutation($input: FollowUserInput!) {
				followUser(input: $input) {
					error {
						code
					}
					follow {
						user {
							id
						}
					}
				}
			}`, {
			input: {
				disableNotifications: чПодписка === ПОДПИСКА_НЕУВЕДОМЛЯТЬ,
				targetID: _сИдКанала
			}
		}, true, true, true, 'отслеживать канал').then(оРезультат => {
			if (оРезультат.errors || !оРезультат.data || !оРезультат.data.followUser || !оРезультат.data.followUser.follow || !оРезультат.data.followUser.follow.user || оРезультат.data.followUser.error) {
				throw 'Сервер не смог выполнить операцию';
			}
			м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
				чПодписка
			});
		}).catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось отслеживать канал. ${пПричина}`);
				м_Уведомление.ПоказатьЖопу();
				м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
					чПодписка: ПОДПИСКА_НЕДОСТУПНА
				});
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	}
	function этоРекламныйСегмент(сИмяСегмента) {
		return сИмяСегмента !== '' && сИмяСегмента !== 'live';
	}
	let _оНужноОтправить = null;
	function отправитьДанныеСлеженияЗаРекламой(оСписокСегментов) {
		if (_оНужноОтправить !== null && (оСписокСегментов === null || _оНужноОтправить.сТокенРекламы !== оСписокСегментов.сТокенРекламы)) {
			отправитьПросмотрРекламногоБлока(_оНужноОтправить);
			_оНужноОтправить = null;
		}
		if (_оНужноОтправить === null && оСписокСегментов !== null && оСписокСегментов.сТипРекламы) {
			_оНужноОтправить = оСписокСегментов;
		}
	}
	function отправитьПросмотрРекламногоБлока(оСписокСегментов) {
		Ждать(null, 3e3).then(() => {
			return отправитьЗапросGql(null, объединитьЗапросыGql([ создатьСобытиеРекламы('video_ad_impression', оСписокСегментов), создатьСобытиеРекламы('video_ad_quartile_complete', оСписокСегментов, 1), создатьСобытиеРекламы('video_ad_quartile_complete', оСписокСегментов, 2), создатьСобытиеРекламы('video_ad_quartile_complete', оСписокСегментов, 3), создатьСобытиеРекламы('video_ad_quartile_complete', оСписокСегментов, 4), создатьСобытиеРекламы('video_ad_pod_complete', оСписокСегментов) ]), null, true, false, false, `${оСписокСегментов.сТипРекламы} ${оСписокСегментов.сТокенРекламы.slice(-10)}`, 3e4);
		}).then(моРезультаты => {
			for (const оРезультат of моРезультаты) {
				if (оРезультат.errors || !оРезультат.data || !оРезультат.data.recordAdEvent || оРезультат.data.recordAdEvent.error) {
					throw `Сервер не смог выполнить операцию: ${м_Журнал.O(оРезультат)}`;
				}
			}
		}).catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось отправить данные слежения за рекламой. ${пПричина}`);
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	}
	function создатьСобытиеРекламы(сИмяСобытия, оСписокСегментов, чНомерКвартеля) {
		const оДетали = {
			stitched: true,
			player_mute: true,
			player_volume: .5,
			visible: true,
			roll_type: оСписокСегментов.сТипРекламы.toLowerCase()
		};
		switch (сИмяСобытия) {
		  case 'video_ad_quartile_complete':
			оДетали.quartile = чНомерКвартеля;

		  case 'video_ad_impression':
			оДетали.total_ads = оСписокСегментов.кРоликов;
			оДетали.ad_position = оСписокСегментов.чНомерРолика + 1;
			оДетали.duration = Math.round(оСписокСегментов.чПродолжительностьРолика);
			оДетали.ad_id = оСписокСегментов.сИдРолика1;
			оДетали.creative_id = оСписокСегментов.сИдРолика2;
			оДетали.line_item_id = оСписокСегментов.сИдРолика3;
			оДетали.order_id = оСписокСегментов.сИдРолика4;
			break;

		  case 'video_ad_pod_complete':
			оДетали.ad_session_id = оСписокСегментов.сИдРолика5;
			оДетали.format_name = оСписокСегментов.сИдРолика6;
			break;

		  default:
			Проверить(false);
		}
		return создатьТелоЗапросаGql(`mutation($input: RecordAdEventInput!) {
				recordAdEvent(input: $input) {
					error {
						code
					}
				}
			}`, {
			input: {
				eventName: сИмяСобытия,
				eventPayload: JSON.stringify(оДетали),
				radToken: оСписокСегментов.сТокенРекламы
			}
		});
	}
	ПолучитьАбсолютныйАдресСпискаВариантов._чПротухнетПосле = -1;
	ПолучитьАбсолютныйАдресСпискаВариантов._сАдрес = '';
	function ПолучитьАбсолютныйАдресСпискаВариантов(оОтменаОбещания, лБезHttps, лБезРекламы) {
		const ТОКЕН_ПРОТУХНЕТ_ЧЕРЕЗ = 15 * 60 * 1e3;
		if (!лБезРекламы) {
			const чПротухнетЧерез = ПолучитьАбсолютныйАдресСпискаВариантов._чПротухнетПосле - performance.now();
			if (чПротухнетЧерез > 0) {
				м_Журнал.Вот(`[Twitch] До протухания токена трансляции осталось ${м_Журнал.F0(чПротухнетЧерез / 1e3)}с`);
				return Promise.resolve(ПолучитьАбсолютныйАдресСпискаВариантов._сАдрес);
			}
		}
		return отправитьЗапросGql(оОтменаОбещания, `query(
				$login: String!
				$playerType: String!
				$disableHTTPS: Boolean!
			) {
				streamPlaybackAccessToken(
					channelName: $login
					params: {
						disableHTTPS: $disableHTTPS
						playerType: $playerType
						platform: "web"
						playerBackend: "mediaplayer"
					}
				) {
					value
					signature
				}
			}`, {
			login: _сКодКанала,
			playerType: лБезРекламы ? 'picture-by-picture' : 'site',
			disableHTTPS: лБезHttps
		}, true, false, true, `токен трансляции ${+лБезРекламы}`).then(оРезультат => {
			const сТокен = цепочка(оРезультат.data, 'streamPlaybackAccessToken', 'value');
			const сПодпись = цепочка(оРезультат.data, 'streamPlaybackAccessToken', 'signature');
			м_Отладка.сохранитьТокенТрансляции(`ИдУстройства=${_сИдУстройства} ТокенЗрителя=${Boolean(_сТокенЗрителя)}\n${сТокен}`, лБезРекламы);
			if (!ЭтоНепустаяСтрока(сТокен) || !ЭтоНепустаяСтрока(сПодпись)) {
				if (оРезультат.errors) {
					throw 'Сервер не смог выполнить операцию';
				}
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0203');
			}
			const оТокен = JSON.parse(сТокен);
			Проверить(оТокен.channel === _сКодКанала);
			if (оТокен.ci_gb) {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0217');
			}
			if (_сИдКанала === '') {
				Проверить(оТокен.channel_id);
				_сИдКанала = String(оТокен.channel_id);
				setTimeout(ДобавитьОбработчикИсключений(обновитьМетаданныеЗрителяИКанала));
			} else {
				Проверить(_сИдКанала === String(оТокен.channel_id));
			}
			let сАдрес = `${лБезHttps ? 'http' : 'https'}://usher.ttvnw.net/api/channel/hls/${encodeURIComponent(_сКодКанала)}.m3u8` + '?allow_source=true' + '&allow_audio_only=true' + '&cdm=wv' + '&fast_bread=true' + '&platform=web' + '&player_backend=mediaplayer' + '&playlist_include_framerate=true' + '&reassignments_supported=true' + '&supported_codecs=h264' + '&transcode_mode=cbr_v1' + `&p=${Math.floor(Math.random() * 9999999)}` + `&token=${encodeURIComponent(сТокен)}` + `&sig=${encodeURIComponent(сПодпись)}`;
			if (!лБезРекламы) {
				_sPlaySessionID = создатьУникальныйИдентификатор(32);
				сАдрес += `&play_session_id=${_sPlaySessionID}`;
				ПолучитьАбсолютныйАдресСпискаВариантов._сАдрес = сАдрес;
				ПолучитьАбсолютныйАдресСпискаВариантов._чПротухнетПосле = performance.now() + ТОКЕН_ПРОТУХНЕТ_ЧЕРЕЗ;
			}
			return сАдрес;
		});
	}
	function очиститьТокенGql() {
		_сТокенGql = '';
		удалитьПеченьку('tw5~gqltoken', 'https://www.twitch.tv/tw5~storage/').catch(м_Отладка.ПойманоИсключение);
	}
	function получитьУникальныйИдентификаторУстройства() {
		return '0000000000000000' + (м_Настройки.Получить('чСлучайноеЧисло') || .1).toFixed(16).slice(2);
	}
	function разобратьПеченькуАвторизации(сПеченька) {
		if (сПеченька) {
			try {
				const о = JSON.parse(decodeURIComponent(сПеченька));
				Проверить(ЭтоОбъект(о) && ЭтоНепустаяСтрока(о.id) && ЭтоНепустаяСтрока(о.login) && ЭтоНепустаяСтрока(о.authToken));
				return о;
			} catch (_) {}
			м_Журнал.Ой(`[Twitch] Не удалось разобрать печеньку авторизации: ${сПеченька}`);
		}
		return {
			id: '',
			login: '',
			authToken: '',
			displayName: ''
		};
	}
	function разобратьПеченькуТокенаGql(сПеченька) {
		if (сПеченька) {
			try {
				const о = JSON.parse(decodeURIComponent(сПеченька));
				Проверить(ЭтоНепустаяСтрока(о.сТокен) && Number.isSafeInteger(о.чПротухнетПосле));
				return [ о.сТокен, о.чПротухнетПосле ];
			} catch (_) {
				м_Журнал.Ой(`[Twitch] Не удалось разобрать печеньку токена GQL: ${сПеченька}`);
			}
		}
		return [ '', 0 ];
	}
	function разобратьПеченьку(чДействие, {name, domain, path, value}) {
		if (чДействие === 3 || typeof value != 'string') {
			value = '';
		}
		switch (name) {
		  case 'twilight-user':
			if (domain === '.twitch.tv' && path === '/') {
				const {id, login, authToken, displayName} = разобратьПеченькуАвторизации(value);
				if (чДействие !== 1 && (_сИдЗрителя !== id || _сКодЗрителя !== login || _сТокенЗрителя !== authToken)) {
					м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0222');
				}
				_сИдЗрителя = id;
				_сКодЗрителя = login;
				_сТокенЗрителя = authToken;
				_сИмяЗрителя = ЭтоНепустаяСтрока(displayName) ? displayName : login;
			}
			break;

		  case 'unique_id':
			if (domain === '.twitch.tv' && path === '/' && чДействие === 1 && _сИдУстройства === '') {
				_сИдУстройства = value;
			}
			break;

		  case 'tw5~gqltoken':
			if (domain === 'www.twitch.tv' && path === '/tw5~storage/') {
				[_сТокенGql, _чТокенGqlПротухнетПосле] = разобратьПеченькуТокенаGql(value);
				if (получитьТокенGql.фИзменилсяТокенGql) {
					получитьТокенGql.фИзменилсяТокенGql();
				}
			}
		}
	}
	function запустить(сКодКанала) {
		Проверить(ЭтоНепустаяСтрока(сКодКанала));
		_сКодКанала = сКодКанала;
		return получитьВсеПеченьки('https://www.twitch.tv/tw5~storage/').then(моПеченьки => {
			for (const оПеченька of моПеченьки) {
				разобратьПеченьку(1, оПеченька);
			}
			if (_сИдУстройства === '') {
				м_Журнал.Ой('[Twitch] Не найден идентификатор устройства');
				_сИдУстройства = получитьУникальныйИдентификаторУстройства();
			}
			chrome.cookies.onChanged.addListener(ДобавитьОбработчикИсключений(({removed, cause, cookie}) => {
				if (!(removed && cause === 'overwrite')) {
					разобратьПеченьку(removed ? 3 : 2, cookie);
				}
			}));
		});
	}
	function обновитьМетаданныеЗрителяИКанала() {
		Проверить(_сИдКанала);
		отправитьЗапросGql(null, `query($login: String!, $skip: Boolean!) {
				user(login: $login) {
					broadcastSettings {
						language
					}
					createdAt
					description
					displayName
					followers {
						totalCount
					}
					id
					lastBroadcast {
						startedAt
					}
					primaryTeam {
						displayName
						name
					}
					profileImageURL(width: 70)
					self @skip(if: $skip) {
						canFollow
						follower {
							disableNotifications
						}
					}
				}
			}`, {
			login: _сКодКанала,
			skip: _сКодКанала === _сКодЗрителя
		}, true, false, true, 'метаданные канала').then(оРезультат => {
			if (!оРезультат.data) {
				throw 'В ответе сервера нет метаданных';
			}
			const oUser = оРезультат.data.user;
			if (!oUser) {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0203');
			}
			Проверить(oUser.id === _сИдКанала);
			const сКодЯзыка = цепочка(oUser.broadcastSettings, 'language');
			const моКоманды = [];
			if (oUser.primaryTeam) {
				моКоманды.push({
					сАдрес: получитьАдресКоманды(oUser.primaryTeam.name),
					сИмя: oUser.primaryTeam.displayName || oUser.primaryTeam.name
				});
			}
			const чПодписка = !цепочка(oUser.self, 'canFollow') ? ПОДПИСКА_НЕДОСТУПНА : !oUser.self.follower ? ПОДПИСКА_НЕОФОРМЛЕНА : oUser.self.follower.disableNotifications ? ПОДПИСКА_НЕУВЕДОМЛЯТЬ : ПОДПИСКА_УВЕДОМЛЯТЬ;
			м_События.ПослатьСобытие('twitch-полученыметаданныеканала', {
				сИмя: oUser.displayName || _сКодКанала,
				сАватар: oUser.profileImageURL || 'player.svg#svg-missingavatar',
				сОписание: oUser.description,
				сКодЯзыка: сКодЯзыка && сКодЯзыка !== 'OTHER' ? сКодЯзыка : null,
				кПодписчиков: цепочка(oUser.followers, 'totalCount'),
				чКаналСоздан: Date.parse(oUser.createdAt),
				моКоманды
			});
			м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
				сИмя: _сИмяЗрителя,
				чПодписка
			});
		}).catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось получить метаданные канала. ${пПричина}`);
				м_События.ПослатьСобытие('twitch-полученыметаданныеканала', {
					сИмя: _сКодКанала,
					сАватар: 'player.svg#svg-missingavatar',
					сКодЯзыка: null,
					кПодписчиков: null,
					чКаналСоздан: null
				});
				м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
					сИмя: _сИмяЗрителя,
					чПодписка: ПОДПИСКА_НЕДОСТУПНА
				});
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	}
	function ОбновитьМетаданныеТрансляции(оОтменаОбещания, чЧерез) {
		Проверить(_сИдКанала);
		м_Журнал.Вот(`[Twitch] Загрузка метаданных трансляции начнется через ${м_Журнал.F0(чЧерез)}мс`);
		Ждать(оОтменаОбещания, чЧерез).then(() => {
			return отправитьЗапросGql(оОтменаОбещания, `query($id: ID!, $all: Boolean!) {
					user(id: $id) {
						broadcastSettings {
							game {
								displayName
								slug
							}
							title
						}
						login
						stream {
							archiveVideo @include(if: $all) {
								id
							}
							createdAt
							id
							type
							viewersCount
						}
					}
				}`, {
				id: _сИдКанала,
				all: _сИдТрансляции === ''
			}, false, false, true, 'метаданные трансляции');
		}).then(оРезультат => {
			const oUser = цепочка(оРезультат.data, 'user');
			const сКодКанала = цепочка(oUser, 'login');
			if (сКодКанала !== _сКодКанала && ЭтоНепустаяСтрока(сКодКанала)) {
				м_Журнал.Ой(`[Twitch] Новый код канала ${сКодКанала}`);
				location.replace(`?channel=${encodeURIComponent(сКодКанала)}`);
				return;
			}
			const оМетаданные = {
				кЗрителей: цепочка(oUser, 'stream', 'viewersCount')
			};
			const сИдТрансляции = цепочка(oUser, 'stream', 'id');
			if (_сИдТрансляции === '' && ЭтоНепустаяСтрока(сИдТрансляции)) {
				м_Журнал.Окак(`[Twitch] Идентификатор трансляции ${сИдТрансляции}`);
				_сИдТрансляции = сИдТрансляции;
				начатьСлежениеЗаПросмотром();
				const сИдЗаписи = цепочка(oUser, 'stream', 'archiveVideo', 'id');
				_сАдресЗаписи = ЭтоНепустаяСтрока(сИдЗаписи) ? ПолучитьАдресЗаписи(сИдЗаписи) : '';
				const сТипТрансляции = цепочка(oUser, 'stream', 'type');
				оМетаданные.сТипТрансляции = сТипТрансляции === 'live' ? 'прямая' : сТипТрансляции === 'rerun' ? 'повтор' : null;
			}
			if (_сИдТрансляции === '' || _сИдТрансляции === сИдТрансляции) {
				const сНазваниеТрансляции = цепочка(oUser, 'broadcastSettings', 'title');
				if (typeof сНазваниеТрансляции == 'string') {
					оМетаданные.сНазваниеТрансляции = сНазваниеТрансляции.trim() || Текст('J0103');
				}
				оМетаданные.сНазваниеИгры = цепочка(oUser, 'broadcastSettings', 'game', 'displayName');
				const сАдресИгры = цепочка(oUser, 'broadcastSettings', 'game', 'slug');
				if (сАдресИгры) {
					оМетаданные.сАдресИгры = получитьАдресКатегории(сАдресИгры);
				}
				оМетаданные.чДлительностьТрансляции = performance.now() + г_чТочноеВремя - Date.parse(цепочка(oUser, 'stream', 'createdAt'));
			}
			м_События.ПослатьСобытие('twitch-полученыметаданныетрансляции', оМетаданные);
			ОбновитьМетаданныеТрансляции(оОтменаОбещания, ИНТЕРВАЛ_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ТРАНСЛЯЦИИ);
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось загрузить метаданные трансляции. ${пПричина}`);
				ОбновитьМетаданныеТрансляции(оОтменаОбещания, ИНТЕРВАЛ_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ТРАНСЛЯЦИИ / 2);
			} else if (пПричина === ОтменаОбещания.ПРИЧИНА) {
				м_Журнал.Вот('[Twitch] Отменено обновление метаданных трансляции');
			} else {
				throw пПричина;
			}
		}));
	}
	function НачатьСборМетаданныхТрансляции() {
		ОчиститьДанныеТрансляции();
		Проверить(!_оОтменаОбновленияМетаданных);
		_оОтменаОбновленияМетаданных = new ОтменаОбещания();
		ОбновитьМетаданныеТрансляции(_оОтменаОбновленияМетаданных, 0);
	}
	function ЗавершитьСборМетаданныхТрансляции(лТрансляцияЗавершена) {
		if (лТрансляцияЗавершена) {
			ОчиститьДанныеТрансляции();
		}
		if (_оОтменаОбновленияМетаданных) {
			м_Журнал.Вот(`[Twitch] Отменяю цепочку обновления метаданных трансляции ТрансляцияЗавершена=${лТрансляцияЗавершена}`);
			_оОтменаОбновленияМетаданных.Отменить();
			_оОтменаОбновленияМетаданных = null;
		}
		завершитьСлежениеЗаПросмотром();
	}
	function начатьСлежениеЗаПросмотром() {
		if (_сИдЗрителя !== '') {
			м_Журнал.Вот('[Twitch] Начинаю слежение за просмотром');
			Проверить(_чТаймерСлеженияЗаПросмотром === 0);
			_чТаймерСлеженияЗаПросмотром = setInterval(отправитьДанныеСлеженияЗаПросмотром, ИНТЕРВАЛ_СЛЕЖЕНИЯ_ЗА_ПРОСМОТРОМ);
			отправитьДанныеСлеженияЗаПросмотром();
		}
	}
	function завершитьСлежениеЗаПросмотром() {
		if (_чТаймерСлеженияЗаПросмотром !== 0) {
			м_Журнал.Вот('[Twitch] Завершаю слежение за просмотром');
			clearInterval(_чТаймерСлеженияЗаПросмотром);
			_чТаймерСлеженияЗаПросмотром = 0;
		}
	}
	const отправитьДанныеСлеженияЗаПросмотром = ДобавитьОбработчикИсключений(() => {
		Проверить(_сИдТрансляции && _сИдКанала && _сИдЗрителя);
		const оОтправить = new URLSearchParams();
		оОтправить.set('data', btoa(JSON.stringify([ {
			event: 'minute-watched',
			properties: {
				broadcast_id: _сИдТрансляции,
				channel_id: _сИдКанала,
				user_id: Number(_сИдЗрителя),
				player: 'site'
			}
		} ])));
		м_Загрузчик.Загрузить(null, 'POST', _сАдресСлеженияЗаПросмотром, ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ, null, оОтправить, 'слежение за просмотром', false, 'none').catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось отправить данные слежения за просмотром. ${пПричина}`);
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	});
	function ПолучитьАдресЗаписиДляТекущейПозиции() {
		if (_сАдресЗаписи === '') {
			м_Журнал.Ой('[Twitch] Адрес записи не известен');
			return '';
		}
		const чПозиция = м_Проигрыватель.ПолучитьПозициюВоспроизведенияТрансляции(false);
		if (чПозиция === -1) {
			м_Журнал.Вот('[Twitch] Адрес записи создан без позиции воспроизведения');
			return _сАдресЗаписи;
		}
		return `${_сАдресЗаписи}?t=${Math.floor(чПозиция / 60 / 60)}h${Math.floor(чПозиция / 60 % 60)}m${Math.floor(чПозиция % 60)}s`;
	}
	function СоздатьКлип() {
		const чПозиция = м_Проигрыватель.ПолучитьПозициюВоспроизведенияТрансляции(true);
		if (_сИдТрансляции === '' || чПозиция <= 0) {
			м_Журнал.Ой(`[Twitch] Недостаточно данных для создания клипа ИдТрансляции=${_сИдТрансляции} Позиция=${чПозиция}`);
			м_Уведомление.ПоказатьЖопу();
		} else {
			м_Журнал.Окак(`[Twitch] Создаю клип ИдТрансляции=${_сИдТрансляции} Позиция=${чПозиция} ИдЗрителя=${_сИдЗрителя}`);
			м_Уведомление.Показать('svg-cut', false);
			ОткрытьАдресВНовойВкладке(`https://clips.twitch.tv/create?${new URLSearchParams({
				broadcastID: _сИдТрансляции,
				broadcasterLogin: _сКодКанала,
				offsetSeconds: Math.ceil(чПозиция)
			})}`);
		}
	}
	function ПолучитьАбсолютныйАдресСпискаСегментов(сАбсолютныйАдресСпискаСегментов) {
		return сАбсолютныйАдресСпискаСегментов;
	}
	function сортироватьСписокВариантов(оСписокВариантов) {
		if (оСписокВариантов.сАдресСлеженияЗаПросмотром) {
			_сАдресСлеженияЗаПросмотром = оСписокВариантов.сАдресСлеженияЗаПросмотром;
		}
		return оСписокВариантов;
	}
	const обработатьСообщениеЧата = ДобавитьОбработчикИсключений((оСообщение, оОтправитель, фОтветить) => {
		if (оСообщение.сЗапрос !== 'ВставитьСторонниеРасширения') {
			return false;
		}
		if ((оОтправитель.tab ? оОтправитель.tab.id : chrome.tabs.TAB_ID_NONE) !== получитьТекущуюВкладку.чИдВкладки) {
			return false;
		}
		м_Журнал.Вот('[Twitch] Получен запрос на вставку сторонних расширений');
		chrome.management.getAll(ДобавитьОбработчикИсключений(моРасширения => {
			if (chrome.runtime.lastError) {
				throw new Error(`Не удалось получить список расширений: ${chrome.runtime.lastError.message}`);
			}
			//! Send to content script a list of known browser extensions that are currently installed and enabled in the browser.
			//! These extensions will be loaded into <iframe>. See вставитьСторонниеРасширения() in content.js.
			//! Chrome itself cannot load installed extensions into another extension.
			//! See https://bugs.chromium.org/p/chromium/issues/detail?id=599167
						оСообщение.сСторонниеРасширения = '';
			for (let оРасширение of моРасширения) {
				if (оРасширение.enabled) {
					switch (оРасширение.id) {
					  case /*! Chrome */ 'ajopnjidmegmdimjlfnijceegpefgped':
					  case /*! Opera  */ 'deofbbdfofnmppcjbhjibgodpcdchjii':
					  case /*! Edge   */ 'icllegkipkooaicfmdfaloehobmglglb':
						
						//! BetterTTV browser extension
						//! https://betterttv.com/
						//! https://chrome.google.com/webstore/detail/ajopnjidmegmdimjlfnijceegpefgped
						оСообщение.сСторонниеРасширения += 'BTTV ';
						break;

					  case /*! Chrome */ 'fadndhdgpmmaapbmfcknlfgcflmmmieb':
					  case /*! Opera  */ 'djkpepcignmpfblhbfpmlhoindhndkdj':
						
						//! FrankerFaceZ browser extension
						//! https://www.frankerfacez.com/
						//! https://chrome.google.com/webstore/detail/fadndhdgpmmaapbmfcknlfgcflmmmieb
						оСообщение.сСторонниеРасширения += 'FFZ ';
					}
				}
			}
			м_Журнал.Вот(`[Twitch] Посылаю ответ на вставку сторонних расширений: ${оСообщение.сСторонниеРасширения}`);
			try {
				фОтветить(оСообщение);
			} catch (пИсключение) {
				м_Журнал.Ой(`[Twitch] Ошибка при посылке ответа: ${пИсключение}`);
			}
		}));
		return true;
	});
	function открытьЧат() {
		chrome.runtime.onMessage.addListener(обработатьСообщениеЧата);
		return ПолучитьАдресПанелиЧата();
	}
	function закрытьЧат() {
		chrome.runtime.onMessage.removeListener(обработатьСообщениеЧата);
	}
	return {
		этоРекламныйСегмент,
		отправитьДанныеСлеженияЗаРекламой,
		ПолучитьАбсолютныйАдресСпискаВариантов,
		ПолучитьАбсолютныйАдресСпискаСегментов,
		ПолучитьАдресКанала,
		проверитьДоступностьАдреса,
		НачатьСборМетаданныхТрансляции,
		ЗавершитьСборМетаданныхТрансляции,
		ИзменитьПодпискуЗрителяНаКанал,
		ПолучитьАдресЗаписиДляТекущейПозиции,
		СоздатьКлип,
		сортироватьСписокВариантов,
		открытьЧат,
		закрытьЧат,
		запустить
	};
})();

function ЗавершитьРаботу(лБыстро) {
	try {
		г_лРаботаЗавершена = true;
		м_Журнал.Окак('[Запускалка] Завершаю работу');
		window.stop();
		if (!лБыстро) {
			м_Преобразователь.Остановить();
			м_Проигрыватель.Остановить();
			м_Помойка.Сжечь();
		}
		м_Журнал.Окак('[Запускалка] Работа завершена');
	} catch (_) {}
}

ДобавитьОбработчикИсключений(() => {
	function ЭтотКаналУжеОткрыт(сКанал) {
		Проверить(ЭтоНепустаяСтрока(сКанал));
		chrome.runtime.sendMessage({
			сЗапрос: 'ЭтотКаналУжеОткрыт',
			сКанал
		}, пОтвет => {
			if (пОтвет === true) {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0211');
			}
		});
		chrome.runtime.onMessage.addListener(ДобавитьОбработчикИсключений((оСообщение, _, фОтветить) => {
			if (оСообщение.сЗапрос === 'ЭтотКаналУжеОткрыт') {
				м_Журнал.Ой(`[Запускалка] В другой вкладке открыт канал ${оСообщение.сКанал}`);
				if (оСообщение.сКанал === сКанал) {
					фОтветить(true);
				}
			}
		}));
	}
	function ОбработатьВыгрузкуСтраницы(оСобытие) {
		м_Журнал.Окак(`[Запускалка] window.on${оСобытие.type}`);
		ЗавершитьРаботу(true);
	}
	function НачатьРаботу() {
		Проверить(!г_лРаботаЗавершена);
		м_Журнал.Вот(`[Запускалка] Начало работы ${performance.now().toFixed()}мс`);
		window.addEventListener('unload', ОбработатьВыгрузкуСтраницы);
		м_Управление.Запустить();
		if (м_Проигрыватель.Запустить()) {
			м_Список.Запустить();
		} else {
			м_Управление.ОстановитьПросмотрТрансляции();
		}
		м_Статистика.Запустить();
	}
	if (window.top !== window) {
		return;
	}
	if (navigator.userAgent.includes('Gecko/')) {
		м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0204');
	}
	const сКанал = (new URLSearchParams(location.search.slice(1)).get('channel') || 'channel').toLowerCase();
	ЭтотКаналУжеОткрыт(сКанал);
	Promise.all([ проверитьРазрешенияРасширения(), м_Настройки.Восстановить(), получитьТекущуюВкладку() ]).then(() => м_Twitch.запустить(сКанал)).then(НачатьРаботу).catch(м_Отладка.ПойманоИсключение);
})();


================================================
FILE: pointerevent.js
================================================
(() => {
	'use strict';
	const _оСвойства = {
		pointerId: 0,
		width: 1,
		height: 1,
		pressure: 0,
		tangentialPressure: 0,
		tiltX: 0,
		tiltY: 0,
		twist: 0,
		pointerType: '',
		isPrimary: false
	};
	class PointerEvent extends MouseEvent {
		constructor(сТипСобытия, оПараметры = {}) {
			super(сТипСобытия, оПараметры);
			const оОпределениеСвойства = {
				enumerable: true,
				configurable: true
			};
			for (const сИмя of Object.keys(_оСвойства)) {
				if (сИмя in оПараметры) {
					if (typeof оПараметры[сИмя] != typeof _оСвойства[сИмя] || Number.isNaN(оПараметры[сИмя])) {
						throw new TypeError(`В конструктор PointerEvent передан параметр ${сИмя} недопустимого типа`);
					}
					оОпределениеСвойства.value = оПараметры[сИмя];
				} else {
					оОпределениеСвойства.value = _оСвойства[сИмя];
				}
				Object.defineProperty(this, сИмя, оОпределениеСвойства);
			}
		}
	}
	let _лЗадерживатьСообщенияМыши = false;
	function СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, сТипСобытия, button) {
		const оПараметры = {};
		оПараметры.bubbles = оСобытиеМыши.bubbles;
		оПараметры.cancelable = оСобытиеМыши.cancelable;
		оПараметры.composed = true;
		оПараметры.view = оСобытиеМыши.view;
		оПараметры.ctrlKey = оСобытиеМыши.ctrlKey;
		оПараметры.shiftKey = оСобытиеМыши.shiftKey;
		оПараметры.altKey = оСобытиеМыши.altKey;
		оПараметры.metaKey = оСобытиеМыши.metaKey;
		оПараметры.modifierAltGraph = оСобытиеМыши.getModifierState('AltGraph');
		оПараметры.modifierCapsLock = оСобытиеМыши.getModifierState('CapsLock');
		оПараметры.modifierNumLock = оСобытиеМыши.getModifierState('NumLock');
		оПараметры.modifierScrollLock = оСобытиеМыши.getModifierState('ScrollLock');
		оПараметры.screenX = оСобытиеМыши.screenX;
		оПараметры.screenY = оСобытиеМыши.screenY;
		оПараметры.clientX = оСобытиеМыши.clientX;
		оПараметры.clientY = оСобытиеМыши.clientY;
		оПараметры.button = button;
		оПараметры.buttons = оСобытиеМыши.buttons;
		оПараметры.relatedTarget = оСобытиеМыши.relatedTarget;
		оПараметры.pressure = оПараметры.buttons === 0 ? 0 : .5;
		оПараметры.pointerType = 'mouse';
		оПараметры.isPrimary = true;
		const оСобытиеУказателя = new PointerEvent(сТипСобытия, оПараметры);
		Object.defineProperty(оСобытиеУказателя, 'timeStamp', {
			enumerable: true,
			configurable: true,
			value: оСобытиеМыши.timeStamp
		});
		const лОтменено = !оСобытиеМыши.target.dispatchEvent(оСобытиеУказателя);
		if (лОтменено) {
			оСобытиеМыши.preventDefault();
		}
		return лОтменено;
	}
	const ОбработатьMouseDown = ДобавитьОбработчикИсключений(оСобытиеМыши => {
		if ((оСобытиеМыши.buttons & оСобытиеМыши.buttons - 1) == 0) {
			_лЗадерживатьСообщенияМыши = СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, 'pointerdown', оСобытиеМыши.button);
		} else {
			СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, 'pointermove', оСобытиеМыши.button);
		}
		if (_лЗадерживатьСообщенияМыши) {
			оСобытиеМыши.stopImmediatePropagation();
		}
	});
	const ОбработатьMouseMove = ДобавитьОбработчикИсключений(оСобытиеМыши => {
		СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, 'pointermove', -1);
		if (_лЗадерживатьСообщенияМыши) {
			оСобытиеМыши.stopImmediatePropagation();
		}
	});
	const ОбработатьMouseUp = ДобавитьОбработчикИсключений(оСобытиеМыши => {
		if (оСобытиеМыши.buttons === 0) {
			СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, 'pointerup', оСобытиеМыши.button);
		} else {
			СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, 'pointermove', оСобытиеМыши.button);
		}
		if (_лЗадерживатьСообщенияМыши) {
			оСобытиеМыши.stopImmediatePropagation();
		}
		if (оСобытиеМыши.buttons === 0) {
			_лЗадерживатьСообщенияМыши = false;
		}
	});
	const ОбработатьMouseOver = ДобавитьОбработчикИсключений(оСобытиеМыши => {
		СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, 'pointerover', -1);
	});
	const ОбработатьMouseOut = ДобавитьОбработчикИсключений(оСобытиеМыши => {
		СоздатьИПослатьСобытиеУказателяДляМыши(оСобытиеМыши, 'pointerout', -1);
	});
	Object.defineProperty(window, 'PointerEvent', {
		writable: true,
		configurable: true,
		value: PointerEvent
	});
	м_Журнал.Ой('[PointerEvent] Использую события мыши');
	window.addEventListener('mousedown', ОбработатьMouseDown, true);
	window.addEventListener('mousemove', ОбработатьMouseMove, true);
	window.addEventListener('mouseup', ОбработатьMouseUp, true);
	window.addEventListener('mouseover', ОбработатьMouseOver, true);
	window.addEventListener('mouseout', ОбработатьMouseOut, true);
})();


================================================
FILE: recycler.js
================================================
ï»¿'use strict';

self.onmessage = e =>
{
	if (!e.data)
	{
		close();
	}
};


================================================
FILE: report.css
================================================
@charset "utf-8";.отладка-сообщение{color:#fff;background:#6441a5}.отладка-отзыв{color:#fff;background:linear-gradient(#1f5cad ,#3171c4 18px,#0f2e57) fixed}.отладка-ошибка,.отладка-сбойотправки{color:#fff;background:linear-gradient(#420000,#790303 30px,#4a0000) fixed}.отладка-браузерустарел,.отладка-версияустарела{color:#fff;background:#f40}body{display:flex;font:15px/1.5 sans-serif}form{max-width:62em;margin:auto;padding:0 1em;text-align:center}#отладка-сообщение,#отладка-отзыв,#отладка-ошибка{text-align:justify}a{border-bottom:1px solid;text-decoration:none;color:currentColor}a:not([href]){display:none}.отладка-ссылкакнопка{border-bottom:1px dashed;cursor:pointer}a:hover,.отладка-ссылкакнопка:hover{opacity:.85}textarea,input[type=email]{display:block;width:100%;line-height:inherit}textarea[name=отладка-отчет]{font:13px/1.5 Consolas,Monaco,"Liberation Mono","Lucida Console",monospace}input[type=checkbox]:not(:checked)+[name=отладка-отчет]{display:none}#отладка-текстсообщения{white-space:pre-wrap}button[type=submit]{min-width:11em;margin-right:1em}::selection{color:#fff;background-color:#1e9628;text-shadow:none}


================================================
FILE: report.html
================================================
<!doctype html><html dir=ltr><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1"><title></title><link rel=stylesheet href=common.css><link rel=stylesheet href=report.css><form id=отладка-сообщение hidden><p><span id=отладка-текстсообщения></span> <a id=отладка-ссылкасообщения target=_top rel="noopener noreferrer"></a></form><form id=отладка-отзыв hidden><h3 data-i18n=F0700></h3><div data-i18n=F1501></div><p data-i18n=F0701><p data-i18n=F0726><p data-i18n=F0727><p data-i18n=F0723><p><label for=отладка-отзыв-сообщение data-i18n=F0702></label> <textarea id=отладка-отзыв-сообщение name=отладка-сообщение rows=6 minlength=4 maxlength=10000 spellcheck=true required autofocus></textarea><p><label><span data-i18n=F0703></span> <span data-i18n=F0728></span> <input name=отладка-почта type=email maxlength=254 spellcheck=false></label><p><span data-i18n=F0704></span> <label for=отладка-отзыв-показатьотчет class=отладка-ссылкакнопка data-i18n=F0705></label>. <input id=отладка-отзыв-показатьотчет type=checkbox hidden> <textarea name=отладка-отчет rows=15 spellcheck=false required readonly></textarea> <a href=https://coolcmd.github.io/privacy.html target=_blank rel="noopener noreferrer" data-i18n=F0706></a>.<p><button type=submit data-i18n=F0707></button> <button type=reset data-i18n=F0718></button></p><input name=отладка-типданных type=hidden value=отзыв></form><form id=отладка-ошибка hidden><h3 data-i18n=F0708></h3><p><span data-i18n=F0712></span> <label for=отладка-ошибка-показатьотчет class=отладка-ссылкакнопка data-i18n=F0705></label>. <input id=отладка-ошибка-показатьотчет type=checkbox hidden> <textarea name=отладка-отчет rows=15 spellcheck=false required readonly></textarea> <a href=https://coolcmd.github.io/privacy.html target=_blank rel="noopener noreferrer" data-i18n=F0706></a>.<p data-i18n=F0710><p><label for=отладка-ошибка-сообщение data-i18n=F0715></label> <textarea id=отладка-ошибка-сообщение name=отладка-сообщение rows=3 maxlength=10000 spellcheck=true></textarea><p><label><span data-i18n=F0703></span> <span data-i18n=F0728></span> <input name=отладка-почта type=email maxlength=254 spellcheck=false></label><p><button type=submit autofocus data-i18n=F0707></button></p><input name=отладка-типданных type=hidden value=ошибка></form><form id=отладка-идетотправка hidden><p><span data-i18n=F0717></span>  <progress id=отладка-ходотправки></progress></p><button type=submit autofocus data-i18n=F0718></button></form><form id=отладка-сбойотправки hidden><p data-i18n=F0719></p><button type=submit autofocus data-i18n=F0720></button> <button type=reset data-i18n=F0718></button></form><form id=отладка-браузерустарел hidden><p data-i18n=F0730></form><form id=отладка-версияустарела hidden><p data-i18n=F0729></form>


================================================
FILE: wasm.wasm
================================================
[Non-text file]


================================================
FILE: worker.js
================================================
'use strict';

var ДЕЛАТЬ_ПЕРВЫЙ_КАДР_КЛЮЧЕВЫМ = получитьВерсиюДвижкаБраузера() < 50;

var СОСТОЯНИЕ_СМЕНА_ВАРИАНТА = 9;

function Проверить(пУсловие) {
	if (!пУсловие) {
		throw new Error('Проверка не пройдена');
	}
}

function получитьВерсиюДвижкаБраузера() {
	if (!получитьВерсиюДвижкаБраузера.hasOwnProperty('_чРезультат')) {
		if (navigator.userAgentData) {
			for (const {brand, version} of navigator.userAgentData.brands) {
				if (brand === 'Chromium' || brand === 'Google Chrome') {
					получитьВерсиюДвижкаБраузера._чРезультат = Number.parseInt(version, 10);
					break;
				}
			}
		}
		if (!получитьВерсиюДвижкаБраузера._чРезультат) {
			получитьВерсиюДвижкаБраузера._чРезультат = navigator.userAgent ? Number.parseInt(/Chrome\/(\d+)/.exec(navigator.userAgent)[1], 10) : 89;
		}
	}
	return получитьВерсиюДвижкаБраузера._чРезультат;
}

function этоМобильноеУстройство() {
	if (!этоМобильноеУстройство.hasOwnProperty('_лРезультат')) {
		этоМобильноеУстройство._лРезультат = navigator.userAgentData ? navigator.userAgentData.mobile : navigator.userAgent.includes('Android');
	}
	return этоМобильноеУстройство._лРезультат;
}

if (получитьВерсиюДвижкаБраузера() < 58) {
	Uint8Array.prototype.copyWithin = function(target, begin, end) {
		target |= 0;
		begin |= 0;
		end |= 0;
		var c = end - begin | 0;
		if ((c | 0) > 70) {
			this.set(new Uint8Array(this.buffer, begin, c), target);
		} else {
			while ((begin | 0) < (end | 0)) {
				this[target] = this[begin];
				target = target + 1 | 0;
				begin = begin + 1 | 0;
			}
		}
	};
}

if (получитьВерсиюДвижкаБраузера() >= 70) {
	var СоздатьDataView = мбБуфер => new DataView(мбБуфер.buffer);
} else {
	СоздатьDataView = (мбБуфер => мбБуфер);
	Uint8Array.prototype.getUint8 = function(у) {
		у |= 0;
		return this[у];
	};
	Uint8Array.prototype.getInt16 = function(у) {
		у |= 0;
		return this[у] << 24 >> 16 | this[у + 1 | 0];
	};
	Uint8Array.prototype.getUint16 = function(у) {
		у |= 0;
		return this[у] << 8 | this[у + 1 | 0];
	};
	Uint8Array.prototype.getInt32 = function(у) {
		у |= 0;
		return this[у] << 24 | this[у + 1 | 0] << 16 | this[у + 2 | 0] << 8 | this[у + 3 | 0];
	};
	Uint8Array.prototype.getUint32 = function(у) {
		у |= 0;
		return (this[у] << 24 | this[у + 1 | 0] << 16 | this[у + 2 | 0] << 8 | this[у + 3 | 0]) >>> 0;
	};
	Uint8Array.prototype.setInt8 = Uint8Array.prototype.setUint8 = function(у, чЗначение) {
		у |= 0;
		чЗначение |= 0;
		this[у] = чЗначение;
	};
	Uint8Array.prototype.setInt16 = Uint8Array.prototype.setUint16 = function(у, чЗначение) {
		у |= 0;
		чЗначение |= 0;
		this[у] = чЗначение >> 8;
		this[у + 1 | 0] = чЗначение;
	};
	Uint8Array.prototype.setInt32 = Uint8Array.prototype.setUint32 = function(у, чЗначение) {
		у |= 0;
		чЗначение |= 0;
		this[у] = чЗначение >> 24;
		this[у + 1 | 0] = чЗначение >> 16;
		this[у + 2 | 0] = чЗначение >> 8;
		this[у + 3 | 0] = чЗначение;
	};
}

Uint8Array.prototype.getUint64 = function(у) {
	у |= 0;
	return ((this[у] << 24 | this[у + 1 | 0] << 16 | this[у + 2 | 0] << 8 | this[у + 3 | 0]) >>> 0) * 4294967296 + ((this[у + 4 | 0] << 24 | this[у + 5 | 0] << 16 | this[у + 6 | 0] << 8 | this[у + 7 | 0]) >>> 0);
};

Uint8Array.prototype.setInt64 = Uint8Array.prototype.setUint64 = function(у, чЗначение) {
	у |= 0;
	var ч = Math.trunc(чЗначение);
	if (ч < Number.MIN_SAFE_INTEGER || ч > Number.MAX_SAFE_INTEGER) {
		throw new Error(чЗначение);
	}
	var ч32 = ч / 4294967296 | 0;
	this[у] = ч32 >> 24;
	this[у + 1 | 0] = ч32 >> 16;
	this[у + 2 | 0] = ч32 >> 8;
	this[у + 3 | 0] = ч32;
	ч32 = ч | 0;
	this[у + 4 | 0] = ч32 >> 24;
	this[у + 5 | 0] = ч32 >> 16;
	this[у + 6 | 0] = ч32 >> 8;
	this[у + 7 | 0] = ч32;
};

class Wasm {
	constructor() {
		this._оМодуль = null;
		this._оПамять = null;
		this._оЭкземпляр = null;
	}
	_РассчитатьРазмерКучи(кбРазмер) {
		return Math.ceil(кбРазмер) + (Wasm.РАЗМЕР_СТРАНИЦЫ - 1) & ~(Wasm.РАЗМЕР_СТРАНИЦЫ - 1);
	}
	Компилировать() {
		return fetch('wasm.wasm').then(оОтвет => оОтвет.arrayBuffer()).then(буфКод => WebAssembly.compile ? WebAssembly.compile(буфКод) : new WebAssembly.Module(буфКод)).then(оМодуль => {
			this._оМодуль = оМодуль;
		});
	}
	ВыделитьПамять(кбРазмер) {
		кбРазмер = this._РассчитатьРазмерКучи(кбРазмер);
		if (this._оПамять === null) {
			this._оПамять = new WebAssembly.Memory({
				initial: кбРазмер / Wasm.РАЗМЕР_СТРАНИЦЫ
			});
			this._оЭкземпляр = new WebAssembly.Instance(this._оМодуль, {
				i: {
					m: this._оПамять
				}
			});
		} else {
			this._оПамять.grow((кбРазмер - this._оПамять.buffer.byteLength) / Wasm.РАЗМЕР_СТРАНИЦЫ);
		}
		return [ this._оПамять.buffer, this._оЭкземпляр.exports ];
	}
	ОсвободитьПамять() {
		this._оПамять = null;
		this._оЭкземпляр = null;
	}
	static Доступен() {
		return !!self.WebAssembly;
	}
}

Wasm.РАЗМЕР_СТРАНИЦЫ = 65536;

class Asmjs {
	_РассчитатьРазмерКучи(кбРазмер) {
		кбРазмер = Math.ceil(кбРазмер);
		if (кбРазмер <= Wasm.РАЗМЕР_СТРАНИЦЫ) {
			return Wasm.РАЗМЕР_СТРАНИЦЫ;
		}
		if (кбРазмер < 1 << 24) {
			return 1 << 32 - Math.clz32(кбРазмер - 1);
		}
		return кбРазмер + 16777215 & 4278190080;
	}
	Компилировать() {
		importScripts('asmjs.js');
		return Promise.resolve();
	}
	ВыделитьПамять(кбРазмер) {
		кбРазмер = this._РассчитатьРазмерКучи(кбРазмер);
		var буфКуча = new ArrayBuffer(кбРазмер);
		return [ буфКуча, AsmjsModule(self, null, буфКуча) ];
	}
	ОсвободитьПамять() {}
}

class ПотокБитов {
	constructor(мбБуфер, уНачало, уКонец) {
		Проверить(Number.isInteger(уНачало) && Number.isInteger(уКонец) && уНачало >= 0 && уКонец <= мбБуфер.length && уКонец >= уНачало);
		this._мбБуфер = мбБуфер;
		this._уСледующийБайт = уНачало;
		this._чСледующийБит = 7;
		this.кБитОсталось = (уКонец - уНачало) * 8;
	}
	ПропуститьБиты(кБиты) {
		Проверить(Number.isInteger(кБиты));
		Проверить((this.кБитОсталось -= кБиты) >= 0);
		if (кБиты === 1) {
			if (--this._чСледующийБит < 0) {
				this._чСледующийБит = 7;
				++this._уСледующийБайт;
			}
		} else {
			var ч = this._чСледующийБит - кБиты;
			if (ч >= 0) {
				this._чСледующийБит = ч;
			} else {
				ч = -ч - 1;
				this._чСледующийБит = 7 - (ч & 7);
				this._уСледующийБайт += (ч >>> 3) + 1;
			}
		}
	}
	ПрочестьБиты(кБиты) {
		Проверить(Number.isInteger(кБиты));
		Проверить((this.кБитОсталось -= кБиты) >= 0);
		if (кБиты === 1) {
			чРезультат = this._мбБуфер[this._уСледующийБайт] >>> this._чСледующийБит & 1;
			if (--this._чСледующийБит < 0) {
				this._чСледующийБит = 7;
				++this._уСледующийБайт;
			}
		} else {
			Проверить(кБиты >= 1 && кБиты <= 32);
			var чРезультат = 0;
			var чСледующийБитРезультата = кБиты - 1;
			var чМаска = (1 << this._чСледующийБит + 1) - 1;
			do {
				var чБиты = this._мбБуфер[this._уСледующийБайт] & чМаска;
				чРезультат |= this._чСледующийБит < чСледующийБитРезультата ? чБиты << чСледующийБитРезультата - this._чСледующийБит : чБиты >>> this._чСледующийБит - чСледующийБитРезультата;
				var кБитДобавлено = Math.min(чСледующийБитРезультата, this._чСледующийБит) + 1;
				if ((this._чСледующийБит -= кБитДобавлено) < 0) {
					this._чСледующийБит = 7;
					++this._уСледующийБайт;
					чМаска = 255;
				}
			} while ((чСледующийБитРезультата -= кБитДобавлено) >= 0);
		}
		return чРезультат >>> 0;
	}
	ПрочестьБеззнаковыйЭКГ() {
		for (var кНачальныеНули = 0; this.ПрочестьБиты(1) === 0; ++кНачальныеНули) {}
		Проверить(кНачальныеНули <= 31);
		return кНачальныеНули === 0 ? 0 : (1 << кНачальныеНули >>> 0) - 1 + this.ПрочестьБиты(кНачальныеНули);
	}
	ПрочестьЗнаковыйЭКГ() {
		var ч = this.ПрочестьБеззнаковыйЭКГ();
		return (ч & 1) != 0 ? Math.ceil(ч / 2) : -ч / 2;
	}
	ПропуститьЭКГ() {
		for (var кНачальныеНули = 0; this.ПрочестьБиты(1) === 0; ++кНачальныеНули) {}
		if (кНачальныеНули !== 0) {
			this.ПропуститьБиты(кНачальныеНули);
		}
	}
}

class IsoBaseMedia {
	constructor(мбБуфер, dvБуфер, уНачало) {
		Проверить(Number.isInteger(уНачало) && уНачало >= 0 && уНачало <= мбБуфер.length);
		this.мбБуфер = мбБуфер;
		this.dvБуфер = dvБуфер;
		this.уНачало = уНачало;
		this.уКонец = уНачало;
	}
	Завершить() {
		Проверить(Number.isInteger(this.уКонец) && this.уКонец >= this.уНачало && this.уКонец <= this.мбБуфер.length);
		return this.мбБуфер.subarray(this.уНачало, this.уКонец);
	}
	AddFullBox(сТип, чВерсия, чФлаги, пСодержимое) {
		Проверить(сТип.length === 4 && Number.isFinite(чВерсия) && Number.isFinite(чФлаги));
		Проверить(this.уКонец >= this.уНачало);
		var уНачало = this.уКонец;
		Проверить(this.мбБуфер.length - this.уКонец >= 8);
		this.мбБуфер[уНачало + 4] = сТип.charCodeAt(0);
		this.мбБуфер[уНачало + 5] = сТип.charCodeAt(1);
		this.мбБуфер[уНачало + 6] = сТип.charCodeAt(2);
		this.мбБуфер[уНачало + 7] = сТип.charCodeAt(3);
		this.уКонец += 8;
		if (чВерсия !== -1) {
			Проверить(чВерсия >= 0 && чВерсия <= 255 && чФлаги >= 0 && чФлаги <= 16777215);
			Проверить(this.мбБуфер.length - this.уКонец >= 4);
			this.dvБуфер.setUint32(уНачало + 8, чВерсия << 24 | чФлаги);
			this.уКонец += 4;
		}
		if (typeof пСодержимое == 'number') {
			Проверить(Number.isInteger(пСодержимое) && пСодержимое >= 0);
			this.уКонец += пСодержимое;
			Проверить(this.уКонец <= this.мбБуфер.length);
		} else if (typeof пСодержимое == 'function') {
			var у = this.уКонец;
			пСодержимое();
			Проверить(Number.isInteger(this.уКонец) && this.уКонец >= у && this.уКонец <= this.мбБуфер.length);
		} else {
			this.КопироватьИзМассива(this.уКонец, пСодержимое);
		}
		this.dvБуфер.setUint32(уНачало, this.уКонец - уНачало);
	}
	AddBox(сТип, пСодержимое) {
		return this.AddFullBox(сТип, -1, -1, пСодержимое);
	}
	КопироватьИзМассива(уКуда, мчОткуда) {
		Проверить(Number.isInteger(уКуда) && уКуда >= this.уКонец);
		this.мбБуфер.set(мчОткуда, уКуда);
		this.уКонец = уКуда + мчОткуда.length;
	}
	КопироватьИзБуфера(уКуда, мбОткуда, уНачало, уКонец) {
		Проверить(Number.isInteger(уКуда) && уКуда >= this.уКонец);
		Проверить(мбОткуда.buffer !== this.мбБуфер.buffer);
		if (arguments.length === 2) {
			this.мбБуфер.set(мбОткуда, уКуда);
			this.уКонец = уКуда + мбОткуда.length;
		} else {
			Проверить(Number.isInteger(уНачало) && Number.isInteger(уКонец) && мбОткуда.byteOffset === 0);
			this.мбБуфер.set(new Uint8Array(мбОткуда.buffer, уНачало, уКонец - уНачало), уКуда);
			this.уКонец = уКуда + уКонец - уНачало;
		}
	}
}

class ID3 {
	constructor(мбБуфер, уНачало, уКонец) {
		var РАЗМЕР_ЗАГОЛОВКА_ТЕГА = 10;
		var РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ = 10;
		Проверить(мбБуфер.BYTES_PER_ELEMENT === 1 && Number.isInteger(уНачало) && Number.isInteger(уКонец) && уНачало >= 0 && уНачало <= уКонец);
		this._мб = мбБуфер;
		this._уНачалоТега = -1;
		this._кбРазмерТега = -1;
		this._уНачалоПоля = -1;
		this._кбРазмерПоля = -1;
		var кбРазмер = уКонец - уНачало;
		if (кбРазмер > РАЗМЕР_ЗАГОЛОВКА_ТЕГА + РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ && this._мб[уНачало] === 73 && this._мб[уНачало + 1] === 68 && this._мб[уНачало + 2] === 51 && this._мб[уНачало + 3] === 4 && this._мб[уНачало + 5] === 0 && this._ParseSynchsafeInteger(уНачало + 6) === кбРазмер - РАЗМЕР_ЗАГОЛОВКА_ТЕГА) {
			this._уНачалоТега = уНачало + РАЗМЕР_ЗАГОЛОВКА_ТЕГА;
			this._кбРазмерТега = кбРазмер - РАЗМЕР_ЗАГОЛОВКА_ТЕГА;
		}
	}
	_ParseSynchsafeInteger(уАдрес) {
		var чРезультат = -1;
		var чБайт = this._мб[уАдрес];
		if (чБайт < 128) {
			var ч4Байта = чБайт << 24 - 3;
			чБайт = this._мб[уАдрес + 1];
			if (чБайт < 128) {
				ч4Байта |= чБайт << 16 - 2;
				чБайт = this._мб[уАдрес + 2];
				if (чБайт < 128) {
					ч4Байта |= чБайт << 8 - 1;
					чБайт = this._мб[уАдрес + 3];
					if (чБайт < 128) {
						чРезультат = ч4Байта | чБайт;
					}
				}
			}
		}
		return чРезультат;
	}
	_ПолучитьТекст() {
		if (this._кбРазмерПоля < 2 || this._мб[this._уНачалоПоля] !== 3) {
			return null;
		}
		if (ID3._oUtf8Decoder === null) {
			ID3._oUtf8Decoder = new TextDecoder('utf-8', {
				fatal: true
			});
		}
		try {
			return ID3._oUtf8Decoder.decode(new Uint8Array(this._мб.buffer, this._мб.byteOffset + this._уНачалоПоля + 1, this._кбРазмерПоля - 1));
		} catch (_) {
			return null;
		}
	}
	* [Symbol.iterator]() {
		var РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ = 10;
		var уТег = this._уНачалоТега;
		var кбТег = this._кбРазмерТега;
		while (кбТег > РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ) {
			var чКод1 = this._мб[уТег];
			var чКод2 = this._мб[уТег + 1];
			var чКод3 = this._мб[уТег + 2];
			var чКод4 = this._мб[уТег + 3];
			if ((чКод1 < 48 || чКод1 > 57) && (чКод1 < 65 || чКод1 > 90) || (чКод2 < 48 || чКод2 > 57) && (чКод2 < 65 || чКод2 > 90) || (чКод3 < 48 || чКод3 > 57) && (чКод3 < 65 || чКод3 > 90) || (чКод4 < 48 || чКод4 > 57) && (чКод4 < 65 || чКод4 > 90)) {
				break;
			}
			if (this._мб[уТег + 9] !== 0) {
				break;
			}
			var кбПоле = this._ParseSynchsafeInteger(уТег + 4);
			if (кбПоле < 1 || кбПоле > кбТег - РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ) {
				break;
			}
			this._уНачалоПоля = уТег + РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ;
			this._кбРазмерПоля = кбПоле;
			уТег += РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ + кбПоле;
			кбТег -= РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ + кбПоле;
			yield String.fromCharCode(чКод1, чКод2, чКод3, чКод4);
		}
		this._уНачалоПоля = -1;
		this._кбРазмерПоля = -1;
	}
	ПолучитьПервуюСтроку() {
		var сТекст = this._ПолучитьТекст();
		if (сТекст === null) {
			return null;
		}
		var чКонецСтроки = сТекст.indexOf('\0');
		if (чКонецСтроки === -1) {
			return null;
		}
		return сТекст.slice(0, чКонецСтроки);
	}
	РазобратьTXXX() {
		var сТекст = this._ПолучитьТекст();
		if (сТекст === null) {
			return null;
		}
		var чКонецСтроки = сТекст.indexOf('\0');
		if (чКонецСтроки === -1) {
			return null;
		}
		var сОписание = сТекст.slice(0, чКонецСтроки);
		var сЗначение = сТекст.slice(чКонецСтроки + 1);
		if (сЗначение.indexOf('\0') !== -1) {
			return null;
		}
		return {
			сОписание,
			сЗначение
		};
	}
}

ID3._oUtf8Decoder = null;

class Дорожка {
	constructor(кбСтруктураСемпла) {
		Проверить(Number.isInteger(кбСтруктураСемпла) && кбСтруктураСемпла >= 0);
		this.уНачалоПамятиПотока = 0;
		this.уКонецПамятиПотока = 0;
		this.уНачалоПотока = 0;
		this.уКонецПотока = 0;
		this.уКонецПамятиСемплов = 0;
		this.уНачалоСемплов = 0;
		this.уКонецСемплов = 0;
		this.кбСтруктураСемпла = кбСтруктураСемпла;
		this.чВДНачала = -1;
		this.nContinuityCounter = -1;
		this.pPesPacketEnd = -1;
	}
	Пусто() {
		return this.уКонецПотока === this.уНачалоПотока;
	}
	ПолучитьРазмерПотока() {
		Проверить(Number.isInteger(this.уНачалоПотока) && Number.isInteger(this.уКонецПотока) && this.уНачалоПотока >= 0 && this.уНачалоПотока <= this.уКонецПотока);
		Проверить(this.уНачалоПотока >= this.уНачалоПамятиПотока && this.уКонецПотока <= this.уКонецПамятиПотока);
		return this.уКонецПотока - this.уНачалоПотока;
	}
	ПолучитьРазмерСемплов() {
		Проверить(Number.isInteger(this.уНачалоСемплов) && Number.isInteger(this.уКонецСемплов) && this.уНачалоСемплов >= 0 && this.уНачалоСемплов <= this.уКонецСемплов);
		Проверить(this.уКонецСемплов <= this.уКонецПамятиСемплов);
		Проверить((this.уКонецСемплов - this.уНачалоСемплов) % this.кбСтруктураСемпла == 0);
		return this.уКонецСемплов - this.уНачалоСемплов;
	}
	ПолучитьКоличествоСемплов() {
		return this.ПолучитьРазмерСемплов() / this.кбСтруктураСемпла;
	}
	ПолучитьНомерСемпла(уСемпл) {
		Проверить(Number.isInteger(this.уНачалоСемплов) && Number.isInteger(this.уКонецСемплов) && this.уНачалоСемплов >= 0 && this.уНачалоСемплов <= this.уКонецСемплов);
		Проверить(this.уКонецСемплов <= this.уКонецПамятиСемплов);
		Проверить(Number.isInteger(уСемпл));
		if (this.Пусто() || уСемпл < this.уНачалоСемплов) {
			return NaN;
		}
		Проверить(уСемпл <= this.уКонецСемплов - this.кбСтруктураСемпла);
		Проверить((уСемпл - this.уНачалоСемплов) % this.кбСтруктураСемпла == 0);
		return (уСемпл - this.уНачалоСемплов) / this.кбСтруктураСемпла;
	}
}

var м_Журнал = (() => {
	var _мсВажность = [];
	var _мсЗаписи = [];
	function Добавить(сВажность, сЗапись) {
		_мсВажность.push(сВажность);
		_мсЗаписи.push(`[Worker] ${сЗапись}`);
	}
	function Вот(сЗапись) {
		Добавить('Вот', сЗапись);
	}
	function Окак(сЗапись) {
		Добавить('Окак', сЗапись);
	}
	function Ой(сЗапись) {
		Добавить('Ой', сЗапись);
	}
	function Отправить() {
		if (_мсВажность.length !== 0) {
			postMessage([ 2, _мсВажность, _мсЗаписи ]);
			_мсВажность.length = 0;
			_мсЗаписи.length = 0;
		}
	}
	return {
		Вот,
		Окак,
		Ой,
		Отправить
	};
})();

{
	var РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА = 188;
	var TS_TIMESCALE = 9e4;
	var ДЛИНА_АУДИОСЕМПЛА = 1024;
	var ЧАСТОТА_ДИСКРЕТИЗАЦИИ = [ 96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350 ];
	var НОМЕР_ВИДЕО_ДОРОЖКИ = 1;
	var НОМЕР_АУДИО_ДОРОЖКИ = 2;
	var РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА = 1 * 4;
	var РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА = 4 * 4;
	var ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА = 0;
	var РАЗМЕР_ВИДЕОСЕМПЛА = 4;
	var ФЛАГИ_ВИДЕОСЕМПЛА = 8;
	var ВП_ВИДЕОСЕМПЛА = 12;
	var _мНеобработанныеСообщения = [];
	var _оИсходныйСегмент = null;
	var _мбКуча = null;
	var _мцКуча = null;
	var _dvКуча = null;
	var _фНайтиПрефикс = null;
	var _оАссемблер = Wasm.Доступен() ? new Wasm() : new Asmjs();
	var _лРазрыв = true;
	var _oPat = null;
	var _oPmt = null;
	var _дорВидео = new Дорожка(РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА);
	var _дорАудио = new Дорожка(РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА);
	var _дорМетаданные = new Дорожка(0);
	var _муНачалоМетаданных = [];
	var _чВДПоследнегоВидеоСемпла;
	var _чВДКонцаВидеоСегмента;
	var _чВДКонцаАудиоСегмента;
	var _чВДПоследнегоВидеоСемплаПредыдущегоВидеоСегмента;
	var _чВДКонцаПредыдущегоВидеоСегмента;
	var _чВДКонцаПредыдущегоАудиоСегмента;
	var _anDecoderSpecificInfo = [ 0, 0 ];
	var _abSequenceParameterSet;
	var _abPictureParameterSet;
	var _abSequenceParameterSetExt;
	var _nProfileIndication;
	var _nConstraintSetFlag;
	var _nLevelIndication;
	var _nChromaFormatIndication;
	var _nBitDepthLumaMinus8;
	var _nBitDepthChromaMinus8;
	var _nMaxNumberReferenceFrames;
	var _чШиринаКартинки;
	var _чВысотаКартинки;
	var _чЧастотаКадров;
	var _чДиапазон;
	var _лЧересстрочное;
	var _nAudioObjectType;
	var _чЧастотаДискретизации;
	var _чКоличествоКаналов;
	var _чПреобразованЗа = NaN;
	var _лЗабраковано;
	var _лПотериВидео;
	var _лПотериЗвука;
	var _чМинДлительностьВидеоСемпла;
	var _чМаксДлительностьВидеоСемпла;
	var _чСредняяДлительностьВидеоСемпла;
	var _чБитрейтЗвука;
	var _чПозицияКодирования;
	var _чПозицияТрансляции;
	var _чВремяКодирования;
	function ОчиститьСтатистику() {
		_лЗабраковано = false;
		_лПотериВидео = false;
		_лПотериЗвука = false;
		_чМинДлительностьВидеоСемпла = +Infinity;
		_чМаксДлительностьВидеоСемпла = -Infinity;
		_чСредняяДлительностьВидеоСемпла = NaN;
		_чБитрейтЗвука = NaN;
		_чПозицияКодирования = NaN;
		_чПозицияТрансляции = NaN;
		_чВремяКодирования = NaN;
	}
	function Браковать(пУсловие) {
		if (!пУсловие) {
			throw new Error('БРАКОВАТЬ');
		}
	}
	function Мс(чВремяТП, сЕдиницыИзмерения = 'мс') {
		return `${(чВремяТП / (TS_TIMESCALE / 1e3)).toFixed(2)}${сЕдиницыИзмерения}`;
	}
	function ОтправитьРезультат(мбуфПередать) {
		postMessage([ 1, _оИсходныйСегмент ], мбуфПередать);
	}
	function ЗавершитьРаботуИПоказатьСообщение(сКодСообщения) {
		postMessage([ 4, сКодСообщения ]);
		throw void 0;
	}
	function ЗавершитьРаботуИОтправитьОтчет(пИсключение) {
		var сПричинаЗавершенияРаботы = пИсключение instanceof Error ? `Поймано исключение в рабочем потоке: ${пИсключение.stack}` : `Поймано исключение в рабочем потоке: [typeof ${typeof пИсключение}] ${new Error(пИсключение).stack}`;
		if (typeof _оИсходныйСегмент == 'object' && _оИсходныйСегмент !== null && typeof _оИсходныйСегмент.пДанные == 'object' && _оИсходныйСегмент.пДанные !== null && _оИсходныйСегмент.пДанные.byteLength) {
			postMessage([ 3, сПричинаЗавершенияРаботы, _оИсходныйСегмент.пДанные ], [ _оИсходныйСегмент.пДанные ]);
		} else {
			postMessage([ 3, сПричинаЗавершенияРаботы, null ]);
		}
		_оИсходныйСегмент = null;
	}
	function ВыброситьВПомойку(мбБарахло) {
		if (этоМобильноеУстройство() || получитьВерсиюДвижкаБраузера() >= 64) {
			return;
		}
		if (мбБарахло && мбБарахло.buffer.byteLength) {
			Проверить(_мбКуча === null || _мбКуча.buffer !== мбБарахло.buffer);
			postMessage([ 5, мбБарахло.buffer ], [ мбБарахло.buffer ]);
		}
	}
	var м_Память = (() => {
		var МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА = 30;
		var МАКС_ЧАСТОТА_КАДРОВ = 150;
		var МАКС_КОЛИЧЕСТВО_NAL_UNITS_В_КАДРЕ = 10;
		var ЗАНАЧКА = 1.4;
		var РАЗМЕР_КРАТЕН_БАЙТАМ = 1 << 6;
		var РАЗМЕР_ДАННЫХ_АССЕМБЛЕРА = Выровнить(4);
		var РАЗМЕР_ПАМЯТИ_ВИДЕОСЕМПЛОВ = Выровнить(РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА * МАКС_ЧАСТОТА_КАДРОВ * МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА);
		var РАЗМЕР_ПАМЯТИ_АУДИОСЕМПЛОВ = Выровнить(РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА * ЧАСТОТА_ДИСКРЕТИЗАЦИИ[0] / ДЛИНА_АУДИОСЕМПЛА * МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА);
		var РАЗМЕР_ПАМЯТИ_МЕДИАПОТОКА = Выровнить(1e4);
		var РАЗМЕР_РЕЗЕРВА_ВИДЕОПОТОКА = Выровнить(МАКС_КОЛИЧЕСТВО_NAL_UNITS_В_КАДРЕ * МАКС_ЧАСТОТА_КАДРОВ * МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА);
		function Выровнить(чАдресИлиРазмер) {
			return Math.ceil(чАдресИлиРазмер) + (РАЗМЕР_КРАТЕН_БАЙТАМ - 1) & ~(РАЗМЕР_КРАТЕН_БАЙТАМ - 1);
		}
		function Выделить(мбТранспортныйПоток) {
			var уВыделить = РАЗМЕР_ДАННЫХ_АССЕМБЛЕРА;
			_дорВидео.уНачалоСемплов = _дорВидео.уКонецСемплов = уВыделить;
			_дорВидео.уКонецПамятиСемплов = уВыделить += РАЗМЕР_ПАМЯТИ_ВИДЕОСЕМПЛОВ;
			_дорАудио.уНачалоСемплов = _дорАудио.уКонецСемплов = уВыделить;
			_дорАудио.уКонецПамятиСемплов = уВыделить += РАЗМЕР_ПАМЯТИ_АУДИОСЕМПЛОВ;
			_дорМетаданные.уНачалоПамятиПотока = _дорМетаданные.уНачалоПотока = _дорМетаданные.уКонецПотока = уВыделить;
			_дорМетаданные.уКонецПамятиПотока = уВыделить += РАЗМЕР_ПАМЯТИ_МЕДИАПОТОКА;
			_дорВидео.уНачалоПамятиПотока = уВыделить;
			_дорВидео.уНачалоПотока = _дорВидео.уКонецПотока = уВыделить += РАЗМЕР_РЕЗЕРВА_ВИДЕОПОТОКА;
			var кбПостоянныйРазмер = уВыделить;
			_дорВидео.уКонецПамятиПотока = уВыделить += Выровнить(мбТранспортныйПоток.length);
			_дорАудио.уНачалоПамятиПотока = _дорАудио.уНачалоПотока = _дорАудио.уКонецПотока = уВыделить;
			_дорАудио.уКонецПамятиПотока = уВыделить += Выровнить(мбТранспортныйПоток.length);
			var кбПеременныйРазмер = уВыделить - кбПостоянныйРазмер;
			if (_мбКуча === null || _мбКуча.length < уВыделить) {
				var кбРазмерКучи = кбПостоянныйРазмер + кбПеременныйРазмер * ЗАНАЧКА;
				if (_мбКуча === null) {
					м_Журнал.Вот(`Создаю кучу ${кбРазмерКучи} байт`);
				} else {
					м_Журнал.Ой(`Увеличиваю кучу с ${_мбКуча.length} до ${кбРазмерКучи} байт`);
				}
				var [буфКуча, оЭкспорт] = _оАссемблер.ВыделитьПамять(кбРазмерКучи);
				_мбКуча = new Uint8Array(буфКуча);
				_мцКуча = new Int32Array(буфКуча);
				_dvКуча = СоздатьDataView(_мбКуча);
				_фНайтиПрефикс = оЭкспорт.SearchStartCodePrefix;
			}
		}
		function Освободить() {
			_оАссемблер.ОсвободитьПамять();
			_мбКуча = null;
			_мцКуча = null;
			_dvКуча = null;
			_фНайтиПрефикс = null;
		}
		return {
			Выделить,
			Освободить
		};
	})();
	function РазобратьТранспортныйПоток(мбТранспортныйПоток) {
		Браковать(мбТранспортныйПоток.length !== 0 && мбТранспортныйПоток.length % РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА == 0);
		_дорВидео.чВДНачала = _дорАудио.чВДНачала = -1;
		_дорМетаданные.чВДНачала = 0;
		_дорВидео.pPesPacketEnd = _дорАудио.pPesPacketEnd = _дорМетаданные.pPesPacketEnd = -1;
		_муНачалоМетаданных.length = 0;
		_чВДПоследнегоВидеоСемпла = -1;
		if (_лРазрыв) {
			_дорВидео.nContinuityCounter = _дорАудио.nContinuityCounter = _дорМетаданные.nContinuityCounter = -1;
			_oPat = _oPmt = null;
		}
		var nPmtPid = -1, nVideoPid = -1, nAudioPid = -1, nMetadataPid = -1;
		var cPat = 0, cPmt = 0, кИзмененийВД = 0;
		var уТранспортныйПакет = _дорВидео.уНачалоПотока | 0;
		_мбКуча.set(мбТранспортныйПоток, уТранспортныйПакет);
		for (var уКонецТранспортногоПотока = уТранспортныйПакет + мбТранспортныйПоток.length; уТранспортныйПакет !== уКонецТранспортногоПотока; уТранспортныйПакет += РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА) {
			var чЗаголовокТранспортногоПакета = _dvКуча.getUint32(уТранспортныйПакет) | 0;
			Браковать((чЗаголовокТранспортногоПакета & 4286578880) == 1191182336);
			var nPid = (чЗаголовокТранспортногоПакета & 2096896) >> 8;
			var pPayload = уТранспортныйПакет + 4;
			if ((чЗаголовокТранспортногоПакета & 32) != 0) {
				var cbAdaptationField = _мбКуча[pPayload];
				Проверить(cbAdaptationField <= РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА - 5);
				Проверить(cbAdaptationField === 0 || (_мбКуча[pPayload + 1] & 128) == 0);
				pPayload += 1 + cbAdaptationField;
			}
			var дорОбработать;
			switch (nPid) {
			  case nVideoPid:
				if ((чЗаголовокТранспортногоПакета & 4194304) != 0) {
					Проверить((_dvКуча.getUint32(pPayload) & 4294967280) == 480);
				}
				дорОбработать = _дорВидео;
				break;

			  case nAudioPid:
				if ((чЗаголовокТранспортногоПакета & 4194304) != 0) {
					Проверить((_dvКуча.getUint32(pPayload) & 4294967264) == 448);
				}
				дорОбработать = _дорАудио;
				break;

			  case nMetadataPid:
				if ((чЗаголовокТранспортногоПакета & 4194304) != 0) {
					Проверить(_dvКуча.getUint32(pPayload) === 445);
					Проверить((_мбКуча[pPayload + 6] & 4) != 0);
					Проверить((_мбКуча[pPayload + 7] & 192) == 128);
					_муНачалоМетаданных.push(_дорМетаданные.уКонецПотока);
				}
				дорОбработать = _дорМетаданные;
				break;

			  case 0:
				Проверить((чЗаголовокТранспортногоПакета & 4194320) == 4194320);
				var oPat = new ProgramAssociationTable(pPayload, уТранспортныйПакет + РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА);
				if (_oPat === null) {
					_oPat = oPat;
					м_Журнал.Вот(`PatVersion=${oPat.nPatVersion} ProgramNumber=${oPat.nProgramNumber} PmtPid=${oPat.nPmtPid}`);
				} else {
					Проверить(_oPat.nPatVersion === oPat.nPatVersion && _oPat.nProgramNumber === oPat.nProgramNumber && _oPat.nPmtPid === oPat.nPmtPid);
				}
				nPmtPid = oPat.nPmtPid;
				++cPat;
				continue;

			  case nPmtPid:
				Проверить((чЗаголовокТранспортногоПакета & 4194320) == 4194320);
				var oPmt = new ProgramMapTable(pPayload, уТранспортныйПакет + РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА, _oPat.nProgramNumber);
				if (_oPmt === null) {
					_oPmt = oPmt;
					м_Журнал.Вот(`PmtVersion=${oPmt.nPmtVersion} VideoPid=${oPmt.nVideoPid} AudioPid=${oPmt.nAudioPid} MetadataPid=${oPmt.nMetadataPid}`);
				} else {
					Проверить(_oPmt.nPmtVersion === oPmt.nPmtVersion && _oPmt.nVideoPid === oPmt.nVideoPid && _oPmt.nAudioPid === oPmt.nAudioPid && _oPmt.nMetadataPid === oPmt.nMetadataPid);
				}
				({nVideoPid, nAudioPid, nMetadataPid} = oPmt);
				++cPmt;
				continue;

			  default:
				continue;
			}
			if (дорОбработать.nContinuityCounter !== (чЗаголовокТранспортногоПакета & 15) && дорОбработать.nContinuityCounter !== -1) {
				м_Журнал.Ой(`continuity_counter равен ${чЗаголовокТранспортногоПакета & 15} вместо ${дорОбработать.nContinuityCounter} PID=${nPid} СмещениеПакета=${мбТранспортныйПоток.length - уКонецТранспортногоПотока + уТранспортныйПакет}`);
				Браковать(дорОбработать.уКонецПотока === дорОбработать.уНачалоПотока);
			}
			дорОбработать.nContinuityCounter = чЗаголовокТранспортногоПакета + 1 & 15;
			switch (чЗаголовокТранспортногоПакета & 4194320) {
			  case 16:
				Проверить(дорОбработать.уКонецПотока !== дорОбработать.уНачалоПотока);
				break;

			  case 4194320:
				var cbPesPacket = _dvКуча.getUint16(pPayload + 4);
				var cbPesHeader = _мбКуча[pPayload + 8];
				Проверить(дорОбработать.pPesPacketEnd === дорОбработать.уКонецПотока || дорОбработать.pPesPacketEnd === -1);
				if (cbPesPacket !== 0) {
					дорОбработать.pPesPacketEnd = дорОбработать.уКонецПотока + cbPesPacket - 3 - cbPesHeader;
				} else {
					Проверить(nPid === nVideoPid);
					дорОбработать.pPesPacketEnd = -1;
				}
				if (nPid === nVideoPid || дорОбработать.чВДНачала === -1) {
					var nPts, nDts;
					switch (_dvКуча.getUint16(pPayload + 6) & 61632) {
					  case 32896:
						Проверить(cbPesHeader >= 5);
						nPts = DecodeTimestamp(pPayload + 9, 33);
						nDts = nPts;
						break;

					  case 32960:
						Проверить(cbPesHeader >= 10);
						nPts = DecodeTimestamp(pPayload + 9, 49);
						nDts = DecodeTimestamp(pPayload + 14, 17);
						break;

					  default:
						Проверить(false);
					}
					if (дорОбработать.чВДНачала === -1) {
						дорОбработать.чВДНачала = nDts;
					}
					if (nPid === nVideoPid) {
						if (nDts === _чВДПоследнегоВидеоСемпла && cbPesPacket !== 0) {
							Проверить((_мбКуча[pPayload + 6] & 4) == 0);
						} else {
							Проверить(_дорВидео.уКонецСемплов <= _дорВидео.уКонецПамятиСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА);
							if (_чВДПоследнегоВидеоСемпла !== -1) {
								var чДлительностьВидеоСемпла = nDts - _чВДПоследнегоВидеоСемпла;
								if (чДлительностьВидеоСемпла <= 0) {
									if (чДлительностьВидеоСемпла > -10) {
										чДлительностьВидеоСемпла = 1;
										nDts = _чВДПоследнегоВидеоСемпла + чДлительностьВидеоСемпла;
										++кИзмененийВД;
									} else {
										Браковать(false);
									}
								}
								Проверить(чДлительностьВидеоСемпла < TS_TIMESCALE * 60);
								_чМинДлительностьВидеоСемпла = Math.min(_чМинДлительностьВидеоСемпла, чДлительностьВидеоСемпла);
								_чМаксДлительностьВидеоСемпла = Math.max(_чМаксДлительностьВидеоСемпла, чДлительностьВидеоСемпла);
								_dvКуча.setUint32(_дорВидео.уКонецСемплов + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА, чДлительностьВидеоСемпла);
								_dvКуча.setUint32(_дорВидео.уКонецСемплов + РАЗМЕР_ВИДЕОСЕМПЛА - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА, _дорВидео.уКонецПотока);
							}
							_dvКуча.setInt32(_дорВидео.уКонецСемплов + ВП_ВИДЕОСЕМПЛА, nPts - nDts);
							_дорВидео.уКонецСемплов += РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
							_чВДПоследнегоВидеоСемпла = nDts;
						}
					} else {
						Проверить(nPts === nDts);
					}
				}
				pPayload += 9 + cbPesHeader;
				break;

			  default:
				Проверить(false);
			}
			var cbPayload = уТранспортныйПакет + РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА - pPayload;
			Проверить(cbPayload > 0 && cbPayload + дорОбработать.уКонецПотока <= дорОбработать.уКонецПамятиПотока);
			_мбКуча.copyWithin(дорОбработать.уКонецПотока, pPayload, pPayload + cbPayload);
			дорОбработать.уКонецПотока += cbPayload;
		}
		Проверить(_дорВидео.pPesPacketEnd === _дорВидео.уКонецПотока || _дорВидео.pPesPacketEnd === -1);
		Проверить(_дорАудио.pPesPacketEnd === _дорАудио.уКонецПотока || _дорАудио.pPesPacketEnd === -1);
		Проверить(_дорМетаданные.pPesPacketEnd === _дорМетаданные.уКонецПотока || _дорМетаданные.pPesPacketEnd === -1);
		if (cPat !== 1 || cPmt !== 1) {
			м_Журнал.Ой(`Количество таблиц в сегменте: PAT=${cPat} PMT=${cPmt}`);
		}
		if (кИзмененийВД !== 0) {
			м_Журнал.Ой(`Количество видеосемплов с увеличенным ВД: ${кИзмененийВД}`);
		}
		Проверить(nVideoPid !== -1 || nAudioPid !== -1);
		_лПотериВидео = nVideoPid !== -1 && _дорВидео.Пусто();
		_лПотериЗвука = nAudioPid !== -1 && _дорАудио.Пусто();
		if (_лПотериВидео || _лПотериЗвука) {
			м_Журнал.Ой(`Сегмент не годится для воспроизведения: нет видео ${_лПотериВидео}, нет звука ${_лПотериЗвука}`);
			return false;
		}
		var сВажность = _муНачалоМетаданных.length > 1 ? 'Ой' : 'Вот';
		var сЗапись = `Метаданных=${_муНачалоМетаданных.length}`;
		if (!_дорВидео.Пусто()) {
			_dvКуча.setUint32(_дорВидео.уКонецСемплов + РАЗМЕР_ВИДЕОСЕМПЛА - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА, _дорВидео.уКонецПотока);
			var кВидеосемплов = _дорВидео.ПолучитьКоличествоСемплов();
			_чСредняяДлительностьВидеоСемпла = (_чВДПоследнегоВидеоСемпла - _дорВидео.чВДНачала) / (кВидеосемплов - 1);
			if (кВидеосемплов < 25) {
				сВажность = 'Ой';
			}
			сЗапись += ` ВДПервВидСемпла=${(_дорВидео.чВДНачала / TS_TIMESCALE).toFixed(5)}` + ` ВДПослВидСемпла=${(_чВДПоследнегоВидеоСемпла / TS_TIMESCALE).toFixed(5)}` + ` ДлитВидСегмента>${Мс(_чВДПоследнегоВидеоСемпла - _дорВидео.чВДНачала)} ВидСемплов=${кВидеосемплов}` + ` ДлитВидСемплов=${Мс(_чМинДлительностьВидеоСемпла, '')}<${Мс(_чСредняяДлительностьВидеоСемпла, '')}<${Мс(_чМаксДлительностьВидеоСемпла)}` + `(${(TS_TIMESCALE / _чМинДлительностьВидеоСемпла).toFixed(2)}` + `<${(TS_TIMESCALE / _чСредняяДлительностьВидеоСемпла).toFixed(2)}` + `<${(TS_TIMESCALE / _чМаксДлительностьВидеоСемпла).toFixed(2)}к/с)`;
		}
		if (!_дорАудио.Пусто()) {
			сЗапись += ` ВДПервАудСемпла=${(_дорАудио.чВДНачала / TS_TIMESCALE).toFixed(5)}`;
		}
		if (!_дорВидео.Пусто() && !_дорАудио.Пусто()) {
			var чСмещениеЗвука = _дорАудио.чВДНачала - _дорВидео.чВДНачала;
			if (чСмещениеЗвука < -TS_TIMESCALE * .1 || чСмещениеЗвука > TS_TIMESCALE * .2) {
				сВажность = 'Ой';
			}
			сЗапись += ` СмещНачалаАудСегмента=${Мс(_дорАудио.чВДНачала - _дорВидео.чВДНачала)}`;
		}
		м_Журнал[сВажность](сЗапись);
		_чПозицияКодирования = (_дорАудио.чВДНачала !== -1 ? _дорАудио.чВДНачала : _дорВидео.чВДНачала) / TS_TIMESCALE;
		return true;
	}
	function DecodeTimestamp(уАдрес, nMarkerBits) {
		var ч1 = _мбКуча[уАдрес] | 0;
		var ч2 = _dvКуча.getUint32(уАдрес + 1) | 0;
		Проверить((ч1 & 241) == (nMarkerBits | 0) && (ч2 & 65537) == 65537);
		return +((ч1 & 14) * (1 << 29) + (ч2 >> 2 & 1073709056 | ч2 >> 1 & 32767));
	}
	function ProgramAssociationTable(уНачало, уКонец) {
		Проверить(уНачало < уКонец);
		уНачало += 1 + _мбКуча[уНачало];
		Проверить(уКонец - уНачало >= 16);
		Проверить(_мбКуча[уНачало] === 0);
		Проверить((_dvКуча.getUint16(уНачало + 1) & 53247) == 32781);
		Проверить((_мбКуча[уНачало + 5] & 1) == 1);
		var nPatVersion = _мбКуча[уНачало + 5] & 62;
		Проверить(_мбКуча[уНачало + 6] === 0);
		Проверить(_мбКуча[уНачало + 7] === 0);
		var nProgramNumber = _dvКуча.getUint16(уНачало + 8);
		Проверить(nProgramNumber !== 0);
		var nPmtPid = _dvКуча.getUint16(уНачало + 10) & 8191;
		Проверить(nPmtPid >= 16 && nPmtPid <= 8190);
		this.nPatVersion = nPatVersion;
		this.nProgramNumber = nProgramNumber;
		this.nPmtPid = nPmtPid;
	}
	function ProgramMapTable(уНачало, уКонец, nProgramNumber) {
		Проверить(уНачало < уКонец);
		уНачало += 1 + _мбКуча[уНачало];
		Проверить(уКонец - уНачало >= 12);
		Проверить(_мбКуча[уНачало] === 2);
		var уКонецСекции = _dvКуча.getUint16(уНачало + 1);
		Проверить((уКонецСекции & 49152) == 32768);
		уКонецСекции = уНачало + 3 + (уКонецСекции & 4095) - 4;
		Проверить(уКонецСекции >= уНачало + 12 && уКонецСекции + 4 <= уКонец);
		Проверить(_dvКуча.getUint16(уНачало + 3) === nProgramNumber);
		Проверить((_мбКуча[уНачало + 5] & 1) == 1);
		var nPmtVersion = _мбКуча[уНачало + 5] & 62;
		Проверить(_мбКуча[уНачало + 6] === 0);
		Проверить(_мбКуча[уНачало + 7] === 0);
		уНачало += 12 + (_dvКуча.getUint16(уНачало + 10) & 4095);
		var nVideoPid = -1, nAudioPid = -1, nMetadataPid = -1;
		while (уНачало !== уКонецСекции) {
			var pDescriptor = уНачало + 5;
			Проверить(pDescriptor <= уКонецСекции);
			var nElementaryPid = _dvКуча.getUint16(уНачало + 1) & 8191;
			Проверить(nElementaryPid >= 16 && nElementaryPid <= 8190);
			var nEsInfoLength = _dvКуча.getUint16(уНачало + 3) & 4095;
			Проверить(pDescriptor + nEsInfoLength <= уКонецСекции);
			switch (_мбКуча[уНачало]) {
			  case 27:
				if (nVideoPid === -1) {
					nVideoPid = nElementaryPid;
				} else {
					м_Журнал.Ой(`Найден дополнительный видеопоток PID=${nElementaryPid}`);
				}
				break;

			  case 15:
				if (nAudioPid === -1) {
					nAudioPid = nElementaryPid;
				} else {
					м_Журнал.Ой(`Найден дополнительный аудиопоток PID=${nElementaryPid}`);
				}
				break;

			  case 21:
				if (nEsInfoLength === 15 && _мбКуча[pDescriptor] === 38 && _мбКуча[pDescriptor + 1] === 13 && _мбКуча[pDescriptor + 2] === 255 && _мбКуча[pDescriptor + 3] === 255 && _мбКуча[pDescriptor + 4] === 73 && _мбКуча[pDescriptor + 5] === 68 && _мбКуча[pDescriptor + 6] === 51 && _мбКуча[pDescriptor + 7] === 32 && _мбКуча[pDescriptor + 8] === 255 && _мбКуча[pDescriptor + 9] === 73 && _мбКуча[pDescriptor + 10] === 68 && _мбКуча[pDescriptor + 11] === 51 && _мбКуча[pDescriptor + 12] === 32) {
					if (nMetadataPid === -1) {
						nMetadataPid = nElementaryPid;
					} else {
						м_Журнал.Ой(`Найден дополнительный метапоток PID=${nElementaryPid} metadata_service_id=${_мбКуча[pDescriptor + 13]}`);
					}
				}
			}
			уНачало = pDescriptor + nEsInfoLength;
		}
		this.nPmtVersion = nPmtVersion;
		this.nVideoPid = nVideoPid;
		this.nAudioPid = nAudioPid;
		this.nMetadataPid = nMetadataPid;
	}
	function РазобратьМетаданные() {
		for (var ы = 0; ы < _муНачалоМетаданных.length; ы++) {
			var oID3 = new ID3(_мбКуча, _муНачалоМетаданных[ы], _муНачалоМетаданных[ы + 1] || _дорМетаданные.уКонецПотока);
			for (var сИдПоля of oID3) {
				if (сИдПоля === 'TXXX') {
					var {сОписание, сЗначение} = oID3.РазобратьTXXX();
					if (сОписание === 'segmentmetadata') {
						var оМетаданные = JSON.parse(сЗначение);
						if (Number.isFinite(оМетаданные.transc_r)) {
							Проверить(оМетаданные.transc_r > 14200704e5 && оМетаданные.transc_r < 18468864e5);
							_чВремяКодирования = оМетаданные.transc_r;
						}
						if (Number.isFinite(оМетаданные.stream_offset)) {
							Проверить(оМетаданные.stream_offset >= 0);
							_чПозицияТрансляции = оМетаданные.stream_offset;
						}
						return;
					}
				}
			}
		}
	}
	function РазобратьВидеоПоток() {
		if (_лРазрыв) {
			_abSequenceParameterSet = null;
			_abPictureParameterSet = null;
			_abSequenceParameterSetExt = null;
		}
		if (_дорВидео.Пусто()) {
			return true;
		}
		var ФЛАГИ_ОБЫЧНОГО_КАДРА = 65536;
		var ФЛАГИ_КЛЮЧЕВОГО_КАДРА = 0;
		Проверить(_дорВидео.уНачалоПотока > _дорВидео.уНачалоПамятиПотока && _дорВидео.уКонецПотока > _дорВидео.уНачалоПотока && _дорВидео.уКонецСемплов > _дорВидео.уНачалоСемплов);
		var уРазобранныйПоток = _дорВидео.уНачалоПамятиПотока;
		var уСемплПервогоКлючКадра = -1;
		var cNalUnits = 0, cAccessUnits = 0, кСемпловБезVCL = 0, кКлючКадров = 0, уСемплПоследнегоКлючКадра = -1;
		var уСемпл = _дорВидео.уНачалоСемплов;
		var уНачалоСледующегоСемпла = -1;
		var уНачалоРазобранногоСемпла;
		var чФлагиСемпла;
		var pNalUnitEnd = _фНайтиПрефикс(_дорВидео.уНачалоПотока, _дорВидео.уКонецПотока);
		Проверить(pNalUnitEnd === _дорВидео.уНачалоПотока);
		Проверить(_мцКуча[0] > 3);
		for (;;) {
			var кбРазмерПрефикса = pNalUnitEnd === _дорВидео.уКонецПотока ? 0 : _мцКуча[0];
			var лНачалоСемпла = pNalUnitEnd + кбРазмерПрефикса - Math.min(4, кбРазмерПрефикса) >= уНачалоСледующегоСемпла;
			if (лНачалоСемпла && уНачалоСледующегоСемпла !== -1) {
				if (чФлагиСемпла === -1) {
					чФлагиСемпла = ФЛАГИ_ОБЫЧНОГО_КАДРА;
					++кСемпловБезVCL;
				}
				Проверить(уРазобранныйПоток > уНачалоРазобранногоСемпла);
				_dvКуча.setUint32(уСемпл + РАЗМЕР_ВИДЕОСЕМПЛА, уРазобранныйПоток - уНачалоРазобранногоСемпла);
				_dvКуча.setUint32(уСемпл + ФЛАГИ_ВИДЕОСЕМПЛА, чФлагиСемпла);
				уСемпл += РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
			}
			if (pNalUnitEnd === _дорВидео.уКонецПотока) {
				Проверить(уСемпл === _дорВидео.уКонецСемплов);
				break;
			}
			var pNalUnitBegin = pNalUnitEnd + кбРазмерПрефикса;
			pNalUnitEnd = _фНайтиПрефикс(pNalUnitBegin, _дорВидео.уКонецПотока);
			Браковать(pNalUnitEnd >= pNalUnitBegin);
			if (лНачалоСемпла) {
				Проверить(уСемпл < _дорВидео.уКонецСемплов);
				уНачалоСледующегоСемпла = _dvКуча.getUint32(уСемпл + РАЗМЕР_ВИДЕОСЕМПЛА);
				уНачалоРазобранногоСемпла = уРазобранныйПоток;
				чФлагиСемпла = -1;
				if (cAccessUnits === 1) {
					cAccessUnits = 0;
				}
			}
			if (pNalUnitBegin === pNalUnitEnd) {
				continue;
			}
			++cNalUnits;
			var nNalRefIdc = _мбКуча[pNalUnitBegin] & 224;
			Браковать(nNalRefIdc < 128);
			switch (_мбКуча[pNalUnitBegin] & 31) {
			  case 1:
			  case 2:
			  case 3:
			  case 4:
				Проверить(чФлагиСемпла !== ФЛАГИ_КЛЮЧЕВОГО_КАДРА);
				чФлагиСемпла = ФЛАГИ_ОБЫЧНОГО_КАДРА;
				break;

			  case 5:
				Проверить(nNalRefIdc !== 0);
				if (чФлагиСемпла !== ФЛАГИ_КЛЮЧЕВОГО_КАДРА) {
					Проверить(чФлагиСемпла !== ФЛАГИ_ОБЫЧНОГО_КАДРА);
					чФлагиСемпла = ФЛАГИ_КЛЮЧЕВОГО_КАДРА;
					if (уСемплПервогоКлючКадра === -1) {
						уСемплПервогоКлючКадра = уСемпл;
					}
					уСемплПоследнегоКлючКадра = уСемпл;
					++кКлючКадров;
				}
				break;

			  case 6:
				Проверить(nNalRefIdc === 0);
				break;

			  case 7:
				Проверить(nNalRefIdc !== 0);
				if (_лРазрыв && (уСемплПервогоКлючКадра === -1 || _abSequenceParameterSet === null)) {
					_abSequenceParameterSet = _мбКуча.slice(pNalUnitBegin, pNalUnitEnd);
				}
				continue;

			  case 8:
				Проверить(nNalRefIdc !== 0);
				if (_лРазрыв && (уСемплПервогоКлючКадра === -1 || _abPictureParameterSet === null)) {
					_abPictureParameterSet = _мбКуча.slice(pNalUnitBegin, pNalUnitEnd);
				}
				continue;

			  case 9:
				Проверить(nNalRefIdc === 0);
				++cAccessUnits;
				continue;

			  case 10:
				Проверить(nNalRefIdc === 0);
				continue;

			  case 11:
				Проверить(nNalRefIdc === 0);
				Проверить(false);
				continue;

			  case 12:
				Проверить(nNalRefIdc === 0);
				continue;

			  case 13:
				Проверить(nNalRefIdc !== 0);
				Проверить(false);
				if (_лРазрыв && (уСемплПервогоКлючКадра === -1 || _abSequenceParameterSetExt === null)) {
					_abSequenceParameterSetExt = _мбКуча.slice(pNalUnitBegin, pNalUnitEnd);
				}
				continue;
			}
			var cbNalUnit = pNalUnitEnd - pNalUnitBegin;
			_dvКуча.setUint32(уРазобранныйПоток, cbNalUnit);
			уРазобранныйПоток += 4;
			Проверить(уРазобранныйПоток < pNalUnitBegin);
			_мбКуча.copyWithin(уРазобранныйПоток, pNalUnitBegin, pNalUnitEnd);
			уРазобранныйПоток += cbNalUnit;
		}
		_дорВидео.уНачалоПотока = _дорВидео.уНачалоПамятиПотока;
		_дорВидео.уКонецПотока = уРазобранныйПоток;
		м_Журнал.Вот('NalUnits=' + cNalUnits + ' КлючКадров=' + кКлючКадров + ' ПервКлючКадр=' + _дорВидео.ПолучитьНомерСемпла(уСемплПервогоКлючКадра) + ' ПослКлючКадр=' + _дорВидео.ПолучитьНомерСемпла(уСемплПоследнегоКлючКадра));
		if (кСемпловБезVCL !== 0) {
			м_Журнал.Ой(`Видеосемплов без VCL NAL unit: ${кСемпловБезVCL}`);
		}
		if (cAccessUnits > 1) {
			м_Журнал.Ой('Несколько access unit в одном видеосемпле');
		}
		if (_лРазрыв) {
			if (уСемплПервогоКлючКадра === -1 || _abSequenceParameterSet === null || _abPictureParameterSet === null) {
				м_Журнал.Ой(`Сегмент не годится для воспроизведения: не найден IDR ${уСемплПервогоКлючКадра === -1}, не найден SPS ${_abSequenceParameterSet === null}, не найден PPS ${_abPictureParameterSet === null}`);
				return false;
			}
			var мбКопия = _abSequenceParameterSet.slice();
			var о = RemoveEmulationPreventionBytesFromNalUnit(мбКопия, 0, мбКопия.length);
			ParseSequenceParameterSet(мбКопия, о.уНачалоRBSP, о.уКонецRBSP);
		} else if (ДЕЛАТЬ_ПЕРВЫЙ_КАДР_КЛЮЧЕВЫМ && уСемплПервогоКлючКадра !== _дорВидео.уНачалоСемплов) {
			м_Журнал.Ой('Делаю первый видеосемпл ключевым');
			_dvКуча.setUint32(_дорВидео.уНачалоСемплов + ФЛАГИ_ВИДЕОСЕМПЛА, ФЛАГИ_КЛЮЧЕВОГО_КАДРА);
		}
		return true;
	}
	function ParseSequenceParameterSet(мбПоток, уНачало, уКонец) {
		_nProfileIndication = мбПоток[уНачало];
		_nConstraintSetFlag = мбПоток[уНачало + 1];
		_nLevelIndication = мбПоток[уНачало + 2];
		var оПотокБитов = new ПотокБитов(мбПоток, уНачало + 3, уКонец);
		оПотокБитов.ПропуститьЭКГ();
		var nSeparateColourPlaneFlag = 0;
		_nChromaFormatIndication = 1;
		_nBitDepthLumaMinus8 = 0;
		_nBitDepthChromaMinus8 = 0;
		switch (_nProfileIndication) {
		  case 183:
			_nChromaFormatIndication = 0;
			break;

		  case 100:
		  case 110:
		  case 122:
		  case 244:
		  case 44:
		  case 83:
		  case 86:
		  case 118:
		  case 128:
		  case 138:
		  case 139:
		  case 134:
			_nChromaFormatIndication = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			Проверить(_nChromaFormatIndication <= 3);
			if (_nChromaFormatIndication === 3) {
				nSeparateColourPlaneFlag = оПотокБитов.ПрочестьБиты(1);
			}
			_nBitDepthLumaMinus8 = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			Проверить(_nBitDepthLumaMinus8 <= 6);
			_nBitDepthChromaMinus8 = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			Проверить(_nBitDepthChromaMinus8 <= 6);
			оПотокБитов.ПропуститьБиты(1);
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				for (var i = 0, ic = _nChromaFormatIndication !== 3 ? 8 : 12; i < ic; ++i) {
					if (оПотокБитов.ПрочестьБиты(1) !== 0) {
						var nLastScale = 8, nNextScale = 8;
						for (var j = 0, jc = i < 6 ? 16 : 64; j < jc; ++j) {
							if (nNextScale !== 0) {
								nNextScale = (nLastScale + оПотокБитов.ПрочестьЗнаковыйЭКГ() + 256) % 256;
							}
							if (nNextScale !== 0) {
								nLastScale = nNextScale;
							}
						}
					}
				}
			}
		}
		оПотокБитов.ПропуститьЭКГ();
		switch (оПотокБитов.ПрочестьБеззнаковыйЭКГ()) {
		  case 0:
			оПотокБитов.ПропуститьЭКГ();
			break;

		  case 1:
			оПотокБитов.ПропуститьБиты(1);
			оПотокБитов.ПропуститьЭКГ();
			оПотокБитов.ПропуститьЭКГ();
			for (i = 0, ic = оПотокБитов.ПрочестьБеззнаковыйЭКГ(); i < ic; ++i) {
				оПотокБитов.ПропуститьЭКГ();
			}
		}
		_nMaxNumberReferenceFrames = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
		оПотокБитов.ПропуститьБиты(1);
		var nPictureWidthInMacroblocks = оПотокБитов.ПрочестьБеззнаковыйЭКГ() + 1;
		var nPictureHeightInMapUnits = оПотокБитов.ПрочестьБеззнаковыйЭКГ() + 1;
		var nFrameMacroblocksOnlyFlag = оПотокБитов.ПрочестьБиты(1);
		if (nFrameMacroblocksOnlyFlag === 0) {
			оПотокБитов.ПропуститьБиты(1);
		}
		оПотокБитов.ПропуститьБиты(1);
		var nFrameCropLeftOffset = 0;
		var nFrameCropRightOffset = 0;
		var nFrameCropTopOffset = 0;
		var nFrameCropBottomOffset = 0;
		if (оПотокБитов.ПрочестьБиты(1) !== 0) {
			nFrameCropLeftOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			nFrameCropRightOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			nFrameCropTopOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			nFrameCropBottomOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
		}
		_чЧастотаКадров = 0;
		_чДиапазон = -1;
		if (оПотокБитов.ПрочестьБиты(1) !== 0) {
			var nAspectRatioIndication;
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				nAspectRatioIndication = оПотокБитов.ПрочестьБиты(8);
				if (nAspectRatioIndication === 255) {
					оПотокБитов.ПрочестьБиты(16);
					оПотокБитов.ПрочестьБиты(16);
				}
			}
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				оПотокБитов.ПропуститьБиты(1);
			}
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				оПотокБитов.ПрочестьБиты(3);
				_чДиапазон = оПотокБитов.ПрочестьБиты(1);
				if (оПотокБитов.ПрочестьБиты(1) !== 0) {
					оПотокБитов.ПропуститьБиты(8 + 8 + 8);
				}
			}
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				оПотокБитов.ПропуститьЭКГ();
				оПотокБитов.ПропуститьЭКГ();
			}
			var nNumUnitsInTick, nTimeScale, nFixedFrameRateFlag;
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				nNumUnitsInTick = оПотокБитов.ПрочестьБиты(32);
				nTimeScale = оПотокБитов.ПрочестьБиты(32);
				nFixedFrameRateFlag = оПотокБитов.ПрочестьБиты(1);
				_чЧастотаКадров = nTimeScale / nNumUnitsInTick / (nFixedFrameRateFlag === 0 ? -2 : 2);
			}
		}
		var nCropUnitX = 1;
		var nCropUnitY = 1;
		if (nSeparateColourPlaneFlag === 0 && _nChromaFormatIndication !== 0) {
			nCropUnitX = _nChromaFormatIndication === 3 ? 1 : 2;
			nCropUnitY = _nChromaFormatIndication === 1 ? 2 : 1;
		}
		if (nFrameMacroblocksOnlyFlag === 0) {
			nCropUnitY += nCropUnitY;
			nPictureHeightInMapUnits += nPictureHeightInMapUnits;
		}
		_чШиринаКартинки = nPictureWidthInMacroblocks * 16 - nCropUnitX * nFrameCropRightOffset - nCropUnitX * nFrameCropLeftOffset;
		_чВысотаКартинки = nPictureHeightInMapUnits * 16 - nCropUnitY * nFrameCropBottomOffset - nCropUnitY * nFrameCropTopOffset;
		_лЧересстрочное = nFrameMacroblocksOnlyFlag === 0;
	}
	function RemoveEmulationPreventionBytesFromNalUnit(мбПоток, уНачало, уКонец) {
		Проверить(уНачало < уКонец);
		var nNalUnitType = мбПоток[уНачало++] & 31;
		if (nNalUnitType === 14 || nNalUnitType === 20 || nNalUnitType === 21) {
			Проверить(уНачало < уКонец);
			уНачало += nNalUnitType === 21 && (мбПоток[уНачало] & 128) != 0 ? 2 : 3;
			Проверить(уНачало <= уКонец);
		}
		var уНачалоRBSP = уНачало;
		var уКонец2 = уКонец - 2;
		while (уНачало < уКонец2) {
			if (мбПоток[уНачало++] === 0 && мбПоток[уНачало++] === 0) {
				var чТретийБайт = мбПоток[уНачало++];
				Проверить(чТретийБайт >= 3);
				if (чТретийБайт === 3) {
					var уДекодированныйПоток = уНачало - 1;
					Проверить(уНачало === уКонец || мбПоток[уНачало] <= 3);
					while (уНачало < уКонец2) {
						if ((мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++]) === 0 && (мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++]) === 0) {
							чТретийБайт = мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++];
							Проверить(чТретийБайт >= 3);
							if (чТретийБайт === 3) {
								--уДекодированныйПоток;
								Проверить(уНачало === уКонец || мбПоток[уНачало] <= 3);
							}
						}
					}
					while (уНачало !== уКонец) {
						var чПоследнийБайт = мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++];
					}
					Проверить(чПоследнийБайт !== 0);
					return {
						уНачалоRBSP,
						уКонецRBSP: уДекодированныйПоток
					};
				}
			}
		}
		Проверить(уНачало === уКонец || мбПоток[уКонец - 1] !== 0);
		return {
			уНачалоRBSP,
			уКонецRBSP: уКонец
		};
	}
	function РазобратьАудиоПоток() {
		if (_дорАудио.Пусто()) {
			return true;
		}
		var ADTS_HEADER_SIZE = 7;
		Проверить(_дорАудио.уКонецПотока > _дорАудио.уНачалоПотока && _дорАудио.уКонецСемплов === _дорАудио.уНачалоСемплов);
		if (_лРазрыв) {
			Проверить(_дорАудио.ПолучитьРазмерПотока() > ADTS_HEADER_SIZE);
			ParseAdtsFixedHeader(_dvКуча.getUint32(_дорАудио.уНачалоПотока));
		}
		var pAdtsFrame = _дорАудио.уНачалоПотока;
		var уРазобранныйПоток = _дорАудио.уНачалоПотока;
		var уСемпл = _дорАудио.уНачалоСемплов;
		var уКонецПотока = _дорАудио.уКонецПотока - ADTS_HEADER_SIZE;
		var уКонецПамятиСемплов = _дорАудио.уКонецПамятиСемплов - РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА;
		while (pAdtsFrame < уКонецПотока) {
			Проверить(уСемпл <= уКонецПамятиСемплов);
			Проверить(_мбКуча[pAdtsFrame] === 255 && _мбКуча[pAdtsFrame + 1] === 241);
			Проверить((_мбКуча[pAdtsFrame + 6] & 3) == 0);
			var cbAdtsFrame = _dvКуча.getUint32(pAdtsFrame + 3) >> 13 & 8191;
			var pNextAdtsFrame = pAdtsFrame + cbAdtsFrame;
			Проверить(cbAdtsFrame > ADTS_HEADER_SIZE && pNextAdtsFrame <= _дорАудио.уКонецПотока);
			_мбКуча.copyWithin(уРазобранныйПоток, pAdtsFrame + ADTS_HEADER_SIZE, pNextAdtsFrame);
			cbAdtsFrame -= ADTS_HEADER_SIZE;
			уРазобранныйПоток += cbAdtsFrame;
			_dvКуча.setUint32(уСемпл, cbAdtsFrame);
			уСемпл += РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА;
			pAdtsFrame = pNextAdtsFrame;
		}
		Проверить(pAdtsFrame === _дорАудио.уКонецПотока);
		_дорАудио.уКонецПотока = уРазобранныйПоток;
		_дорАудио.уКонецСемплов = уСемпл;
		var чДлительностьАудиоСемпла = ДЛИНА_АУДИОСЕМПЛА / _чЧастотаДискретизации;
		var чДлительностьАудиоСегмента = _дорАудио.ПолучитьКоличествоСемплов() * чДлительностьАудиоСемпла;
		_чВДКонцаАудиоСегмента = _дорАудио.чВДНачала + Math.round(чДлительностьАудиоСегмента * TS_TIMESCALE);
		_чБитрейтЗвука = _дорАудио.ПолучитьРазмерПотока() * 8 / 1e3 / чДлительностьАудиоСегмента;
		м_Журнал.Вот(`ВДКонцаАудСегмента=${(_чВДКонцаАудиоСегмента / TS_TIMESCALE).toFixed(5)}` + ` ДлитАудСегмента=${(чДлительностьАудиоСегмента * 1e3).toFixed(2)}мс` + ` ДлитАудСемпла=${(чДлительностьАудиоСемпла * 1e3).toFixed(2)}мс`);
		return true;
	}
	function ParseAdtsFixedHeader(nAdtsFixedHeader) {
		Проверить((nAdtsFixedHeader & 4294901760) == (4293984256 | 0));
		_nAudioObjectType = (nAdtsFixedHeader >> 14 & 3) + 1;
		Проверить(_nAudioObjectType === 2);
		_anDecoderSpecificInfo[0] = _nAudioObjectType << 3;
		var чИндексЧастотыДискретизации = nAdtsFixedHeader >> 10 & 15;
		_чЧастотаДискретизации = ЧАСТОТА_ДИСКРЕТИЗАЦИИ[чИндексЧастотыДискретизации];
		Проверить(_чЧастотаДискретизации !== void 0);
		_anDecoderSpecificInfo[0] |= чИндексЧастотыДискретизации >> 1;
		_anDecoderSpecificInfo[1] = чИндексЧастотыДискретизации << 7 & 128;
		_чКоличествоКаналов = nAdtsFixedHeader >> 6 & 7;
		Проверить(_чКоличествоКаналов !== 0);
		_anDecoderSpecificInfo[1] |= _чКоличествоКаналов << 3;
		м_Журнал[_nAudioObjectType !== 2 || _чЧастотаДискретизации < 44100 || _чКоличествоКаналов > 2 ? 'Ой' : 'Вот'](`AudioObjectType=${_nAudioObjectType} ЧастотаДискретизации=${_чЧастотаДискретизации} КоличествоКаналов=${_чКоличествоКаналов}`);
	}
	function ПолучитьНазваниеКодеков() {
		var с = 'video/mp4;codecs="';
		if (!_дорВидео.Пусто()) {
			с += `avc1.${`0${_nProfileIndication.toString(16)}`.slice(-2).toUpperCase()}${`0${_nConstraintSetFlag.toString(16)}`.slice(-2).toUpperCase()}${`0${_nLevelIndication.toString(16)}`.slice(-2).toUpperCase()}`;
		}
		if (!_дорВидео.Пусто() && !_дорАудио.Пусто()) {
			с += ',';
		}
		if (!_дорАудио.Пусто()) {
			с += `mp4a.40.${_nAudioObjectType}`;
		}
		return с + '"';
	}
	function СоздатьСегментИнициализации() {
		var кбРазмер = 1100 + (_abSequenceParameterSet === null ? 0 : _abSequenceParameterSet.length) + (_abPictureParameterSet === null ? 0 : _abPictureParameterSet.length) + (_abSequenceParameterSetExt === null ? 0 : _abSequenceParameterSetExt.length) + (_дорАудио.Пусто() ? 0 : _anDecoderSpecificInfo.length);
		var мбСегмент = new Uint8Array(кбРазмер);
		var dvСегмент = СоздатьDataView(мбСегмент);
		var оСегмент = new IsoBaseMedia(мбСегмент, dvСегмент, 0);
		оСегмент.AddBox('ftyp', [ 105, 115, 111, 54, 0, 0, 0, 0, 97, 118, 99, 49 ]);
		оСегмент.AddBox('moov', () => {
			оСегмент.AddFullBox('mvhd', 1, 0, [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255 ]);
			оСегмент.AddBox('mvex', () => {
				if (!_дорВидео.Пусто()) {
					оСегмент.AddFullBox('trex', 0, 0, 20);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 20, НОМЕР_ВИДЕО_ДОРОЖКИ);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 16, 1);
				}
				if (!_дорАудио.Пусто()) {
					оСегмент.AddFullBox('trex', 0, 0, 20);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 20, НОМЕР_АУДИО_ДОРОЖКИ);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 16, 1);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 12, ДЛИНА_АУДИОСЕМПЛА);
				}
			});
			if (!_дорВидео.Пусто()) {
				ДобавитьДорожкуВСегментИнициализации(true, оСегмент);
			}
			if (!_дорАудио.Пусто()) {
				ДобавитьДорожкуВСегментИнициализации(false, оСегмент);
			}
		});
		return оСегмент.Завершить();
	}
	function ДобавитьДорожкуВСегментИнициализации(лВидео, оСегмент) {
		оСегмент.AddBox('trak', () => {
			оСегмент.AddFullBox('tkhd', 0, 3, 80);
			оСегмент.мбБуфер[оСегмент.уКонец - 64] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 63] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 62] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 61] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 43] = 1;
			оСегмент.мбБуфер[оСегмент.уКонец - 27] = 1;
			оСегмент.мбБуфер[оСегмент.уКонец - 12] = 64;
			if (лВидео) {
				оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 72, НОМЕР_ВИДЕО_ДОРОЖКИ);
				оСегмент.dvБуфер.setUint16(оСегмент.уКонец - 8, _чШиринаКартинки);
				оСегмент.dvБуфер.setUint16(оСегмент.уКонец - 4, _чВысотаКартинки);
			} else {
				оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 72, НОМЕР_АУДИО_ДОРОЖКИ);
				оСегмент.dvБуфер.setUint16(оСегмент.уКонец - 48, 256);
			}
			оСегмент.AddBox('mdia', () => {
				оСегмент.AddFullBox('mdhd', 0, 0, 20);
				оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 12, лВидео ? TS_TIMESCALE : _чЧастотаДискретизации);
				оСегмент.мбБуфер[оСегмент.уКонец - 8] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 7] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 6] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 5] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 4] = 85;
				оСегмент.мбБуфер[оСегмент.уКонец - 3] = 196;
				оСегмент.AddFullBox('hdlr', 0, 0, 21);
				if (лВидео) {
					оСегмент.мбБуфер[оСегмент.уКонец - 17] = 118;
					оСегмент.мбБуфер[оСегмент.уКонец - 16] = 105;
					оСегмент.мбБуфер[оСегмент.уКонец - 15] = 100;
					оСегмент.мбБуфер[оСегмент.уКонец - 14] = 101;
				} else {
					оСегмент.мбБуфер[оСегмент.уКонец - 17] = 115;
					оСегмент.мбБуфер[оСегмент.уКонец - 16] = 111;
					оСегмент.мбБуфер[оСегмент.уКонец - 15] = 117;
					оСегмент.мбБуфер[оСегмент.уКонец - 14] = 110;
				}
				оСегмент.AddBox('minf', () => {
					if (лВидео) {
						оСегмент.AddFullBox('vmhd', 0, 1, 8);
					} else {
						оСегмент.AddFullBox('smhd', 0, 0, 4);
					}
					оСегмент.AddBox('dinf', () => {
						оСегмент.AddFullBox('dref', 0, 0, () => {
							оСегмент.dvБуфер.setUint32(оСегмент.уКонец, 1);
							оСегмент.уКонец += 4;
							оСегмент.AddFullBox('url ', 0, 1, 0);
						});
					});
					оСегмент.AddBox('stbl', () => {
						оСегмент.AddFullBox('stsd', 0, 0, () => {
							оСегмент.dvБуфер.setUint32(оСегмент.уКонец, 1);
							оСегмент.уКонец += 4;
							if (лВидео) {
								оСегмент.AddBox('avc1', () => {
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 6, 1);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 24, _чШиринаКартинки);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 26, _чВысотаКартинки);
									оСегмент.dvБуфер.setUint32(оСегмент.уКонец + 28, 4718592);
									оСегмент.dvБуфер.setUint32(оСегмент.уКонец + 32, 4718592);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 40, 1);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 74, 24);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 76, 65535);
									оСегмент.уКонец += 78;
									оСегмент.AddBox('avcC', () => {
										оСегмент.мбБуфер[оСегмент.уКонец] = 1;
										оСегмент.мбБуфер[оСегмент.уКонец + 1] = _nProfileIndication;
										оСегмент.мбБуфер[оСегмент.уКонец + 2] = _nConstraintSetFlag;
										оСегмент.мбБуфер[оСегмент.уКонец + 3] = _nLevelIndication;
										оСегмент.мбБуфер[оСегмент.уКонец + 4] = 255;
										оСегмент.мбБуфер[оСегмент.уКонец + 5] = 225;
										оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 6, _abSequenceParameterSet.length);
										оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 8, _abSequenceParameterSet);
										оСегмент.мбБуфер[оСегмент.уКонец] = 1;
										оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 1, _abPictureParameterSet.length);
										оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 3, _abPictureParameterSet);
										switch (_nProfileIndication) {
										  case 100:
										  case 110:
										  case 122:
										  case 144:
											оСегмент.мбБуфер[оСегмент.уКонец] = 252 | _nChromaFormatIndication;
											оСегмент.мбБуфер[оСегмент.уКонец + 1] = 248 | _nBitDepthLumaMinus8;
											оСегмент.мбБуфер[оСегмент.уКонец + 2] = 248 | _nBitDepthChromaMinus8;
											if (_abSequenceParameterSetExt === null) {
												оСегмент.уКонец += 4;
											} else {
												оСегмент.мбБуфер[оСегмент.уКонец + 3] = 1;
												оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 4, _abSequenceParameterSetExt.length);
												оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 6, _abSequenceParameterSetExt);
											}
										}
									});
								});
							} else {
								оСегмент.AddBox('mp4a', () => {
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 6, 1);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 16, _чКоличествоКаналов === 1 ? 1 : 2);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 18, 16);
									оСегмент.dvБуфер.setUint32(оСегмент.уКонец + 24, _чЧастотаДискретизации << 16);
									оСегмент.уКонец += 28;
									оСегмент.AddFullBox('esds', 0, 0, () => {
										оСегмент.мбБуфер[оСегмент.уКонец] = 3;
										оСегмент.мбБуфер[оСегмент.уКонец + 1] = 23 + _anDecoderSpecificInfo.length;
										оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 2, 1);
										оСегмент.мбБуфер[оСегмент.уКонец + 5] = 4;
										оСегмент.мбБуфер[оСегмент.уКонец + 6] = 15 + _anDecoderSpecificInfo.length;
										оСегмент.мбБуфер[оСегмент.уКонец + 7] = 64;
										оСегмент.мбБуфер[оСегмент.уКонец + 8] = 21;
										оСегмент.мбБуфер[оСегмент.уКонец + 20] = 5;
										оСегмент.мбБуфер[оСегмент.уКонец + 21] = _anDecoderSpecificInfo.length;
										оСегмент.КопироватьИзМассива(оСегмент.уКонец + 22, _anDecoderSpecificInfo);
										оСегмент.мбБуфер[оСегмент.уКонец] = 6;
										оСегмент.мбБуфер[оСегмент.уКонец + 1] = 1;
										оСегмент.мбБуфер[оСегмент.уКонец + 2] = 2;
										оСегмент.уКонец += 3;
									});
								});
							}
						});
						оСегмент.AddFullBox('stts', 0, 0, 4);
						оСегмент.AddFullBox('stsc', 0, 0, 4);
						оСегмент.AddFullBox('stco', 0, 0, 4);
						оСегмент.AddFullBox('stsz', 0, 0, 8);
					});
				});
			});
		});
	}
	function СоздатьМедиасегмент(мбМедиасегмент) {
		var dvМедиасегмент = СоздатьDataView(мбМедиасегмент);
		var оСегмент = new IsoBaseMedia(мбМедиасегмент, dvМедиасегмент, 0);
		var уСмещениеВидеоданных, уСмещениеАудиоданных;
		оСегмент.AddBox('moof', () => {
			оСегмент.AddFullBox('mfhd', 0, 0, 4);
			dvМедиасегмент.setUint32(оСегмент.уКонец - 4, 0);
			if (!_дорВидео.Пусто()) {
				оСегмент.AddBox('traf', () => {
					оСегмент.AddFullBox('tfhd', 0, 131072, 4);
					dvМедиасегмент.setUint32(оСегмент.уКонец - 4, НОМЕР_ВИДЕО_ДОРОЖКИ);
					оСегмент.AddFullBox('tfdt', 1, 0, 8);
					мбМедиасегмент.setUint64(оСегмент.уКонец - 8, _дорВидео.чВДНачала);
					оСегмент.AddFullBox('trun', 1, 3841, () => {
						dvМедиасегмент.setUint32(оСегмент.уКонец, _дорВидео.ПолучитьКоличествоСемплов());
						уСмещениеВидеоданных = оСегмент.уКонец + 4;
						оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 8, _мбКуча, _дорВидео.уНачалоСемплов, _дорВидео.уКонецСемплов);
					});
				});
			}
			if (!_дорАудио.Пусто()) {
				оСегмент.AddBox('traf', () => {
					оСегмент.AddFullBox('tfhd', 0, 131072, 4);
					dvМедиасегмент.setUint32(оСегмент.уКонец - 4, НОМЕР_АУДИО_ДОРОЖКИ);
					оСегмент.AddFullBox('tfdt', 1, 0, 8);
					мбМедиасегмент.setUint64(оСегмент.уКонец - 8, Math.round(_дорАудио.чВДНачала / TS_TIMESCALE * _чЧастотаДискретизации));
					оСегмент.AddFullBox('trun', 1, 513, () => {
						dvМедиасегмент.setUint32(оСегмент.уКонец, _дорАудио.ПолучитьКоличествоСемплов());
						уСмещениеАудиоданных = оСегмент.уКонец + 4;
						оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 8, _мбКуча, _дорАудио.уНачалоСемплов, _дорАудио.уКонецСемплов);
					});
				});
			}
		});
		оСегмент.AddBox('mdat', () => {
			if (!_дорВидео.Пусто()) {
				dvМедиасегмент.setInt32(уСмещениеВидеоданных, оСегмент.уКонец - оСегмент.уНачало);
				оСегмент.КопироватьИзБуфера(оСегмент.уКонец, _мбКуча, _дорВидео.уНачалоПотока, _дорВидео.уКонецПотока);
			}
			if (!_дорАудио.Пусто()) {
				dvМедиасегмент.setInt32(уСмещениеАудиоданных, оСегмент.уКонец - оСегмент.уНачало);
				оСегмент.КопироватьИзБуфера(оСегмент.уКонец, _мбКуча, _дорАудио.уНачалоПотока, _дорАудио.уКонецПотока);
			}
		});
		return оСегмент.Завершить();
	}
	function ОтправитьПреобразованныйСегмент(мбМедиасегмент) {
		var мбуфПередать = void 0;
		var оДанные = {
			чПреобразованЗа: _чПреобразованЗа,
			лЗабраковано: _лЗабраковано,
			лПотериВидео: _лПотериВидео,
			лПотериЗвука: _лПотериЗвука,
			чМинДлительностьВидеоСемпла: _чМинДлительностьВидеоСемпла / TS_TIMESCALE * 1e3,
			чМаксДлительностьВидеоСемпла: _чМаксДлительностьВидеоСемпла / TS_TIMESCALE * 1e3,
			чСредняяДлительностьВидеоСемпла: _чСредняяДлительностьВидеоСемпла / TS_TIMESCALE * 1e3,
			чБитрейтЗвука: _чБитрейтЗвука,
			чПозицияКодирования: _чПозицияКодирования,
			чПозицияТрансляции: _чПозицияТрансляции,
			чВремяКодирования: _чВремяКодирования
		};
		if (мбМедиасегмент) {
			оДанные.мбМедиасегмент = СоздатьМедиасегмент(мбМедиасегмент);
			оДанные.лЕстьВидео = !_дорВидео.Пусто();
			оДанные.лЕстьЗвук = !_дорАудио.Пусто();
			мбуфПередать = [ оДанные.мбМедиасегмент.buffer ];
			if (_лРазрыв) {
				оДанные.мбСегментИнициализации = СоздатьСегментИнициализации();
				оДанные.сКодеки = ПолучитьНазваниеКодеков();
				оДанные.nProfileIndication = _nProfileIndication;
				оДанные.nConstraintSetFlag = _nConstraintSetFlag;
				оДанные.nLevelIndication = _nLevelIndication;
				оДанные.nMaxNumberReferenceFrames = _nMaxNumberReferenceFrames;
				оДанные.чШиринаКартинки = _чШиринаКартинки;
				оДанные.чВысотаКартинки = _чВысотаКартинки;
				оДанные.чЧастотаКадров = _чЧастотаКадров;
				оДанные.чДиапазон = _чДиапазон;
				оДанные.лЧересстрочное = _лЧересстрочное;
				оДанные.nAudioObjectType = _nAudioObjectType;
				оДанные.чЧастотаДискретизации = _чЧастотаДискретизации;
				оДанные.чКоличествоКаналов = _чКоличествоКаналов;
				мбуфПередать.push(оДанные.мбСегментИнициализации.buffer);
			}
			_оИсходныйСегмент.лРазрыв = _лРазрыв;
			м_Журнал.Вот(`Отправляю сегмент Разрыв=${_лРазрыв} Размер=${(оДанные.мбМедиасегмент.length / 1024 / 1024).toFixed(2)}мб`);
		}
		_оИсходныйСегмент.пДанные = оДанные;
		м_Журнал.Отправить();
		ОтправитьРезультат(мбуфПередать);
	}
	function СостыковатьСегменты() {
		if (_лРазрыв) {
			return;
		}
		var чОтклонениеВДВидео = 0, чПерекрытиеВДВидео = 1, чОтклонениеВДАудио = 0;
		if (!_дорВидео.Пусто()) {
			чОтклонениеВДВидео = _дорВидео.чВДНачала - _чВДКонцаПредыдущегоВидеоСегмента;
			чПерекрытиеВДВидео = _дорВидео.чВДНачала - _чВДПоследнегоВидеоСемплаПредыдущегоВидеоСегмента;
		}
		if (!_дорАудио.Пусто()) {
			чОтклонениеВДАудио = _дорАудио.чВДНачала - _чВДКонцаПредыдущегоАудиоСегмента;
		}
		if (чПерекрытиеВДВидео <= 0 || чОтклонениеВДАудио < -TS_TIMESCALE * .1) {
			м_Журнал.Ой(`Добавлен разрыв: ОтклонениеВДВидео=${Мс(чОтклонениеВДВидео)} ПерекрытиеВДВидео=${Мс(чПерекрытиеВДВидео)} ОтклонениеВДАудио=${чОтклонениеВДАудио}`);
			_лРазрыв = true;
			return;
		}
		if (Math.abs(чОтклонениеВДВидео) > TS_TIMESCALE * .002 || Math.abs(чОтклонениеВДАудио) > 2) {
			м_Журнал.Ой(`ОтклонениеВДВидео=${Мс(чОтклонениеВДВидео)} ПерекрытиеВДВидео=${Мс(чПерекрытиеВДВидео)} ОтклонениеВДАудио=${чОтклонениеВДАудио}`);
		}
		if (чОтклонениеВДВидео > TS_TIMESCALE * .01) {
			_лПотериВидео = true;
		}
		if (чОтклонениеВДАудио > TS_TIMESCALE * .1) {
			_лПотериЗвука = true;
		}
	}
	function РассчитатьДлительностьПоследнегоВидеосемпла() {
		var кВидеосемплов = _дорВидео.ПолучитьКоличествоСемплов();
		if (кВидеосемплов === 0) {
			return;
		}
		var чДлительность;
		if (кВидеосемплов === 1) {
			чДлительность = _дорАудио.Пусто() ? Math.round(TS_TIMESCALE / 30) : _чВДКонцаАудиоСегмента - _дорАудио.чВДНачала;
		} else {
			чДлительность = _dvКуча.getUint32(_дорВидео.уКонецСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА * 2 + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА);
			var уСемпл = _дорВидео.уКонецСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
			var чВД = 0;
			var чВППоследнегоВидеоСемпла = _dvКуча.getInt32(уСемпл + ВП_ВИДЕОСЕМПЛА);
			for (var ы = Math.min(16, кВидеосемплов); --ы != 0; ) {
				уСемпл -= РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
				чВД -= _dvКуча.getUint32(уСемпл + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА);
				var чВП = чВД + _dvКуча.getInt32(уСемпл + ВП_ВИДЕОСЕМПЛА);
				if (чВП > чВППоследнегоВидеоСемпла) {
					чДлительность = Math.min(чДлительность, чВП - чВППоследнегоВидеоСемпла);
				}
			}
		}
		м_Журнал[кВидеосемплов === 1 ? 'Ой' : 'Вот'](`Длительность последнего видеосемпла ${Мс(чДлительность)}`);
		_dvКуча.setUint32(_дорВидео.уКонецСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА, чДлительность);
		_чВДКонцаВидеоСегмента = _чВДПоследнегоВидеоСемпла + чДлительность;
	}
	function ПреобразоватьСегмент() {
		var чНачало = performance.now();
		_лРазрыв = _лРазрыв || _оИсходныйСегмент.лРазрыв;
		м_Журнал.Вот(`ПРЕОБРАЗУЮ СЕГМЕНТ ${_оИсходныйСегмент.чНомер} Разрыв=${_лРазрыв} Длительность=${_оИсходныйСегмент.чДлительность} Размер=${(_оИсходныйСегмент.пДанные.byteLength / 1024 / 1024).toFixed(2)}мб`);
		ОчиститьСтатистику();
		var лСегментПреобразован = false;
		var мбТранспортныйПоток = new Uint8Array(_оИсходныйСегмент.пДанные);
		try {
			м_Память.Выделить(мбТранспортныйПоток);
			if (РазобратьТранспортныйПоток(мбТранспортныйПоток)) {
				СостыковатьСегменты();
				РазобратьМетаданные();
				лСегментПреобразован = РазобратьВидеоПоток() && РазобратьАудиоПоток();
				if (лСегментПреобразован) {
					РассчитатьДлительностьПоследнегоВидеосемпла();
				}
			}
		} catch (пИсключение) {
			if (пИсключение instanceof Error && пИсключение.message === 'БРАКОВАТЬ') {
				м_Журнал.Ой(`Сегмент забракован: ${пИсключение.stack}`);
				ОчиститьСтатистику();
				_лЗабраковано = true;
			} else {
				throw пИсключение;
			}
		}
		_оИсходныйСегмент.пДанные = null;
		if (лСегментПреобразован) {
			ОтправитьПреобразованныйСегмент(мбТранспортныйПоток);
		} else {
			ВыброситьВПомойку(мбТранспортныйПоток);
			ОтправитьПреобразованныйСегмент(null);
		}
		_лРазрыв = !лСегментПреобразован;
		_чВДПоследнегоВидеоСемплаПредыдущегоВидеоСегмента = _чВДПоследнегоВидеоСемпла;
		_чВДКонцаПредыдущегоВидеоСегмента = _чВДКонцаВидеоСегмента;
		_чВДКонцаПредыдущегоАудиоСегмента = _чВДКонцаАудиоСегмента;
		_чПреобразованЗа = performance.now() - чНачало;
	}
	function ОбработатьСменуСостояния() {
		м_Журнал.Вот(`ПРОПУСКАЮ СЕГМЕНТ ${_оИсходныйСегмент.чНомер} Состояние=${_оИсходныйСегмент.пДанные}`);
		if (_оИсходныйСегмент.пДанные !== СОСТОЯНИЕ_СМЕНА_ВАРИАНТА) {
			м_Память.Освободить();
		}
		м_Журнал.Отправить();
		ОтправитьРезультат();
		_лРазрыв = true;
	}
	function ОбработатьСообщение(пДанные) {
		_оИсходныйСегмент = пДанные;
		if (typeof _оИсходныйСегмент.пДанные == 'number') {
			ОбработатьСменуСостояния();
		} else {
			ПреобразоватьСегмент();
		}
		_оИсходныйСегмент = null;
	}
	function ОбработатьИсключение(пИсключение) {
		self.onmessage = null;
		_мНеобработанныеСообщения = null;
		м_Память.Освободить();
		м_Журнал.Отправить();
		ЗавершитьРаботуИОтправитьОтчет(пИсключение);
	}
	self.onmessage = (оСобытие => {
		try {
			if (_мНеобработанныеСообщения !== null) {
				_мНеобработанныеСообщения.push(оСобытие.data);
				м_Журнал.Ой('Обработка сообщения отложена: компиляция не завершена');
				м_Журнал.Отправить();
			} else {
				ОбработатьСообщение(оСобытие.data);
			}
		} catch (пИсключение) {
			ОбработатьИсключение(пИсключение);
		}
	});
	self.onmessageerror = (оСобытие => {
		throw new Error(`Произошло событие ${оСобытие.type}`);
	});
	_оАссемблер.Компилировать().then(() => {
		м_Журнал.Вот(`Компиляция завершена: ${performance.now().toFixed()}мс Необработанных сообщений: ${_мНеобработанныеСообщения.length}`);
		while (_мНеобработанныеСообщения.length !== 0) {
			ОбработатьСообщение(_мНеобработанныеСообщения.shift());
		}
		_мНеобработанныеСообщения = null;
	}).catch(ОбработатьИсключение);
}


================================================
FILE: _locales/en/messages.json
================================================
{
	"M0001":
	{
		"message": "Alternate player of live broadcasts for Twitch.tv website.",
		"description": "Краткое описание расширения. Копия этой строки есть в AMO и Windows Store."
	},
	"M0010":
	{
		"message": "en",
		"description": "Код языка этого файла в формате BCP 47 Language Tag"
	},
	"J0100":
	{
		"message": "Broadcast ended"
	},
	"J0101":
	{
		"message": "\n\nClick to open this channel on the Twitch.tv website:\n• To watch this broadcast or video in standard player.\n• To read the full description of the channel.\n• To perform other actions that are not available in the Alternate Player."
	},
	"J0102":
	{
		"message": "\n\nClick to watch other broadcasts and videos of this category."
	},
	"J0103":
	{
		"message": "Untitled",
		"description": "Название трансляции не указано."
	},
	"J0104":
	{
		"message": "Not specified",
		"description": "Название категории не указано."
	},
	"J0106":
	{
		"message": "Stop the broadcast and start watching instant replay.\nThe SPACE key on the keyboard."
	},
	"J0107":
	{
		"message": "Continue watching the broadcast.\nThe SPACE key on the keyboard."
	},
	"J0108":
	{
		"message": "Mute the sound.\nPress PAGE DOWN or M key on the keyboard or click the mouse wheel (see the player settings)."
	},
	"J0109":
	{
		"message": "Unmute the sound.\nPress PAGE UP or M key on the keyboard or click the mouse wheel (see the player settings)."
	},
	"J0112":
	{
		"message": "Pause instant replay.\nPress K or 5 (numpad) key on the keyboard."
	},
	"J0113":
	{
		"message": "Play instant replay.\nPress K or 5 (numpad) key on the keyboard."
	},
	"J0114":
	{
		"message": "Mbit/s"
	},
	"J0120":
	{
		"message": "Auto",
		"description": "Текст или HTML-фрагмент. Длина слова не более 5 символов. Означает, что значение настройки подбирается автоматически."
	},
	"J0121":
	{
		"message": "Steel Blue",
		"description": "Название темы оформления."
	},
	"J0122":
	{
		"message": "Goldish",
		"description": "Название темы оформления."
	},
	"J0123":
	{
		"message": "Customizable",
		"description": "Название темы оформления. Копия A0565."
	},
	"J0124":
	{
		"message": "Maximal",
		"description": "Число в настройках проигрывателя заменяется на это слово. Длина слова не более 7 символов. Означает отсутствие ограничений. Копия A0534."
	},
	"J0125":
	{
		"message": "Black And White",
		"description": "Название темы оформления."
	},
	"J0126":
	{
		"message": "Good",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0127":
	{
		"message": "Moderate",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0128":
	{
		"message": "Bad",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0129":
	{
		"message": "Customizable",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0133":
	{
		"message": "Alternate Player for Twitch.tv extension settings.json"
	},
	"J0136":
	{
		"message": "After saving the settings, close this window.",
		"description": "HTML"
	},
	"J0138":
	{
		"message": "Incognito",
		"description": "Название темы оформления."
	},
	"J0139":
	{
		"message": "(source)",
		"description": "Часть названия качества трансляции. Копия A0513."
	},
	"J0140":
	{
		"message": "fps",
		"description": "Единица измерения: кадр в секунду"
	},
	"J0141":
	{
		"message": "Hz",
		"description": "Единица измерения: герц"
	},
	"J0142":
	{
		"message": "chan.",
		"description": "Единица измерения: каналы"
	},
	"J0143":
	{
		"message": "kbit/s",
		"description": "Единица измерения: килобит в секунду"
	},
	"J0144":
	{
		"message": "Audio only",
		"description": "Название качества трансляции"
	},
	"J0145":
	{
		"message": "Offline",
		"description": "Тип трансляции: трансляция завершена (offline)"
	},
	"J0146":
	{
		"message": "Live",
		"description": "Тип трансляции: прямой эфир (live)"
	},
	"J0147":
	{
		"message": "Rerun",
		"description": "Тип трансляции: повтор (rerun)"
	},
	"J0148":
	{
		"message": "Translate this text"
	},
	"J0149":
	{
		"message": "You are watching a live broadcast. Use the player menu to rewatch it.",
		"description": "Копия F0664"
	},
	"J0150":
	{
		"message": "You are watching a previously recorded video"
	},
	"J0200":
	{
		"message": "The browser was unable to play the video. Perhaps it allocated too much RAM."
	},
	"J0201":
	{
		"message": "Your browser is unable to play the video or audio. If this shit happens on all Twitch.tv channels, then your browser does not support H.264 or AAC. In this case, please remove the “Alternate Player for Twitch.tv” extension from your browser."
	},
	"J0203":
	{
		"message": "The specified channel does not exist. Perhaps you typed the wrong address."
	},
	"J0204":
	{
		"message": "This version of the “Alternate Player for Twitch.tv” extension does not work in your browser. Please remove the extension from your browser and install the correct version.\n\nVersion for Google Chrome:\nhttps://chrome.google.com/webstore/detail/bhplkbgoehhhddaoolmakpocnenplmhf\n\nVersion for Mozilla Firefox:\nhttps://addons.mozilla.org/firefox/addon/twitch_5/\n\nVersion for Microsoft Edge:\nhttps://microsoftedge.microsoft.com/addons/detail/aojjiodaaogdbbcnbpjnojilccopgcbk"
	},
	"J0206":
	{
		"message": "There is a problem with video playback.\n\nPossible causes:\n• Video or audio uses compression, which is not supported by your browser.\n• The browser does not have enough RAM, or the browser has allocated too much RAM, or the 32-bit browser has allocated too much address space (see browser's “Virtual Size” in the “Process Explorer” utility). Some 64-bit browsers cannot allocate more than 4 GB of RAM per process. All tabs with the player share a single process.\n• The video was corrupted.\n• Problems with computer hardware: overheating, overclocking, etc.\n• Bugs in computer software.\n\nPlease reload the page to continue viewing the broadcast. If the problem persists on other channels, and you do not know its cause, follow these steps one at a time until the error will disappear:\n• Close the several browser tabs (to free up memory).\n• Restart the browser.\n• Restart the computer.\n• Disable hardware-accelerated video decoding.\n• Reset the browser settings.\n• Update the video card drivers.\n• Uninstall the “codec pack” (if any)."
	},
	"J0208":
	{
		"message": "There is a problem with video playback. Try to reload this page to continue watching."
	},
	"J0211":
	{
		"message": "This channel is already open in another tab of the browser. Click the “Back” button to return to the previous page."
	},
	"J0215":
	{
		"message": "The “$FULL_EXTENSION_NAME$” extension requires access to certain sites to play the broadcast. You have removed access to one of these sites. Please reset site access settings. If you do not know how to do this, reinstall the extension.\n\nDo you just need to disable the automatic start of the player? Read the built-in help in the player.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0216":
	{
		"message": "One of your browser settings prevents the $FULL_EXTENSION_NAME$ extension from working. To fix it, open the tab with the address $ADDRESS$. On the page, paste “$NAME$” into the search field. The current status of this setting will appear below. Double-click it to change the value to “false”.\n\nInstead of this setting, enable Total Cookie Protection.\n\nFor technical details, see https://bugzilla.mozilla.org/show_bug.cgi?id=1558467",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			},
			"ADDRESS":
			{
				"content": "about:config"
			},
			"NAME":
			{
				"content": "privacy.firstparty.isolate"
			}
		}
	},
	"J0217":
	{
		"message": "This broadcast is not available in your region. Click the “Back” button to return to the previous page."
	},
	"J0219":
	{
		"message": "This broadcast is encrypted. The $FULL_EXTENSION_NAME$ extension does not support encrypted broadcasts. Click the “Back” button to return to the previous page.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0220":
	{
		"message": "The $FULL_EXTENSION_NAME$ extension is not compatible with the Shelblock.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0221":
	{
		"message": "An error occurred in $FULL_EXTENSION_NAME$ browser extension. Try to reload this page. If this error appears constantly, then the extension is not compatible with your browser or its settings.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0222":
	{
		"message": "A change in your login status on Twitch.tv website has been detected. Reload the page to continue."
	},
	"F0501":
	{
		"message": "Category:"
	},
	"F0502":
	{
		"message": "Viewers:"
	},
	"A0503":
	{
		"message": "The number of people watching this broadcast now, including you and perhaps the broadcaster. This number is updated about once a minute."
	},
	"A0504":
	{
		"message": "Create a clip.\nThe ALT+X on the keyboard.\n\nYou must be logged in on the Twitch.tv website. If you pause the broadcast, you have less than a minute to create a clip."
	},
	"F0505":
	{
		"message": "Disable",
		"description": "Настройка отключена."
	},
	"A0506":
	{
		"message": "Change the volume.\nPress the UP/DOWN ARROWS on the keyboard or rotate the mouse wheel (see the player settings)."
	},
	"A0507":
	{
		"message": "The duration of this broadcast.\nClick to show the player statistics.",
		"description": "Копия A0527."
	},
	"A0508":
	{
		"message": "Click to see what's new in the extension!"
	},
	"A0509":
	{
		"message": "Open or close the chat. This command is available in full-screen mode.\nThe C key on the keyboard."
	},
	"A0510":
	{
		"message": "Open or close the player settings.\nThe V key on the keyboard."
	},
	"A0511":
	{
		"message": "Toggle full-screen mode.\nPress ENTER or F key on the keyboard or double-click the view area."
	},
	"F0512":
	{
		"message": "Video quality"
	},
	"A0513":
	{
		"message": "You can reduce the quality if the download speed or your computer's performance is insufficient for continuous playback of this video. Not all channels allow to change the quality.\n\nSource — the source video with the highest quality. Other variants have lower quality; the source video was recompressed on the Twitch.tv server.\n\nAudio only — the video is not downloaded nor shown. This reduces the resource (CPU, RAM, Internet connection) usage by the player. Ideal for music listening.",
		"description": "Копия J0139 J0144."
	},
	"F0514":
	{
		"message": "Simultaneous downloads"
	},
	"A0515":
	{
		"message": "The video is downloaded from the network by the small parts — segments. A setting value greater than 1 allows you to simultaneously download a specified number of segments. This will increase the overall download speed, but only if the download speed of one segment is lower than the bandwidth of your Internet connection, or “time to first byte” more than 0.5 seconds (see in the statistics). Otherwise it will only get worse: you will have to increase the buffer size, and this will increase the stream delay.\n\nA setting value greater than 1 can slightly delay the start of playback after opening the player (see the description of the “Start playback” setting). It can also lengthen the playback interruption caused by a segment downloading error (see “Download errors” in the statistics)."
	},
	"F0516":
	{
		"message": "Buffer size, seconds"
	},
	"A0517":
	{
		"message": "The downloaded video accumulates in the buffer. Playback will begin as soon as the duration of the video in the buffer will be not less than the specified value. This allows not to interrupt the playback during short-term problems of the network or server.\n\nIf you have frequent interruption of the playback (see “Buffer underruns” in the statistics), try to increase this value.\n\nIncreasing the buffer size increases the “stream delay” (see in the statistics) — the time between the capture of the video on a remote computer and the playback of this video on your computer. Low stream delay is important only for those who use the chat.\n\nI do NOT recommend to use a very small buffer size because during low buffer fullness (less than 1 seconds of video, see “Buffer fullness” in the statistics) there can be annoying visual artifacts (jerking, blackening of the screen, etc.)."
	},
	"F0518":
	{
		"message": "Start playback, seconds"
	},
	"A0519":
	{
		"message": "Unlike the “Buffer size” setting, this setting affects only the first start of playback. Allows you to faster start watching after the opening of the player.\n\nWhen this is useful:\n\n• You want to start playback as soon as possible.\n\n• You have no problems with the download speed, therefore no need to wait when the buffer becomes full.\n\n“Start playback” can be greater than “Buffer size”, i.e. they can be swapped. This is useful in case of large “Start playback” (for example, more than 10 s) and if “Download rate” (see in the statistics) does not much exceed “Stream bit rate” (for example, no more than twice)."
	},
	"F0524":
	{
		"message": "Reset"
	},
	"A0525":
	{
		"message": "Reset the extension to default settings"
	},
	"F0526":
	{
		"message": "Statistics"
	},
	"A0527":
	{
		"message": "Show the player statistics.\nYou can also click the time in the lower left corner of the player.",
		"description": "Копия A0507."
	},
	"F0528":
	{
		"message": "Send Feedback",
		"description": "Пункт меню. Копия F1510."
	},
	"A0529":
	{
		"message": "You have found a bug in the Alternate Player for Twitch.tv extension? You have ideas how to improve it? Send your feedback to the developer of the extension."
	},
	"F0530":
	{
		"message": "Please Support",
		"description": "Копия F1000."
	},
	"A0531":
	{
		"message": "If you liked the Alternate Player for Twitch.tv extension, then you can thank the developer by donating him some money. Donation will also serve as a great motivation to continue the extension development."
	},
	"A0532":
	{
		"message": "Drag to resize the chat.\nOther chat options are available in the player settings."
	},
	"F0533":
	{
		"message": "Instant replay duration, seconds"
	},
	"A0534":
	{
		"message": "The player remembers the specified number of seconds of broadcasting. At any time you can pause the broadcast to replay them.\n\nThe greater the duration, the higher the memory usage. Anyway the maximum memory usage will not exceed 150 megabytes in Chrome or 100 megabytes in Firefox.\n\nMaximum duration (click “+” or “−” until the word “Maximal”) — remove the time limit, leaving only the memory limit.",
		"description": "Вариант для Chrome и Firefox. A0578 для Edge."
	},
	"A0535":
	{
		"message": "The last seconds of the broadcast. The duration can be changed in the settings.\nTo rewind, left-click or press J, SHIFT+J, LEFT ARROW, SHIFT+LEFT ARROW, L, SHIFT+L, RIGHT ARROW, SHIFT+RIGHT ARROW."
	},
	"A0536":
	{
		"message": "Change the playback speed.\nThe keys 0 through 9, PLUS and MINUS on the keyboard.\nYour computer's performance may be insufficient for playback at the maximum speed."
	},
	"F0537":
	{
		"message": "Buffer overflow, seconds"
	},
	"A0538":
	{
		"message": "If duration of the video in the buffer exceeds the sum “Buffer size” + “Buffer overflow”, then part of this video will be deleted (see “Buffer overflows” in the statistics) and the red scissors icon will be shown in the upper right corner of the player.\n\nDecrease the setting to limit the maximum stream delay. Increase the setting to avoid skipping parts of the video."
	},
	"F0539":
	{
		"message": "Resolution",
		"description": "Название параметра статистики."
	},
	"F0540":
	{
		"message": "Video",
		"description": "Название параметра статистики."
	},
	"F0541":
	{
		"message": "Audio",
		"description": "Название параметра статистики."
	},
	"F0542":
	{
		"message": "Server",
		"description": "Название параметра статистики."
	},
	"F0543":
	{
		"message": "Queue, s",
		"description": "Название параметра статистики."
	},
	"F0544":
	{
		"message": "Playlist, s",
		"description": "Название параметра статистики."
	},
	"F0545":
	{
		"message": "Polling interval, s",
		"description": "Название параметра статистики."
	},
	"F0546":
	{
		"message": "Added segments",
		"description": "Название параметра статистики."
	},
	"F0547":
	{
		"message": "Added seconds",
		"description": "Название параметра статистики."
	},
	"F0548":
	{
		"message": "Stream bit rate, Mbit/s",
		"description": "Название параметра статистики."
	},
	"F0549":
	{
		"message": "Download rate, Mbit/s",
		"description": "Название параметра статистики."
	},
	"F0550":
	{
		"message": "Time to first byte, s",
		"description": "Название параметра статистики."
	},
	"F0551":
	{
		"message": "Remux, ms",
		"description": "Название параметра статистики."
	},
	"F0552":
	{
		"message": "Stream delay, s",
		"description": "Название параметра статистики."
	},
	"F0554":
	{
		"message": "Watching duration",
		"description": "Название параметра статистики."
	},
	"F0555":
	{
		"message": "Total downloaded, MB",
		"description": "Название параметра статистики."
	},
	"F0556":
	{
		"message": "Dropped frames",
		"description": "Название параметра статистики."
	},
	"F0557":
	{
		"message": "Incomplete segments",
		"description": "Название параметра статистики."
	},
	"F0558":
	{
		"message": "Download errors",
		"description": "Название параметра статистики."
	},
	"F0559":
	{
		"message": "Buffer overflows",
		"description": "Название параметра статистики."
	},
	"F0560":
	{
		"message": "Buffer underruns",
		"description": "Название параметра статистики."
	},
	"F0561":
	{
		"message": "Playback",
		"description": "Группа настроек."
	},
	"F0562":
	{
		"message": "Colors",
		"description": "Группа настроек."
	},
	"F0563":
	{
		"message": "Buffering",
		"description": "Группа настроек."
	},
	"F0564":
	{
		"message": "Player color theme"
	},
	"A0565":
	{
		"message": "To set your own colors, select the suitable theme, then open the “Colors” settings group. All changes will be saved in the “Customizable” theme."
	},
	"F0566":
	{
		"message": "Background color"
	},
	"F0567":
	{
		"message": "Buttons color"
	},
	"F0568":
	{
		"message": "Headers color"
	},
	"F0569":
	{
		"message": "Highlight color"
	},
	"F0570":
	{
		"message": "Transparency, %"
	},
	"F0571":
	{
		"message": "Check"
	},
	"A0572":
	{
		"message": "Check the legibility of the interface elements and the readability of the text.\n\nTo leave the background intact, click this button while holding down the SHIFT key on the keyboard."
	},
	"F0573":
	{
		"message": "Buffer fullness, s",
		"description": "Название параметра статистики."
	},
	"F0574":
	{
		"message": "Change volume by mouse wheel"
	},
	"A0575":
	{
		"message": "Pressing the mouse wheel will mute the sound. Rotating the mouse wheel (and sometimes vertical swiping) will change the volume by specified percentage.\n\nOnly mute — handle pressing the wheel and ignore its rotation.",
		"description": "Копия F0679."
	},
	"F0576":
	{
		"message": "No"
	},
	"F0577":
	{
		"message": "Yes"
	},
	"A0578":
	{
		"message": "The player remembers the specified number of seconds of broadcasting. At any time you can pause the broadcast to replay them.\n\nThe greater the duration, the higher the memory usage.",
		"description": "Вариант для Edge. A0534 для Chrome и Firefox."
	},
	"F0579":
	{
		"message": "Gradient color"
	},
	"F0580":
	{
		"message": "Connection quality"
	},
	"A0581":
	{
		"message": "Good — the download speed is always enough for the selected video quality (see the description of the “Video quality” setting). Select this option to make chatting easier (see the description of the “Buffer size” setting).\n\nModerate — sometimes the download speed falls below the desired level (see “Download rate” in the statistics). This is the most universal option.\n\nBad — the download speed often falls below the desired level or some segments cannot be downloaded due to network errors (see “Download errors” in the statistics). Select this option to reduce the number of playback interruptions.\n\nCustomizable — you have changed the settings in the “Buffering” settings group."
	},
	"F0582":
	{
		"message": "Broadcast language:"
	},
	"F0583":
	{
		"message": "Followers:"
	},
	"F0585":
	{
		"message": "Channel created:"
	},
	"F0588":
	{
		"message": "Team:"
	},
	"F0589":
	{
		"message": "You:"
	},
	"F0590":
	{
		"message": "must <a href='https://www.twitch.tv/login' rel='noopener noreferrer'>login on the Twitch.tv website</a> to follow, chat, create clips, earn Channel Points and Drops"
	},
	"F0591":
	{
		"message": "Follow"
	},
	"A0592":
	{
		"message": "Click to begin following this channel.\n\nTo track your followed channels, quickly switch between them, and also to search for new channels, I recommend installing the “Twitch\u00A0Now” browser extension."
	},
	"F0593":
	{
		"message": "Unfollow"
	},
	"A0594":
	{
		"message": "Click to unfollow this channel"
	},
	"A0595":
	{
		"message": "Check the box to receive updates on this channel's activity, including when it go live",
		"description": "Текст скопирован с сайта Twitch.tv"
	},
	"A0597":
	{
		"message": "Open or close the information about this channel.\nThe I key on the keyboard."
	},
	"A0599":
	{
		"message": "Show important information.\nThe F1 key on the keyboard."
	},
	"F0600":
	{
		"message": "Right click toggles auto start<br>of the Alternate Player.&ensp;Left<br>click starts the Alternate Player."
	},
	"F0604":
	{
		"message": "All Settings"
	},
	"F0605":
	{
		"message": "Export"
	},
	"A0606":
	{
		"message": "Save all extension settings to a file"
	},
	"F0607":
	{
		"message": "Import"
	},
	"A0608":
	{
		"message": "Restore all extension settings from the file"
	},
	"F0609":
	{
		"message": "Interface",
		"description": "Группа настроек."
	},
	"F0610":
	{
		"message": "Interface size, %"
	},
	"A0611":
	{
		"message": "Size of the player interface: buttons, text, etc. Does not affect the size of the video."
	},
	"F0612":
	{
		"message": "Interface animation"
	},
	"A0613":
	{
		"message": "You can turn off the animation of the player interface on slow computer, such as a tablet"
	},
	"F0614":
	{
		"message": "Chat color theme"
	},
	"A0615":
	{
		"message": "Allows you to enable dark mode in the chat. This setting only affects the chat that is embedded in the player."
	},
	"F0616":
	{
		"message": "Light"
	},
	"F0617":
	{
		"message": "Dark"
	},
	"A0618":
	{
		"message": "Scroll down to see more content"
	},
	"F0619":
	{
		"message": "I have read and understood"
	},
	"A0620":
	{
		"message": "Do not show this news again.\n\nTo view all news, click “Latest News” in the player menu.",
		"description": "Копия A0620."
	},
	"F0621":
	{
		"message": "I will read it later"
	},
	"A0622":
	{
		"message": "Temporarily close this window"
	},
	"F0623":
	{
		"message": "Chat placement"
	},
	"A0624":
	{
		"message": "Choose the side of the browser window for chat placement. Auto — automatically choose one of the two specified sides, depending on the aspect ratio of the window.\n\nThe CTRL+U on the keyboard."
	},
	"F0625":
	{
		"message": "Help",
		"description": "Пункт меню. Копия F1501."
	},
	"F0626":
	{
		"message": "Chat"
	},
	"F0627":
	{
		"message": "Hide after inactivity, s"
	},
	"A0628":
	{
		"message": "The player interface will be hidden if you do not touch the mouse for the specified time"
	},
	"F0629":
	{
		"message": "Closed chat",
		"description": "Название настройки. Копия F1065."
	},
	"A0630":
	{
		"message": "Choose how you want to close the chat. If the chat is unloaded:\n• It does not receive messages.\n• You are not in the chatters list.\n• Chests with bonus points will not open.\n• It will take more time to reopen the chat.\nIf the chat is hidden:\n• It continues to consume a significant amount of computer resources (CPU and RAM).\n• Chests with bonus points automatically open.\n• During the player start-up, it takes more time to begin the video playback."
	},
	"F0631":
	{
		"message": "Unload"
	},
	"F0632":
	{
		"message": "Hide"
	},
	"F0633":
	{
		"message": "Notify"
	},
	"F0634":
	{
		"message": "Audio output"
	},
	"A0635":
	{
		"message": "Select the device for audio output. This setting is hidden if only one audio device is available."
	},
	"F0636":
	{
		"message": "Give permission"
	},
	"A0637":
	{
		"message": "Before selecting a device for audio output, you need to click this button and give the extension additional permission to change the microphone settings (the word “microphone” means both audio input and output)."
	},
	"F0640":
	{
		"message": "Discover"
	},
	"F0641":
	{
		"message": "All Categories"
	},
	"F0642":
	{
		"message": "Following"
	},
	"F0643":
	{
		"message": "Followed Channels"
	},
	"F0644":
	{
		"message": "Followed Categories"
	},
	"F0645":
	{
		"message": "My Clips"
	},
	"F0646":
	{
		"message": "Notifications settings"
	},
	"A0647":
	{
		"message": "Click to open the notifications settings on the Twitch.tv website"
	},
	"F0648":
	{
		"message": "Chat version"
	},
	"A0649":
	{
		"message": "Full-featured — identical to the popout chat on the Twitch.tv website. Whispers do not work in chat yet. If you need to toggle the dark mode, do it on the Twitch.tv website.\n\nLess features — no rooms, no moderation settings, no raids, no Bits, sometimes you need to confirm the sending of the first message. Use this version if the full-featured version does not work as it should. To enable inline moderation icons, check the “Mod Icons” option in your chat setting on the Twitch.tv website."
	},
	"F0650":
	{
		"message": "Full-featured"
	},
	"F0651":
	{
		"message": "Less features"
	},
	"F0652":
	{
		"message": "Less features; dark mode"
	},
	"F0653":
	{
		"message": "Copy Channel Address"
	},
	"A0654":
	{
		"message": "Copy to clipboard the address of this channel to share it with other people, create a bookmark in the browser, etc."
	},
	"F0655":
	{
		"message": "Copy Broadcast Address"
	},
	"A0656":
	{
		"message": "Copy to clipboard the address of this broadcast to view it in another player that supports HLS, for example Media Player Classic, VLC Media Player, or MX Player. It can take several seconds for the address to be retrieve. The copied address will expire in 20 minutes."
	},
	"F0657":
	{
		"message": "Stretch small video"
	},
	"A0658":
	{
		"message": "The setting works when video resolution (see in the statistics) is less than the player size. If enabled, video will be stretched to the player size (keeping the aspect ratio). If disabled, video of the original size will be located in the center of the player, and the unused space will be filled with a black background.\n\nIf the broadcast has a lot of text or small details, you can disable stretching to prevent them from blurring.\n\nIf the page is zoomed, the browser will change the video size even with the setting disabled.\n\nThe CTRL+I on the keyboard."
	},
	"A0660":
	{
		"message": "Open or close the menu.\nThe X or MENU key on the keyboard."
	},
	"F0661":
	{
		"message": "Latest News",
		"description": "Пункт меню. Копия A0620."
	},
	"A0662":
	{
		"message": "Latest news about the extension"
	},
	"F0663":
	{
		"message": "Close",
		"description": "Кнопка, закрывающая что-либо, например окно"
	},
	"F0664":
	{
		"message": "Rewatch this broadcast",
		"description": "Пункт меню. Копия J0149 F1058."
	},
	"A0665":
	{
		"message": "Link to recording of this broadcast. Use it to continue watching this broadcast later or to share an interesting moment with other people. You can also right click this link."
	},
	"A0666":
	{
		"message": "Close"
	},
	"A0667":
	{
		"message": "Move"
	},
	"F0668":
	{
		"message": "<strong>The version of the installed extension Alternate Player for Twitch.tv is outdated.</strong> If you have seen this message before, then the automatic update of the extension probably does not work."
	},
	"F0669":
	{
		"message": "Hiding ads"
	},
	"F0670":
	{
		"message": "Ads hidden"
	},
	"A0671":
	{
		"message": "The number of Twitch ads hidden by the player.\n[ Duration of ads in seconds, the last ad on the right <Elapsed time between ads> ]"
	},
	"A0672":
	{
		"message": "Toggle Picture-in-Picture mode.\nThe SHIFT+ENTER on the keyboard."
	},
	"F0679":
	{
		"message": "Only mute",
		"description": "Копия A0575."
	},
	"F0700":
	{
		"message": "Send message to developer of <cite>Alternate Player for Twitch.tv</cite> extension",
		"description": "Заголовок формы для отправки отзыва."
	},
	"F0701":
	{
		"message": "If you want to report the playback issue, first start the standard Twitch.tv player (reload this page, then click the broadcast title in the upper left corner). If the issue stays, then you do not need to report it. The developer of the <cite>Alternate Player for Twitch.tv</cite> extension is not affiliated with the owners of <cite>Twitch.tv</cite> and cannot affect operation of their website and the quality of the broadcasts."
	},
	"F0702":
	{
		"message": "What do you want to report? Please write in detail, the phrases “chat does not work” and “video is not smooth” are useless. If you find an issue, please provide the steps that will ​allow me to reproduce this issue on my computer. If you want to add the new feature to the extension, explain its benefits."
	},
	"F0703":
	{
		"message": "You can enter your e-mail address, so that the developer can answer you (for example, request more information, which happens quite often). If you do not want to provide your address, leave this field blank."
	},
	"F0704":
	{
		"message": "Along with the text you entered, the debug data will be sent."
	},
	"F0705":
	{
		"message": "Show debug data"
	},
	"F0706":
	{
		"message": "Privacy policy"
	},
	"F0707":
	{
		"message": "Send",
		"description": "Кнопка для отправки данных."
	},
	"F0708":
	{
		"message": "Send error report to developer of <cite>Alternate Player for Twitch.tv</cite> extension",
		"description": "Заголовок формы для отправки отчета об ошибке."
	},
	"F0710":
	{
		"message": "<strong>Make sure you have the latest version of the extension.</strong> Also, do not turn off the browser update: new browser versions are constantly improving the video playback. The frequent occurrence of errors can be caused by incorrect configuration of the hardware or software (first check the web browser settings)."
	},
	"F0712":
	{
		"message": "An error occurred in the extension. Please send debug data to the developer of the extension, so he could fix this error. If necessary, a few seconds of the video will be added to the debug data."
	},
	"F0715":
	{
		"message": "If you know the cause or sequence of your actions that led to the error, then briefly describe them."
	},
	"F0717":
	{
		"message": "Sending data",
		"description": "Сбоку от этого текста <progress> отображает ход отправки."
	},
	"F0718":
	{
		"message": "Cancel",
		"description": "Кнопка для отмены или прерывания отправки данных."
	},
	"F0719":
	{
		"message": "Fail to send data <b>:(</b>"
	},
	"F0720":
	{
		"message": "Try again",
		"description": "Кнопка для повторной отправки данных."
	},
	"F0723":
	{
		"message": "In case of incorrect or missing English translation, please write the correct variant below. You can also <a href='https://coolcmd.github.io/tw5/translate.html' target='_blank' rel='noopener noreferrer'>do it yourself</a>, without the help of extension developer."
	},
	"F0726":
	{
		"message": "Embedded chat is developed by Twitch.tv. The extension just inserts the chat into its player. This chat has some limitations compared to the version used on the Twitch.tv website. Servers that serve the chat can stop working for reasons beyond the control of the extension developer. This happens relatively rarely (at least in my city)."
	},
	"F0727":
	{
		"message": "The extension, mostly chat, can be broken by: browser settings (cookies), other browser extensions, ad blockers, firewalls, antiviruses. To diagnose a problem, try temporarily turning off all of the above."
	},
	"F0728":
	{
		"message": "<b>If you do not receive the reply for a long time, try searching in spam the mail with the subject “Alternate Player for Twitch.tv”.</b>"
	},
	"F0729":
	{
		"message": "The data has been rejected. The version of the installed extension is outdated! Please update the extension."
	},
	"F0730":
	{
		"message": "The data has been rejected. Your browser is no longer supported by the extension! Please update your browser or remove the extension."
	},
	"J0731":
	{
		"message": "Watch this broadcast on Twitch.tv website"
	},
	"F1000":
	{
		"message": "<p>The browser extension <cite>Alternate Player for Twitch.tv</cite> was created by independent developer <cite>Alexander Choporov (CoolCmd)</cite>, and this takes a lot of free time. Extension is free. If you liked it, then you can thank the developer by donating him some money. Donation will also serve as a great motivation to continue the extension development.</p><p>To make a donation, click <a href='https://coolcmd.github.io/tw5/donate.html' target='_blank' rel='noopener noreferrer'>this link</a>.</p>",
		"description": "Новость."
	},
	"J1003":
	{
		"message": "Please support!",
		"description": "Заголовок новости."
	},
	"J1010":
	{
		"message": "Changes in the new version of the extension",
		"description": "Заголовок новости."
	},
	"F1011":
	{
		"message": "<p>The ability to <a href='https://help.twitch.tv/customer/en/portal/articles/2442508-how-to-use-clips' target='_blank' rel='noopener noreferrer'>create and share clips</a> was added to the player. Before clicking the appropriate button please read its tooltip.</p>",
		"description": "Новость."
	},
	"F1012":
	{
		"message": "<p>In the player settings you can choose the colors of its interface. So far only two themes are available. To increase their number, read the tooltip.</p>",
		"description": "Новость."
	},
	"F1013":
	{
		"message": "<p>Now the extension <cite>FrankerFaceZ</cite> is working in the chat. Also, the issue with the <cite>BetterTTV</cite> extension in <cite>Chrome</cite> was fixed.</p>",
		"description": "Новость."
	},
	"F1014":
	{
		"message": "<p>Now the player is launching from the Twitch.tv website only on live channels.</p><p>Added ability to increase the playback speed of instant replay.</p><p>Added ability to mute the sound and change the volume by mouse wheel. You can disable this feature in the player's settings.</p><p>Added ability to play/pause instant replay by clicking the view area.</p><p>Added keyboard shortcuts that toggles the mute and sequentially change the playback speed of instant replay.</p><p>The keyboard shortcuts for some commands have been changed to make them easier to use on laptops. The shortcuts are listed in the tooltips.</p><p>And the bad news. Due to changes on the Twitch server, the extension no longer “resurrects” the audio of past broadcasts.</p>",
		"description": "Новость."
	},
	"F1017":
	{
		"message": "<p><a href='https://microsoftedge.microsoft.com/addons/detail/aojjiodaaogdbbcnbpjnojilccopgcbk' target='_blank' rel='noopener noreferrer'>Install</a>, rate and review. :)</p><p>Also, the “Black And White” color theme was added.</p>",
		"description": "Новость."
	},
	"F1018":
	{
		"message": "<p>Added setting for quick selection of the Internet connection quality.</p><p>Added setting for changing the gradient color.</p><p><cite>Chrome</cite>: added support for the <a href='https://chrome.google.com/webstore/detail/aiimboljphncldaakcnapfolgnjonlea' target='_blank' rel='noopener noreferrer'><cite>FFZ Add-On Pack</cite></a> extension.</p>",
		"description": "Новость."
	},
	"F1020":
	{
		"message": "<p>Added a brief information about the channel you are watching, with the ability to follow/unfollow it. To view this information, click the icon in the upper right corner of the player or press <kbd>I</kbd> key on the keyboard. To track your followed channels, as well as explore new ones, I recommend installing the <a href='https://chrome.google.com/webstore/detail/nlmbdmpjmlijibeockamioakdpmhjnpk' target='_blank' rel='noopener noreferrer'><cite>Twitch\u00A0Now</cite></a> browser extension.</p><p>Added rerun indicator: the icon in the upper left corner of the player.</p><p>Tapping the touchscreen shows the player interface.</p>",
		"description": "Новость."
	},
	"F1023":
	{
		"message": "<p>The live broadcast indicator has been added to the top left corner of the player. Click it to view the broadcast from the beginning. This feature is not available on all channels.</p>",
		"description": "Новость."
	},
	"J1030":
	{
		"message": "Create clips and share them with anyone",
		"description": "Заголовок новости."
	},
	"J1031":
	{
		"message": "Color the player to your liking",
		"description": "Заголовок новости."
	},
	"J1035":
	{
		"message": "The “Alternate Player for Twitch.tv” extension is available for the Microsoft Edge browser",
		"description": "Заголовок новости."
	},
	"J1036":
	{
		"message": "Fixing the chat",
		"description": "Заголовок новости."
	},
	"F1037":
	{
		"message": "<p>You can move the chat to the left side of the player.</p>",
		"description": "Новость."
	},
	"F1038":
	{
		"message": "<p>Chrome 62 (and its clones) is not fully compatible with Windows 10: after minimizing the window or switching the tab, a video playback error can occur. In this case, I recommend disable hardware-accelerated video decoding until Google fixes the issue.</p>",
		"description": "Новость."
	},
	"J1039":
	{
		"message": "Now extension is compatible with future Firefox versions",
		"description": "Заголовок новости."
	},
	"F1040":
	{
		"message": "<p>Some downside of this transition:</p><ul><li>The player's address has changed (check your bookmarks). The player's address will change after each reinstallation of the extension.<li>Player settings might have been lost.<li>There could be new bugs.</ul>",
		"description": "Новость."
	},
	"J1041":
	{
		"message": "The name of the extension has been changed",
		"description": "Заголовок новости."
	},
	"F1042":
	{
		"message": "<p>Some time ago, Google removed the extension from its Web Store, because the owners of the Twitch.tv website did not like the name of the extension. Therefore, I decided to change the name of the extension from <cite>Twitch 5</cite> to <cite>Alternate Player for Twitch.tv</cite>. Nothing else was changed. The extension is still being developed by the <cite>Alexander Choporov (CoolCmd)</cite>. The extension is available in the Google Web Store at the <a href='https://chrome.google.com/webstore/detail/bhplkbgoehhhddaoolmakpocnenplmhf' target='_blank' rel='noopener noreferrer'>new address</a>.</p>",
		"description": "Новость."
	},
	"F1043":
	{
		"message": "<p>Added the ability to export and import extension settings to a file. Now you will not lose the settings after reinstalling the extension or switching to another browser. Also, you can share your settings with other people.</p>",
		"description": "Новость."
	},
	"F1044":
	{
		"message": "<p>Added settings to change the size of the interface and turn off the animation.</p><p>Clicking on the duration of the broadcast shows the player statistics.</p><p>On the Twitch.tv website, two buttons are combined into one, which is still located in the upper right corner of the website. The right click on the button toggles the automatic start of the player. The left click starts the player (if possible).</p><p>Added support for the <a href='https://m.twitch.tv/' target='_blank' rel='noopener noreferrer'>website for mobile devices</a>. At the moment, only <a href='https://play.google.com/store/apps/details?id=org.mozilla.firefox' target='_blank' rel='noopener noreferrer'>Firefox for Android</a> can execute my extension. Support for the touch screen is not ideal yet. Anyway, on tablets the people watch the broadcasts in the Twitch App, and not in the browser (I think).</p>",
		"description": "Новость."
	},
	"F1046":
	{
		"message": "<p>Added setting to enable dark mode in the chat. This setting only affects the chat that is embedded in the player.</p><p>Also, in Firefox the bug is fixed: a white page in the place of chat.</p>",
		"description": "Новость."
	},
	"F1047":
	{
		"message": "<p>Added setting for the chat placement: you can attach chat to any side of the browser window.</p><p>Added setting for closing the chat: unload or hide. Differences are described in the tooltip.</p><p>Added setting for interface auto-hide timeout. Also, now the interface will hide immediately if the mouse leaves the player area.</p><p>Fixed the <cite>FFZ Add-On Pack</cite> browser extension in Chrome. Fixed hiding the chat which is attached to lower side in Firefox.</p>",
		"description": "Новость."
	},
	"F1048":
	{
		"message": "<p>Embedded chat is developed by Twitch.tv. The extension just inserts the chat into its player. Recently, Twitch.tv has replaced the old embedded chat with a new one. A new chat is a slightly truncated version of the chat from their site. Chat optimizations, which I recently added to the extension, do not work with the new chat yet. Also, other browser extensions, such as <cite>BetterTTV</cite> and <cite>FrankerFaceZ</cite>, may not be fully compatible with the new embedded chat. I almost did not test the new chat, because of problems with the Internet in my country (and with the brains of politicians).</p>",
		"description": "Новость."
	},
	"F1049":
	{
		"message": "<p>Added a full-featured chat, which is identical to the popout chat on the Twitch.tv website. The following features are now available: rooms, moderation, raids, Bits, popout window, you do not need to confirm the sending of the first message. Whispers do not work in chat yet. If you need to toggle the dark mode, do it on the Twitch.tv website. Full-featured chat is not available in Microsoft Edge.</p><p>Now in chat (for example, attached to the bottom or top side of the window) there is room for much more <a href='https://coolcmd.github.io/img/tw5/messages.png' target='_blank' rel='noopener noreferrer'>messages</a> and <a href='https://coolcmd.github.io/img/tw5/emotes.png' target='_blank' rel='noopener noreferrer'>emotes</a>. This optimization is compatible with current versions of <cite>BetterTTV</cite> and <cite>FrankerFaceZ</cite> browser extensions. This optimization is not available in Microsoft Edge.</p><p>Added “Incognito” player color theme. Added setting to select a chat version.</p>",
		"description": "Новость."
	},
	"J1054":
	{
		"message": "Important information",
		"description": "Заголовок новости для первого запуска проигрывателя."
	},
	"J1055":
	{
		"message": "Version of extension for Firefox for Android browser is experimental",
		"description": "Заголовок новости для планшета."
	},
	"F1056":
	{
		"message": "<p>The extension is not tested enough in this browser. The extension does not fully support the touch screen: tooltips are not visible. The browser contains some annoying bugs.</p>",
		"description": "Новость для планшета."
	},
	"F1057":
	{
		"message": "<p>Added menu with links and commands. One of the commands allows you to view the broadcast in another player, for example <cite>Media Player Classic</cite>, <cite>VLC Media Player</cite>, or <cite>MX Player</cite>.</p><p>Pressing the <kbd>Esc</kbd> key on the keyboard hides the player interface, including windows and menus.</p><p>Added setting to disable stretching the small video to the player size.</p><p>Added setting to select the device for audio output: speakers, headphones, TV, etc. This setting is hidden if only one audio device is available to the browser. Due to browser bug, this setting is not yet available in incognito mode. This setting is unavailable in Firefox (but may be added this year) and Microsoft Edge.</p>",
		"description": "Новость."
	},
	"F1058":
	{
		"message": "<p>Chat is available in full-screen mode.</p><p>Added link “Rewatch this broadcast” to the player menu. Use it to continue watching this broadcast later or to share an interesting moment with other people.</p>",
		"description": "Новость."
	},
	"F1059":
	{
		"message": "<p>Your Twitch.tv login status is again visible in the player (so you can create clips). To do this, the extension has been given permission to read the website's cookies.</p>",
		"description": "Новость."
	},
	"F1060":
	{
		"message": "<p>The touch screen support has been improved: now you can change the chat size, move statistics, and quickly increment/decrement the settings. However, you still need a mouse to read the tooltips.</p>",
		"description": "Новость."
	},
	"F1062":
	{
		"message": "<p>Added video quality “Audio only”. In this mode, the video is not downloaded nor shown. This reduces the resource (CPU, RAM, Internet connection) usage by the player. Ideal for music listening.</p><p>Improved setting for changing the volume by mouse wheel. Now you can set the volume change step.</p>",
		"description": "Новость."
	},
	"F1063":
	{
		"message": "<p>In some cases, ads was shown in the broadcasts. Now this ads will be blocked.</p>",
		"description": "Новость."
	},
	"F1064":
	{
		"message": "<p>Added <a href='https://help.twitch.tv/s/article/channel-points-guide' target='_blank' rel='noopener noreferrer'>Channel Points</a> support. You must be logged in on the Twitch.tv website to earn them. Check your login status by clicking the channel icon in the upper right corner of my player.</p>",
		"description": "Новость."
	},
	"F1065":
	{
		"message": "<p>The extension automatically opens chests with bonus points. This happens both in the player chat and on the website. You no longer need to install a separate extension for this. Read the tooltip of the “Closed Chat” setting on how to open chests even if the chat is closed.</p>",
		"description": "Новость. Копия F0629."
	},
	"J1066":
	{
		"message": "About ads",
		"description": "Заголовок новости."
	},
	"F1067":
	{
		"message": "<p>In September, Twitch started to fight ad blockers, including my extension. The extension uses special tricks to block ads. In turn, Twitch blocks every trick it seen. After that, I need a few days to find a new trick. Plus, you need to wait until the new version of the extension will be published in the store. Google and Microsoft require up to 7 days, Mozilla 1 day. All this time, you see ads in the extension player.</p><p>The number of tricks is limited and at the moment Twitch has blocked almost everything. Therefore, in the next version of the extension, I will add a more reliable, but less effective way to hide ads. During the ads, playback may pause for a few seconds and you will see the message “Skipping ads”.</p><p>Unfortunately, Twitch rarely shows ads in my region, so I cannot test the ad hiding feature myself. I need volunteers to test the beta versions of the extension. They should: be able to think logically, often see ads in the extension, install extensions not from the store (I will give instructions), describe the test results in detail. If you want to help me with this tedious but important job, then in the player menu click “Send Feedback” and let me know. Thank you!</p>",
		"description": "Новость. Копия F0528."
	},
	"F1068":
	{
		"message": "<p>Added a button to toggle Picture-in-Picture mode. You can also press <kbd>Shift</kbd>+<kbd>Enter</kbd>. Pause in this window is not yet available.</p>",
		"description": "Новость. См. также F1584."
	},
	"F1069":
	{
		"message": "<p>Improved player setting “Polling interval”. I recommend changing its value to “Auto” (this is the default value). This player setting will be removed in a future version of the extension.</p>",
		"description": "Новость."
	},
	"F1070":
	{
		"message": "<p>Ad hiding was improved: now, during ads, instead of a black screen, you will see the low resolution broadcast. Also, the frequency of ads was reduced: now you will see ads in the extension no more often than on the twitch.tv website (not tested too much).</p>",
		"description": "Новость."
	},
	"F1072":
	{
		"message": "The future of this extension",
		"description": "Заголовок новости."
	},
	"F1073":
	{
		"message": "<p>Starting June 2024, Chrome browser <a href='https://developer.chrome.com/docs/extensions/develop/migrate/mv2-deprecation-timeline' target='_blank' rel='noopener noreferrer'>will begin</a> to automatically disable my extension and prevent it from being installed from Chrome Web Store. For a while, you will be able to manually enable the extension.</p><p>To make the extension work in the Chrome browser, I will need to seriously modify it. This will take several months. The new version of the extension will only work on <b>modern versions</b> of browsers.</p>",
		"description": "Новость."
	},
	"F1074":
	{
		"message": "<ul><li>Fixed earning of Channel Points and Drops.<li>Partially fixed ads hiding.<li>Fixed follow / unfollow and clip creation.<li>Fixed player autostart.<li>Refined setting for changing the volume by mouse wheel.<li>Changed some keyboard shortcuts.<li>The statistics button moved to the menu. The menu button added to the bottom panel of the player.<li>The text size in the top panel of the player changes dynamically.<li>Several other fixes and improvements.</ul>",
		"description": "Новость."
	},
	"F1076":
	{
		"message": "<p>Fixed an error that prevented viewing of broadcasts on some channels (Twitch uses new CDN). This is why this extension version requires new permissions.</p>",
		"description": "Новость."
	},
	"F1077":
	{
		"message": "<p>Fixed command “Copy Record Address” in the player menu. Also it renamed to “Rewatch this broadcast” and converted into regular link for your convenience. Use this link instead of the recently deleted one in the upper left corner.</p><p>Fixed chat loading during raid.</p><p>If you cannot turn on Dark mode in chat, try <b>turn it off and on</b> on Twitch.tv website.</p>",
		"description": "Новость."
	},
	"F1078":
	{
		"message": "<p>Fixed clip creation.</p>",
		"description": "Новость."
	},
	"J1500":
	{
		"message": "Useful information",
		"description": "Раздел справки."
	},
	"F1501":
	{
		"message": "<p>To see help, click the menu button in the bottom right corner, then in the menu click “Help”. Also, most elements of the player interface (buttons, links, menus, etc) have <strong>tooltips</strong>, which I highly recommend to read. Tooltips automatically appear under the non-moving mouse cursor.</p>",
		"description": "Часть справки, часть формы отзыва, новость для первого запуска проигрывателя."
	},
	"F1502":
	{
		"message": "<p>To open the channel or category on the Twitch.tv website, click the broadcast or category title at the top of the player. Other links can be found in the player menu.</p>",
		"description": "Часть справки."
	},
	"F1503":
	{
		"message": "<p>On the Twitch.tv website in the upper right corner there is extension's logo “5”. The right click on the logo toggles the automatic start of the player. The left click starts the player (if possible). Automatic start is disabled on channels with encrypted broadcasts.</p>",
		"description": "Часть справки."
	},
	"F1504":
	{
		"message": "<p>Frequently used commands, such as <i>mute</i>, easier to give by pressing keys on the keyboard. The keys are listed in the tooltips.</p>",
		"description": "Часть справки."
	},
	"F1506":
	{
		"message": "<p data-image=\"svg-fail\">The following features of the Twitch.tv website are not available in the player: playback of videos, playback of encrypted broadcasts, Whispers, Twitch extensions (not to be confused with browser extensions), subtitles.</p>",
		"description": "Часть справки."
	},
	"F1507":
	{
		"message": "<p>To open the player in its own window, click on the tab with the player and drag it outside the tab bar.</p>",
		"description": "Часть справки."
	},
	"F1509":
	{
		"message": "<p>To reduce the stream delay (to make chatting easier), try changing the “Connection quality” to “Good” in the player settings.</p>",
		"description": "Часть справки."
	},
	"F1510":
	{
		"message": "<p>If you have problems with the <cite>Alternate Player for Twitch.tv</cite> extension, send feedback to the extension developer. To do this, click “Send Feedback” in the player menu.</p>",
		"description": "Часть справки. Копия F0528 и description_xx.txt."
	},
	"F1511":
	{
		"message": "<p>The red scissors icon in the upper right corner of the player means that several seconds of the broadcast were skipped for some reason. See the description of the “Buffer overflow” setting.</p>",
		"description": "Часть справки."
	},
	"J1513":
	{
		"message": "Troubleshooting",
		"description": "Раздел справки."
	},
	"F1514":
	{
		"message": "<p>Some users ask me to add the ability to view ads in the extension because they want to support the streamer or to reduce the frequency of ad serving. But that does not make sense because Twitch tracks ad views based on the data the extension sends to Twitch. The extension always sends this data, even if you are watching the low resolution broadcast instead of ads. The format of the data is not documented and may change from time to time, so I cannot guarantee that Twitch always trusts this data.</p>",
		"description": "Часть справки."
	},
	"F1515":
	{
		"message": "<p>If you really need <b>7TV</b> emotes in the extension chat, then do the following. Uninstall the <cite>7TV</cite> browser extension. Install the <cite>FrankerFaceZ</cite> browser extension. In the <cite>FrankerFaceZ</cite> extension settings, enable the <cite>7TV</cite> add-on. In the same way, you can enable BetterTTV emotes.</p>",
		"description": "Часть справки и новость."
	},
	"F1570":
	{
		"message": "<p>Embedded chat is developed by Twitch.tv. The extension just inserts the chat into its player (and optimizes the <a href='https://coolcmd.github.io/img/tw5/messages.png' target='_blank' rel='noopener noreferrer'>height</a> of the <a href='https://coolcmd.github.io/img/tw5/emotes.png' target='_blank' rel='noopener noreferrer'>content</a>). This chat has some limitations compared to the version used on the Twitch.tv website. See the description of the chat version in the player settings.</p>",
		"description": "Часть справки для Chrome и Firefox."
	},
	"F1571":
	{
		"message": "<p>If you have problems with chat, then try the following:</p><ul><li>Open your browser settings and allow to save and read cookie data, including third-party cookie data.<li>Go to <a href='https://www.twitch.tv/' rel='noopener noreferrer'>Twitch.tv</a> website and remove its cookies.<li>Select a different chat version in the player settings.<li>Chat can be broken by: other browser extensions, ad blockers, firewalls, antiviruses. To diagnose a problem, try temporarily turning off all of the above. Here are the <a href='https://coolcmd.github.io/img/tw5/privacy%20badger%20options.png' target='_blank' rel='noopener noreferrer'>Privacy Badger extension settings</a>, which do not interfere with chat.</ul>",
		"description": "Часть справки для Chrome."
	},
	"F1572":
	{
		"message": "<p>Due to browser limitations, only <cite>BetterTTV</cite> and <cite>FrankerFaceZ</cite> browser extensions can work in chat. The <cite>Alternate Player for Twitch.tv</cite> extension during its installation required your permission to <b>read</b> the list of installed extensions. This is necessary in order to load into the chat only those extensions that you have installed and enabled in your browser.</p>",
		"description": "Часть справки для Chrome. Копия description_xx.txt."
	},
	"F1573":
	{
		"message": "<p>If you need to toggle the dark mode in the “full-featured” chat version, do it on the Twitch.tv website.</p>",
		"description": "Часть справки для Chrome и Firefox."
	},
	"F1574":
	{
		"message": "<p>To enable inline moderation icons in the “less-featured” chat version, check the <a href='https://discuss.dev.twitch.tv/uploads/default/original/2X/f/f3049202b1456ee758ea81487a193ee540c84e7e.gif' target='_blank' rel='noopener noreferrer'>Mod Icons</a> option in your chat setting on the Twitch.tv website.</p>",
		"description": "Часть справки для Chrome и Firefox."
	},
	"F1575":
	{
		"message": "<p>To track your followed channels, quickly switch between them, and also to search for new channels, I recommend installing the <a href='https://chrome.google.com/webstore/detail/nlmbdmpjmlijibeockamioakdpmhjnpk' target='_blank' rel='noopener noreferrer'><cite>Twitch\u00A0Now</cite></a> browser extension.</p>",
		"description": "Часть справки для Chrome."
	},
	"F1581":
	{
		"message": "<p>If you have problems with chat, try the following:</p><ul><li>In your browser settings do not block third-party cookies and cookies from unvisited websites, or add an address <b>https://twitch.tv</b> to exceptions.<li>Go to <a href='https://www.twitch.tv/' rel='noopener noreferrer'>Twitch.tv</a> website and remove its cookies (click the icon in the address bar).<li>Select a different chat version in the player settings.<li>Open the tab with the address <b>about:config</b>, find the setting <b>privacy.firstparty.isolate</b> and make sure its value is <b>false</b>.<li>Chat can be broken by: other browser extensions, ad blockers, firewalls, antiviruses. To diagnose a problem, try temporarily turning off all of the above. Here are the <a href='https://coolcmd.github.io/img/tw5/privacy%20badger%20options.png' target='_blank' rel='noopener noreferrer'>Privacy Badger extension settings</a>, which do not interfere with chat.</ul>",
		"description": "Часть справки для Firefox."
	},
	"F1582":
	{
		"message": "<p>You should not block the JavaScript on the Twitch.tv website, for example in the <cite>NoScript</cite> extension. Also, you should not block the loading of HTML5 video, for example in the <cite>Flashblock</cite> extension.</p>",
		"description": "Часть справки для Firefox."
	},
	"F1583":
	{
		"message": "<p>To track your followed channels, quickly switch between them, and also to search for new channels, I recommend installing the <a href='https://addons.mozilla.org/firefox/addon/twitch-now/' target='_blank' rel='noopener noreferrer'><cite>Twitch\u00A0Now</cite></a> browser extension.</p>",
		"description": "Часть справки для Firefox."
	},
	"F1584":
	{
		"message": "<p>To activate a <a href='https://support.mozilla.org/kb/about-picture-picture-firefox' target='_blank'>Picture-in-Picture mode</a>, click the corresponding icon positioned on the right-hand side of the browser address bar, or hold down the <kbd>Shift</kbd> key, right click the view area, then in the browser menu click the corresponding item. You can also press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>]</kbd> on the keyboard in English layout. You can open multiple Picture-in-Picture windows at the same time. Pause in this window is not yet available.</p>",
		"description": "Часть справки для Firefox. См. также F1068."
	},
	"F1590":
	{
		"message": "<p>Embedded chat is developed by Twitch.tv. The extension just inserts the chat into its player. This chat has the following limitations: no moderation settings, no raids, no Bits, sometimes you need to confirm the sending of the first message.</p>",
		"description": "Часть справки для Edge."
	},
	"F1591":
	{
		"message": "<p>Due to browser limitations, the browser extensions which enhance chat, such as <cite>BetterTTV</cite> and <cite>FrankerFaceZ</cite>, are not working in the player.</p>",
		"description": "Часть справки для Edge."
	},
	"F1592":
	{
		"message": "<p>To enable inline moderation icons in the player's chat, check the <a href='https://discuss.dev.twitch.tv/uploads/default/original/2X/f/f3049202b1456ee758ea81487a193ee540c84e7e.gif' target='_blank' rel='noopener noreferrer'>Mod Icons</a> option in your chat setting on the Twitch.tv website.</p>",
		"description": "Часть справки для Edge."
	}
}



================================================
FILE: _locales/ru/messages.json
================================================
{
	"M0001":
	{
		"message": "Альтернативный проигрыватель прямых трансляций для сайта Twitch.tv.",
		"description": "Краткое описание расширения. Копия этой строки есть в AMO и Windows Store."
	},
	"M0010":
	{
		"message": "ru",
		"description": "Код языка этого файла в формате BCP 47 Language Tag"
	},
	"J0100":
	{
		"message": "Трансляция завершена"
	},
	"J0101":
	{
		"message": "\n\nОткрыть этот канал на сайте Twitch.tv чтобы:\n• Смотреть эту трансляцию или видеоматериалы стандартным проигрывателем.\n• Прочитать полное описание канала.\n• Совершить другие действия, которые недоступны в Alternate Player."
	},
	"J0102":
	{
		"message": "\n\nЩёлкните чтобы смотреть другие прямые трансляции и видеоматериалы этой категории."
	},
	"J0103":
	{
		"message": "Без названия",
		"description": "Название трансляции не указано."
	},
	"J0104":
	{
		"message": "Не указана",
		"description": "Название категории не указано."
	},
	"J0106":
	{
		"message": "Остановить просмотр трансляции и начать просмотр повтора.\nКлавиша ПРОБЕЛ на клавиатуре."
	},
	"J0107":
	{
		"message": "Продолжить просмотр трансляции.\nКлавиша ПРОБЕЛ на клавиатуре."
	},
	"J0108":
	{
		"message": "Отключить звук.\nКлавиши PAGE DOWN и M на клавиатуре или щелчок колесом мыши (смотрите настройки проигрывателя)."
	},
	"J0109":
	{
		"message": "Включить звук.\nКлавиши PAGE UP и M на клавиатуре или щелчок колесом мыши (смотрите настройки проигрывателя)."
	},
	"J0112":
	{
		"message": "Поставить повтор на паузу.\nКлавиши K и 5 (цифровой блок) на клавиатуре."
	},
	"J0113":
	{
		"message": "Снять повтор с паузы.\nКлавиши K и 5 (цифровой блок) на клавиатуре."
	},
	"J0114":
	{
		"message": "Мбит/с"
	},
	"J0120":
	{
		"message": "Авто",
		"description": "Текст или HTML-фрагмент. Длина слова не более 5 символов. Означает, что значение настройки подбирается автоматически."
	},
	"J0121":
	{
		"message": "Шторм",
		"description": "Название темы оформления."
	},
	"J0122":
	{
		"message": "Золотистая",
		"description": "Название темы оформления."
	},
	"J0123":
	{
		"message": "Настраиваемая",
		"description": "Название темы оформления. Копия A0565."
	},
	"J0124":
	{
		"message": "Макс.",
		"description": "Число в настройках проигрывателя заменяется на это слово. Длина слова не более 7 символов. Означает отсутствие ограничений. Копия A0534."
	},
	"J0125":
	{
		"message": "Чёрно-белая",
		"description": "Название темы оформления."
	},
	"J0126":
	{
		"message": "Хорошее",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0127":
	{
		"message": "Среднее",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0128":
	{
		"message": "Плохое",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0129":
	{
		"message": "Настраиваемое",
		"description": "Название качества соединения. Копия A0581."
	},
	"J0133":
	{
		"message": "Настройки расширения Alternate Player for Twitch.tv.json"
	},
	"J0136":
	{
		"message": "После сохранения настроек, закройте это окно.",
		"description": "HTML"
	},
	"J0138":
	{
		"message": "Инкогнито",
		"description": "Название темы оформления."
	},
	"J0139":
	{
		"message": "(источник)",
		"description": "Часть названия качества трансляции. Копия A0513."
	},
	"J0140":
	{
		"message": "к/с",
		"description": "Единица измерения: кадр в секунду"
	},
	"J0141":
	{
		"message": "Гц",
		"description": "Единица измерения: герц"
	},
	"J0142":
	{
		"message": "канал.",
		"description": "Единица измерения: каналы"
	},
	"J0143":
	{
		"message": "кбит/с",
		"description": "Единица измерения: килобит в секунду"
	},
	"J0144":
	{
		"message": "Только звук",
		"description": "Название качества трансляции"
	},
	"J0145":
	{
		"message": "Не в сети",
		"description": "Тип трансляции: трансляция завершена (offline)"
	},
	"J0146":
	{
		"message": "В эфире",
		"description": "Тип трансляции: прямой эфир (live)"
	},
	"J0147":
	{
		"message": "Повтор",
		"description": "Тип трансляции: повтор (rerun)"
	},
	"J0148":
	{
		"message": "Перевести этот текст"
	},
	"J0149":
	{
		"message": "Вы смотрите прямую трансляцию. Чтобы пересмотреть её, воспользуйтесь меню проигрывателя.",
		"description": "Копия F0664"
	},
	"J0150":
	{
		"message": "Вы смотрите ранее записанное видео"
	},
	"J0200":
	{
		"message": "Браузер не смог воспроизвести видео. Возможно, он сейчас потребляет слишком много оперативной памяти."
	},
	"J0201":
	{
		"message": "Ваш браузер не смог воспроизвести видео или звук. Если это происходит на всех каналах сайта Twitch.tv, значит ваш браузер не поддерживает H.264 или AAC. В этом случае, пожалуйста, удалите из вашего браузера расширение “Alternate Player for Twitch.tv”."
	},
	"J0203":
	{
		"message": "Указанного канала не существует. Возможно, вы набрали неправильный адрес."
	},
	"J0204":
	{
		"message": "Эта версия расширения “Alternate Player for Twitch.tv” не работает в вашем браузере. Пожалуйста, удалите расширение из вашего браузера и установите правильную версию.\n\nВерсия для Google Chrome:\nhttps://chrome.google.com/webstore/detail/bhplkbgoehhhddaoolmakpocnenplmhf\n\nВерсия для Mozilla Firefox:\nhttps://addons.mozilla.org/firefox/addon/twitch_5/\n\nВерсия для Microsoft Edge:\nhttps://microsoftedge.microsoft.com/addons/detail/aojjiodaaogdbbcnbpjnojilccopgcbk"
	},
	"J0206":
	{
		"message": "Браузер не смог воспроизвести видео.\n\nВозможные причины:\n• Видео или звук используют сжатие, которое не поддерживается вашим браузером.\n• Браузеру не хватает оперативной памяти, или браузер выделил слишком много оперативной памяти, или 32-битный браузер выделил слишком много адресного пространства (смотрите Virtual Size браузера в приложении Process Explorer). Некоторые 64-битные браузеры могут выделить одному процессу не более 4 ГБ памяти. Все вкладки с проигрывателем совместно используют один процесс.\n• Видео было повреждено.\n• Проблемы с оборудованием компьютера: перегрев, переразгон и т.д.\n• Ошибки в программном обеспечении компьютера.\n\nПерезагрузите страницу чтобы продолжить просмотр трансляции. Если ошибка повторится на других каналах, и вы не знаете её причину, то выполните следующие действия по одному, пока не исчезнут ошибки:\n• Закройте несколько вкладок браузера (чтобы освободить память).\n• Перезапустите браузер.\n• Перезагрузите компьютер.\n• Отключите аппаратное декодирование видео.\n• Сбросьте настройки браузера.\n• Обновите драйверы видеокарты.\n• Удалите из системы набор кодеков (если есть)."
	},
	"J0208":
	{
		"message": "Возникла проблема с воспроизведением видео. Попробуйте перезагрузить страницу для продолжения просмотра."
	},
	"J0211":
	{
		"message": "Этот канал уже открыт в другой вкладке браузера. Нажмите кнопку “Назад” чтобы вернуться на предыдущую страницу."
	},
	"J0215":
	{
		"message": "Вы запретили расширению “$FULL_EXTENSION_NAME$” доступ к сайту, который необходим для воспроизведения трансляции. Пожалуйста, верните настройки доступа в исходное состояние. Если вы не знаете как это сделать, то переустановите расширение.\n\nЕсли вам лишь нужно отключить автоматический запуск проигрывателя, то во встроенной в проигрыватель справке написано как это сделать.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0216":
	{
		"message": "Одна из настроек вашего браузера препятствует работе расширения $FULL_EXTENSION_NAME$. Чтобы это исправить, откройте вкладку с адресом $ADDRESS$. На странице вставьте в поле поиска “$NAME$”. Ниже появится текущее состояние этой настройки. Дважды щёлкните по нему мышкой, чтобы сменить значение на “false”.\n\nВместо этой настройки включите Полную защиту кук (Total Cookie Protection).\n\nТехнические подробности по адресу https://bugzilla.mozilla.org/show_bug.cgi?id=1558467",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			},
			"ADDRESS":
			{
				"content": "about:config"
			},
			"NAME":
			{
				"content": "privacy.firstparty.isolate"
			}
		}
	},
	"J0217":
	{
		"message": "Эта трансляция недоступна в вашем регионе. Нажмите кнопку “Назад”, чтобы вернуться на предыдущую страницу."
	},
	"J0219":
	{
		"message": "Эта трансляция закодирована. Расширение $FULL_EXTENSION_NAME$ не поддерживает закодированные трансляции. Нажмите кнопку “Назад”, чтобы вернуться на предыдущую страницу.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0220":
	{
		"message": "Расширение $FULL_EXTENSION_NAME$ не совместимо с Shelblock.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0221":
	{
		"message": "В расширении $FULL_EXTENSION_NAME$ произошла ошибка. Попробуйте перезагрузить страницу. Если эта ошибка появляется постоянно, то расширение не совместимо с вашим браузером или его настройками.",
		"placeholders":
		{
			"FULL_EXTENSION_NAME":
			{
				"content": "Alternate Player for Twitch.tv"
			}
		}
	},
	"J0222":
	{
		"message": "Изменилась ваша авторизация на сайте Twitch.tv. Перезагрузите страницу для продолжения."
	},
	"F0501":
	{
		"message": "Категория:"
	},
	"F0502":
	{
		"message": "Зрителей:"
	},
	"A0503":
	{
		"message": "Количество зрителей, смотрящих сейчас эту трансляцию, включая вас и, возможно, ведущего трансляции. Это число обновляется примерно раз в минуту."
	},
	"A0504":
	{
		"message": "Создать клип.\nКлавиши ALT+X на клавиатуре.\n\nВы должны быть авторизованы на сайте Twitch.tv. Если вы поставили трансляцию на паузу, у вас есть не более минуты, чтобы создать клип."
	},
	"F0505":
	{
		"message": "Отключено",
		"description": "Настройка отключена."
	},
	"A0506":
	{
		"message": "Изменить громкость.\nСТРЕЛКИ ВВЕРХ/ВНИЗ на клавиатуре или вертикальное вращение колеса мыши (смотрите настройки проигрывателя)."
	},
	"A0507":
	{
		"message": "Продолжительность этой трансляции.\nЩёлкните, чтобы показать состояние проигрывателя.",
		"description": "Копия A0527."
	},
	"A0508":
	{
		"message": "Щёлкните, чтобы узнать, что нового появилось в расширении!"
	},
	"A0509":
	{
		"message": "Открыть или закрыть чат. Эта команда доступна в полноэкранном режиме.\nКлавиша C на клавиатуре."
	},
	"A0510":
	{
		"message": "Открыть или закрыть настройки проигрывателя.\nКлавиша V на клавиатуре."
	},
	"A0511":
	{
		"message": "Переключить полноэкранный режим.\nКлавиша ENTER или F на клавиатуре или двойной щелчок мыши по области просмотра."
	},
	"F0512":
	{
		"message": "Качество трансляции"
	},
	"A0513":
	{
		"message": "Уменьшите качество, если скорости скачивания или производительности вашего компьютера недостаточно для непрерывного воспроизведения этого видео. Не все каналы позволяют менять качество.\n\nCкорости скачивания недостаточно, если в статистике средняя скорость загрузки постоянно меньше среднего битрейта трансляции. Производительности вашего компьютера недостаточно, если в статистике непрерывно растёт количество пропущенных кадров, и одно или несколько ядер процессора полностью загружено.\n\nИсточник — исходное видео, самое высокое качество. У остальных вариантов качество ниже, исходное видео пережато на сервере Twitch.tv.\n\nТолько звук — не скачивать и не показывать видео. Это уменьшит потребление ресурсов (процессор, память, интернет-соединение) проигрывателем. Идеален для прослушивания музыки.",
		"description": "Копия J0139 J0144."
	},
	"F0514":
	{
		"message": "Одновременных загрузок"
	},
	"A0515":
	{
		"message": "Видео загружается из сети небольшими частями — сегментами. Значение настройки больше 1 разрешает одновременно загружать указанное количество сегментов. Это повысит общую скорость загрузки, но только если скорость загрузки одного сегмента ниже пропускной способности вашего интернет-соединения, или “ожидание ответа” больше 0,5 секунды (смотрите в статистике). В ином случае станет только хуже: вам придётся увеличивать размер буфера, а это увеличит задержку трансляции.\n\nЗначение настройки больше 1 может немного задержать начало воспроизведения после открытия проигрывателя (смотрите описание настройки “Начать воспроизведение”). Также оно может удлиннить приостановку воспроизведения, вызванную ошибкой скачивания сегмента (смотрите в статистике “Ошибок скачивания”)."
	},
	"F0516":
	{
		"message": "Размер буфера, с"
	},
	"A0517":
	{
		"message": "Загруженное видео накапливается в буфере. Воспроизведение начнётся как только продолжительность видео в буфере станет не меньше указанного значения. Это позволяет не приостанавливать воспроизведение во время кратковременных проблем в сети или на сервере.\n\nЕсли у вас часто приостанавливается воспроизведение (смотрите в статистике “Исчерпаний буфера”), то попробуйте увеличить это значение. \n\nУвеличение размера буфера увеличивает задержку трансляции. Задержка трансляции (смотрите в статистике) — это время между захватом видео на компьютере ведущего трансляции и просмотром этого видео вами. Низкая задержка важна только тем, кто пользуется чатом.\n\nЯ НЕ рекомендую сильно занижать размер буфера, потому что когда в буфера остаётся менее 1 секунды непросмотренного видео (смотрите в статистике “Заполненность буфера”), возможны неприятные визуальные артефакты (подергивания, почернение экрана и т.д.)."
	},
	"F0518":
	{
		"message": "Начать воспроизведение, с"
	},
	"A0519":
	{
		"message": "В отличие от настройки “Размер буфера”, эта настройка влияет только на первое начало воспроизведения. Позволяет быстрее начать просмотр после открытия проигрывателя.\n\nКогда это полезно:\n\n• Вам хочется как можно скорее понять, что происходит на экране.\n\n• У вас редко бывают проблемы со скоростью скачивания, а значит ждать заполнения буфера не обязательно.\n\n“Начать воспроизведение” может превышать “Размер буфера”, т.е. их можно поменять местами. Это полезно при больших значениях “Начать воспроизведение” (например, больше 10 с) и если “Скорость загрузки” (смотрите в статистике) не сильно превышает “Битрейт трансляции” (например, не более чем в два раза)."
	},
	"F0524":
	{
		"message": "Сброс"
	},
	"A0525":
	{
		"message": "Присвоить всем настройкам расширения стандартные значения"
	},
	"F0526":
	{
		"message": "Статистика"
	},
	"A0527":
	{
		"message": "Показать состояние проигрывателя. Не для средних умов. :)\nВы также можете щёлкнуть время в левом нижнем углу проигрывателя.",
		"description": "Копия A0507."
	},
	"F0528":
	{
		"message": "Пожаловаться разработчику",
		"description": "Пункт меню. Копия F1510, F1067."
	},
	"A0529":
	{
		"message": "Нашли ошибку в расширении Alternate Player for Twitch.tv? Есть идеи как его улучшить? Отправьте свой отзыв разработчику расширения."
	},
	"F0530":
	{
		"message": "Поддержать разработчика",
		"description": "Копия F1000."
	},
	"A0531":
	{
		"message": "Если вам понравилось расширение Alternate Player for Twitch.tv, то вы можете отблагодарить разработчика, пожертвовав ему немного денег. Это также послужит отличной мотивацией не забрасывать разработку расширения."
	},
	"A0532":
	{
		"message": "Тащите чтобы изменить размер чата.\nОстальные параметры чата есть в настройках проигрывателя."
	},
	"F0533":
	{
		"message": "Продолжительность повтора, с"
	},
	"A0534":
	{
		"message": "Проигрыватель запоминает указанное количество секунд трансляции. В любой момент вы можете остановить трансляцию и повторно их просмотреть.\n\nЧем выше продолжительность, тем выше потребление оперативной памяти. В любом случае максимальное потребление памяти не превысит 150 мегабайтов в Chrome или 100 мегабайтов в Firefox.\n\nМаксимальная продолжительность (нажимайте “+” или “−” до появления слова “Макс.”) — убрать ограничение на время, оставив только ограничение на память.",
		"description": "Вариант для Chrome и Firefox. A0578 для Edge."
	},
	"A0535":
	{
		"message": "Последние секунды трансляции. Продолжительность задаётся в настройках.\nДля перемотки щёлкните в нужном месте или нажмите J, SHIFT+J, СТРЕЛКА ВЛЕВО, SHIFT+СТРЕЛКА ВЛЕВО, L, SHIFT+L, СТРЕЛКА ВПРАВО, SHIFT+СТРЕЛКА ВПРАВО."
	},
	"A0536":
	{
		"message": "Изменить скорость воспроизведения.\nКлавиши от 0 до 9, ПЛЮС и МИНУС на клавиатуре.\nПроизводительности вашего компьютера может не хватить для воспроизведения на максимальной скорости."
	},
	"F0537":
	{
		"message": "Переполнение буфера, с"
	},
	"A0538":
	{
		"message": "Если продолжительность видео в буфере превысит сумму “Размер буфера” + “Переполнение буфера”, то часть этого видео будет удалена (смотрите в статистике “Переполнений буфера”) и в правом верхнем углу проигрывателя будет показан значок с красными ножницами.\n\nУменьшите значение настройки, чтобы ограничить максимальную задержку трансляции. Увеличьте значение настройки, чтобы избежать пропуск видео."
	},
	"F0539":
	{
		"message": "Разрешение",
		"description": "Название параметра статистики."
	},
	"F0540":
	{
		"message": "Видео",
		"description": "Название параметра статистики."
	},
	"F0541":
	{
		"message": "Звук",
		"description": "Название параметра статистики."
	},
	"F0542":
	{
		"message": "Сервер",
		"description": "Название параметра статистики."
	},
	"F0543":
	{
		"message": "Очередь, с",
		"description": "Название параметра статистики."
	},
	"F0544":
	{
		"message": "Список сегментов, с",
		"description": "Название параметра статистики."
	},
	"F0545":
	{
		"message": "Интервал опроса, с",
		"description": "Название параметра статистики."
	},
	"F0546":
	{
		"message": "Добавлено сегментов",
		"description": "Название параметра статистики."
	},
	"F0547":
	{
		"message": "Добавлено секунд",
		"description": "Название параметра статистики."
	},
	"F0548":
	{
		"message": "Битрейт трансляции, Мбит/с",
		"description": "Название параметра статистики."
	},
	"F0549":
	{
		"message": "Скорость загрузки, Мбит/с",
		"description": "Название параметра статистики."
	},
	"F0550":
	{
		"message": "Ожидание ответа, с",
		"description": "Название параметра статистики."
	},
	"F0551":
	{
		"message": "Преобразовано за, мс",
		"description": "Название параметра статистики."
	},
	"F0552":
	{
		"message": "Задержка трансляции, с",
		"description": "Название параметра статистики."
	},
	"F0554":
	{
		"message": "Продолжит-ть просмотра",
		"description": "Название параметра статистики."
	},
	"F0555":
	{
		"message": "Всего скачано, МБайт",
		"description": "Название параметра статистики."
	},
	"F0556":
	{
		"message": "Пропущено кадров",
		"description": "Название параметра статистики."
	},
	"F0557":
	{
		"message": "Проблемных сегментов",
		"description": "Название параметра статистики."
	},
	"F0558":
	{
		"message": "Ошибок скачивания",
		"description": "Название параметра статистики."
	},
	"F0559":
	{
		"message": "Переполнений буфера",
		"description": "Название параметра статистики."
	},
	"F0560":
	{
		"message": "Исчерпаний буфера",
		"description": "Название параметра статистики."
	},
	"F0561":
	{
		"message": "Воспроизведение",
		"description": "Группа настроек."
	},
	"F0562":
	{
		"message": "Цвета",
		"description": "Группа настроек."
	},
	"F0563":
	{
		"message": "Буферизация",
		"description": "Группа настроек."
	},
	"F0564":
	{
		"message": "Тема оформления проигрывателя"
	},
	"A0565":
	{
		"message": "Чтобы задать собственные цвета, выберите подходящую тему, затем откройте группу настроек “Цвета”. Все изменения будут сохранены в теме оформления “Настраиваемая”."
	},
	"F0566":
	{
		"message": "Цвет фона"
	},
	"F0567":
	{
		"message": "Цвет кнопок"
	},
	"F0568":
	{
		"message": "Цвет заголовков"
	},
	"F0569":
	{
		"message": "Цвет выделения"
	},
	"F0570":
	{
		"message": "Прозрачность, %"
	},
	"F0571":
	{
		"message": "Проверить"
	},
	"A0572":
	{
		"message": "Проверьте разборчивость элементов интерфейса и читаемость текста.\n\nЧтобы не менять фон, нажмите эту кнопку удерживая нажатой клавишу SHIFT на клавиатуре."
	},
	"F0573":
	{
		"message": "Заполненность буфера, с",
		"description": "Название параметра статистики. Копия A0517."
	},
	"F0574":
	{
		"message": "Менять громкость колесом мыши"
	},
	"A0575":
	{
		"message": "Нажатие на колесо мыши будет приглушать звук. Вращение колеса мыши (а иногда и вертикальное “смахивание”) будет изменять громкость на указанный процент.\n\nТолько приглушать — обрабатывать нажатие на колесо и игнорировать его вращение.",
		"description": "Копия F0679."
	},
	"F0576":
	{
		"message": "Нет"
	},
	"F0577":
	{
		"message": "Да"
	},
	"A0578":
	{
		"message": "Проигрыватель запоминает указанное количество секунд трансляции. В любой момент вы можете остановить трансляцию и повторно их просмотреть.\n\nЧем выше продолжительность, тем выше потребление оперативной памяти.",
		"description": "Вариант для Edge. A0534 для Chrome и Firefox."
	},
	"F0579":
	{
		"message": "Цвет градиента"
	},
	"F0580":
	{
		"message": "Качество соединения"
	},
	"A0581":
	{
		"message": "Хорошее — скорости загрузки всегда хватает для выбранного качества трансляции (смотрите описание настройки “Качество трансляции”). Выберите этот пункт, чтобы облегчить общение в чате (смотрите описание настройки “Размер буфера”).\n\nСреднее — скорость загрузки иногда падает ниже нужного уровня (смотрите в статистике “Скорость загрузки”). Этот пункт подойдёт вам в большинстве случаев.\n\nПлохое — скорость загрузки часто падает ниже нужного уровня или часть сегментов не удаётся скачать из-за сетевых ошибок (смотрите в статистике “Ошибок скачивания”). Выберите этот пункт, чтобы сократить количество приостановок воспроизведения.\n\nНастраиваемое — вы изменили настройки в группе настроек “Буферизация”."
	},
	"F0582":
	{
		"message": "Язык трансляции:"
	},
	"F0583":
	{
		"message": "Канал отслеживают:"
	},
	"F0585":
	{
		"message": "Канал создан:"
	},
	"F0588":
	{
		"message": "Команда:"
	},
	"F0589":
	{
		"message": "Вы:"
	},
	"F0590":
	{
		"message": "должны <a href='https://www.twitch.tv/login' rel='noopener noreferrer'>авторизоваться на сайте Twitch.tv</a>, чтобы следить за каналом, общаться в чате, создавать клипы, зарабатывать Channel Points и Drops"
	},
	"F0591":
	{
		"message": "Отслеживать"
	},
	"A0592":
	{
		"message": "Добавить этот канал в список избранных каналов, чтобы следить за ним (follow).\n\nДля слежения за своими любимыми каналами, быстрого переключения между ними, а также для поиска новых каналов, я рекомендую установить расширение браузера “Twitch\u00A0Now”."
	},
	"F0593":
	{
		"message": "Не отслеживать"
	},
	"A0594":
	{
		"message": "Удалить этот канал из списка избранных каналов (unfollow)"
	},
	"A0595":
	{
		"message": "Установите флажок, чтобы получать уведомления о событиях, происходящих на этом канале, например о начале трансляции"
	},
	"A0597":
	{
		"message": "Открыть или закрыть информацию об этом канале.\nКлавиша I на клавиатуре."
	},
	"A0599":
	{
		"message": "Показать важную информацию.\nКлавиша F1 на клавиатуре."
	},
	"F0600":
	{
		"message": "Правый щелчок переключает автоматический<br>запуск Alternate Player.&ensp;Левый щелчок<br>запускает Alternate Player."
	},
	"F0604":
	{
		"message": "Все настройки"
	},
	"F0605":
	{
		"message": "Экспорт"
	},
	"A0606":
	{
		"message": "Сохранить все настройки расширения в файле"
	},
	"F0607":
	{
		"message": "Импорт"
	},
	"A0608":
	{
		"message": "Восстановить все настройки расширения из файла"
	},
	"F0609":
	{
		"message": "Интерфейс",
		"description": "Группа настроек."
	},
	"F0610":
	{
		"message": "Размер интерфейса, %"
	},
	"A0611":
	{
		"message": "Размер интерфейса проигрывателя: кнопок, текста и т.д. Не влияет на размер видео."
	},
	"F0612":
	{
		"message": "Анимация интерфейса"
	},
	"A0613":
	{
		"message": "Вы можете отключить анимацию интерфейса проигрывателя на слабом компьютере, например планшете"
	},
	"F0614":
	{
		"message": "Тема оформления чата"
	},
	"A0615":
	{
		"message": "Позволяет включить затемнённый режим в чате. Эта настройка влияет только на чат, который встроен в проигрыватель."
	},
	"F0616":
	{
		"message": "Светлая"
	},
	"F0617":
	{
		"message": "Тёмная"
	},
	"A0618":
	{
		"message": "Прокрутите вниз чтобы увидеть всё содержимое"
	},
	"F0619":
	{
		"message": "Я всё прочёл и понял"
	},
	"A0620":
	{
		"message": "Больше не показывать эти новости.\n\nДля просмотра всех новостей, в меню проигрывателя щёлкните “Последние новости”.",
		"description": "Копия A0620."
	},
	"F0621":
	{
		"message": "Я прочту это позже"
	},
	"A0622":
	{
		"message": "Временно закрыть это окно"
	},
	"F0623":
	{
		"message": "Положение чата"
	},
	"A0624":
	{
		"message": "К какой стороне окна браузера будет прикреплён чат. Авто — автоматически выбирать одну из двух указанных сторон в зависимости от соотношения сторон окна.\n\nКлавиши CTRL+U на клавиатуре."
	},
	"F0625":
	{
		"message": "Справка",
		"description": "Пункт меню. Копия F1501."
	},
	"F0626":
	{
		"message": "Чат"
	},
	"F0627":
	{
		"message": "Скрывать после неактивности, с"
	},
	"A0628":
	{
		"message": "Интерфейс проигрывателя будет скрыт, если не трогать мышь в течении указанного времени"
	},
	"F0629":
	{
		"message": "Закрытый чат",
		"description": "Название настройки. Копия F1065."
	},
	"A0630":
	{
		"message": "Выберите способ закрытия чата. Если чат выгружен:\n• Он не принимает сообщения.\n• Вас не видно в списке зрителей.\n• Сундуки с бонусными баллами не открываются.\n• Потребуется больше времени, чтобы повторно открыть чат.\nЕсли чат скрыт:\n• Он продолжает потреблять значительное количество ресурсов компьютера (процессор и оперативную память).\n• Сундуки с бонусными баллами автоматически открываются.\n• Во время запуска проигрывателя потребуется больше времени для начала воспроизведения видео."
	},
	"F0631":
	{
		"message": "Выгружать"
	},
	"F0632":
	{
		"message": "Скрывать"
	},
	"F0633":
	{
		"message": "Уведомлять"
	},
	"F0634":
	{
		"message": "Вывод звука"
	},
	"A0635":
	{
		"message": "Выберите устройство, через которое будет воспроизводиться звук трансляции. Настройка скрыта если доступно только одно аудиоустройство."
	},
	"F0636":
	{
		"message": "Дать разрешение"
	},
	"A0637":
	{
		"message": "Перед тем, как выбрать устройство для вывода звука, вам необходимо нажать эту кнопку и дать расширению дополнительное разрешение изменять настройки микрофона (под словом “микрофон” браузер подразумевает как ввод звука, так и вывод)."
	},
	"F0640":
	{
		"message": "Интересное"
	},
	"F0641":
	{
		"message": "Все категории"
	},
	"F0642":
	{
		"message": "Отслеживаемое"
	},
	"F0643":
	{
		"message": "Отслеживаемые каналы"
	},
	"F0644":
	{
		"message": "Отслеживаемые категории"
	},
	"F0645":
	{
		"message": "Мои клипы"
	},
	"F0646":
	{
		"message": "Настроить уведомления"
	},
	"A0647":
	{
		"message": "Щёлкните, чтобы открыть на сайте Twitch.tv настройки уведомлений"
	},
	"F0648":
	{
		"message": "Версия чата"
	},
	"A0649":
	{
		"message": "Полнофункциональная — аналогична чату во всплывающем окне сайта Twitch.tv. В чате пока не работают приватные сообщения (Whispers). Настраивать затемнённый режим нужно на сайте Twitch.tv.\n\nУрезанная — нет комнат, нет настроек модерирования, нет рейдов, нет Bits, иногда требуется подтвердить посылку первого сообщения. Используйте эту версию, если полнофункциональная не работает так как нужно. Чтобы у каждого сообщения были значки модераторов, перейдите на сайт Twitch.tv и в настройках чата своего канала включите “Значки модераторов”."
	},
	"F0650":
	{
		"message": "Полнофункциональная"
	},
	"F0651":
	{
		"message": "Урезанная"
	},
	"F0652":
	{
		"message": "Урезанная; затемнённый режим"
	},
	"F0653":
	{
		"message": "Копировать адрес канала"
	},
	"A0654":
	{
		"message": "Копировать в буфер обмена адрес этого канала, чтобы поделиться им с другими людьми, создать закладку в браузере и т.д."
	},
	"F0655":
	{
		"message": "Копировать адрес трансляции"
	},
	"A0656":
	{
		"message": "Копировать в буфер обмена адрес этой трансляции для просмотра её в другом проигрывателе, поддерживающим HLS, например Media Player Classic, VLC Media Player или MX Player. Получение адреса может занять несколько секунд. Срок действия адреса истечёт через 20 минут."
	},
	"F0657":
	{
		"message": "Растягивать видео"
	},
	"A0658":
	{
		"message": "Настройка работает, когда разрешение видео (смотрите в статистике) меньше размера проигрывателя. Если включено, то видео будет растянуто до размера проигрывателя (с сохранением соотношения сторон). Если отключено, то видео исходного размера будет расположено в центре проигрывателя, а неиспользованное пространство заполнено чёрным фоном.\n\nЕсли в трансляции много текста или мелких деталей, то чтобы они не “замыливались”, вы можете отключить растягивание.\n\nЕсли масштаб страницы изменён, то браузер изменит размер видео даже с отключённой настройкой.\n\nКлавиши CTRL+I на клавиатуре."
	},
	"A0660":
	{
		"message": "Открыть или закрыть меню.\nКлавиша X или МЕНЮ на клавиатуре."
	},
	"F0661":
	{
		"message": "Последние новости",
		"description": "Пункт меню. Копия A0620."
	},
	"A0662":
	{
		"message": "Последние новости о расширении"
	},
	"F0663":
	{
		"message": "Закрыть",
		"description": "Кнопка, закрывающая что-либо, например окно"
	},
	"F0664":
	{
		"message": "Пересмотреть эту трансляцию",
		"description": "Пункт меню. Копия J0149 F1058 F1077."
	},
	"A0665":
	{
		"message": "Ссылка на запись этой трансляции. Используйте её, чтобы позже продолжить просмотр трансляции или чтобы поделиться интересным моментом с другими людьми. Также вы можете щёлкнуть эту ссылку правой кнопкой мыши."
	},
	"A0666":
	{
		"message": "Закрыть статистику"
	},
	"A0667":
	{
		"message": "Переместить статистику"
	},
	"F0668":
	{
		"message": "<strong>У вас установлена устаревшая версия расширения Alternate Player for Twitch.tv.</strong> Если вы видите это сообщение не в первый раз, то скорее всего в вашем браузере не работает автоматическое обновление расширения."
	},
	"F0669":
	{
		"message": "Скрываю рекламу"
	},
	"F0670":
	{
		"message": "Скрыто рекламы"
	},
	"A0671":
	{
		"message": "Количество рекламных блоков Twitch, скрытых проигрывателем.\n[ Продолжительность блоков в секундах, последний блок справа <Прошло времени между блоками> ]"
	},
	"A0672":
	{
		"message": "Переключить режим Картинка в картинке.\nКлавиши SHIFT+ENTER на клавиатуре."
	},
	"F0679":
	{
		"message": "Только приглушать",
		"description": "Копия A0575."
	},
	"F0700":
	{
		"message": "Отправка сообщения разработчику расширения <cite>Alternate Player for Twitch.tv</cite>",
		"description": "Заголовок формы для отправки отзыва."
	},
	"F0701":
	{
		"message": "Если вы хотите сообщить о проблеме воспроизведения трансляции, то сначала запустите стандартный проигрыватель сайта Twitch.tv (перезагрузите эту страницу, затем щёлкните название трансляции в левом верхнем углу). Если в нём есть та же проблема, то сообщение отправлять не нужно. Разработчик расширения <cite>Alternate Player for Twitch.tv</cite> никак не связан с владельцами <cite>Twitch.tv</cite> и не может повлиять на работу их сайта и на качество трансляций."
	},
	"F0702":
	{
		"message": "Что вы хотите сообщить? Пишите подробно, фразы “чат не работает” и “трансляция тормозит” мне ни о чём не говорят. Если вы нашли проблему, то опишите действия, которые позволят воспроизвести её на моём компьютере. Если вы хотите, чтобы в расширении появилась новая возможность, то обоснуйте её пользу."
	},
	"F0703":
	{
		"message": "Вы можете указать адрес своей электронной почты, чтобы разработчик мог вам ответить (например, запросить больше информации, что бывает довольно часто). Если вы не хотите указывать свой адрес, то оставьте это поле пустым."
	},
	"F0704":
	{
		"message": "Вместе с введенным вами текстом будут отправлены отладочные данные."
	},
	"F0705":
	{
		"message": "Показать отладочные данные"
	},
	"F0706":
	{
		"message": "Политика конфиденциальности"
	},
	"F0707":
	{
		"message": "Отправить",
		"description": "Кнопка для отправки данных."
	},
	"F0708":
	{
		"message": "Отправка отчёта об ошибке разработчику расширения <cite>Alternate Player for Twitch.tv</cite>",
		"description": "Заголовок формы для отправки отчета об ошибке."
	},
	"F0710":
	{
		"message": "<strong>Убедитесь, что у вас установлена последняя версия расширения.</strong> Также не отключайте обновление браузера: в новых версиях браузера постоянно улучшают воспроизведение видео. Если у вас часто происходят ошибки, то возможно причина в настройках оборудования или программного обеспечения (в первую очередь браузера)."
	},
	"F0712":
	{
		"message": "В расширении произошла ошибка. Пожалуйста, отправьте отладочные данные разработчику расширения, чтобы он смог эту ошибку исправить. Если необходимо, к отладочным данным будут добавлены несколько секунд просмотренного видео."
	},
	"F0715":
	{
		"message": "Если вы знаете причину или последовательность действий, которые привели к появлению ошибки, то кратко опишите их."
	},
	"F0717":
	{
		"message": "Идет отправка данных",
		"description": "Сбоку от этого текста <progress> отображает ход отправки."
	},
	"F0718":
	{
		"message": "Отменить",
		"description": "Кнопка для отмены или прерывания отправки данных."
	},
	"F0719":
	{
		"message": "Не удалось отправить данные <b>:(</b>"
	},
	"F0720":
	{
		"message": "Попробовать еще раз",
		"description": "Кнопка для повторной отправки данных."
	},
	"F0723":
	{
		"message": "Вы можете <a href='https://coolcmd.github.io/tw5/translate.html' target='_blank' rel='noopener noreferrer'>самостоятельно перевести</a> расширение на новый язык, а также исправить и дополнить существующий перевод."
	},
	"F0726":
	{
		"message": "Встроенный чат разрабатывает Twitch.tv. Расширение просто вставляет готовый чат в свой проигрыватель. Этот чат имеет некоторые ограничения по сравнению с версией, используемой на сайте Twitch.tv. Серверы Twitch.tv, которые обслуживают чат, по независящим от автора расширения причинам могут перестать работать. Такое происходит сравнительно редко (по крайней мере в моём городе)."
	},
	"F0727":
	{
		"message": "Работе расширения, в основном чата, могут мешать: настройки браузера (cookie), другие расширения браузера, блокировщики рекламы, фаерволы, антивирусы. Чтобы найти причину проблемы, временно отключите вышеперечисленное."
	},
	"F0728":
	{
		"message": "<b>Если вам долго не приходит ответ, то попробуйте поискать в спаме письмо с темой “Alternate Player for Twitch.tv”.</b>"
	},
	"F0729":
	{
		"message": "Данные не были приняты. Версия установленного расширения устарела! Пожалуйста, обновите расширение."
	},
	"F0730":
	{
		"message": "Данные не были приняты. Ваш браузер больше не поддерживается расширением! Пожалуйста, обновите ваш браузер или удалите из него расширение."
	},
	"J0731":
	{
		"message": "Смотреть эту трансляцию на сайте Twitch.tv"
	},
	"F1000":
	{
		"message": "<p>Расширение браузера <cite>Alternate Player for Twitch.tv</cite> создано независимым разработчиком <cite>Alexander Choporov (CoolCmd)</cite> в своё свободное время, которого ушло на удивление много. Расширение бесплатно. Если оно вам понравилось, то вы можете отблагодарить разработчика, пожертвовав ему немного денег. Это также послужит отличной мотивацией не забрасывать разработку расширения.</p><p>Для того чтобы сделать пожертвование, перейдите по <a href='https://coolcmd.github.io/tw5/donate.html' target='_blank' rel='noopener noreferrer'>этой ссылке</a>.</p>",
		"description": "Новость. Копия donate_ru.html."
	},
	"J1003":
	{
		"message": "Поддержи развитие расширения!",
		"description": "Заголовок новости."
	},
	"J1010":
	{
		"message": "Изменения в новой версии расширения",
		"description": "Заголовок новости."
	},
	"F1011":
	{
		"message": "<p>В проигрыватель добавлена кнопка для <a href='https://help.twitch.tv/customer/ru/portal/articles/2442508-how-to-use-clips' target='_blank' rel='noopener noreferrer'>создания клипа</a>. Перед нажатием на кнопку, пожалуйста, прочтите её всплывающую подсказку.</p>",
		"description": "Новость."
	},
	"F1012":
	{
		"message": "<p>В настройках проигрывателя вы можете выбрать цвета его оформления. Пока тем оформления всего две. Чтобы увеличить их количество, прочтите всплывающую подсказку.</p>",
		"description": "Новость."
	},
	"F1013":
	{
		"message": "<p>Теперь в чате работает расширение <cite>FrankerFaceZ</cite>. Также была устранена проблема с расширением <cite>BetterTTV</cite> в <cite>Chrome</cite>.</p>",
		"description": "Новость."
	},
	"F1014":
	{
		"message": "<p>Теперь проигрыватель запускается с сайта Twitch.tv только на тех каналах, где в данный момент идёт прямая трансляция.</p><p>Добавлена возможность ускоренного воспроизведения повтора.</p><p>Добавлена возможность приглушать звук и менять громкость колесом мыши. Вы можете отключить эту возможность в настройках проигрывателя.</p><p>Добавлена возможность останавливать/продолжать просмотр повтора щелчком мыши по области просмотра.</p><p>Добавлены комбинации клавиш для приглушения звука и для последовательного изменения скорости повтора.</p><p>Изменены комбинации клавиш для некоторых команд, чтобы их было удобнее использовать владельцам ноутбуков. Клавиши перечислены во всплывающих подсказках.</p><p>И плохая новость. В связи с изменениями на сервере Twitch, расширение больше не восстанавливает звук у архивных трансляций.</p>",
		"description": "Новость."
	},
	"F1017":
	{
		"message": "<p><a href='https://microsoftedge.microsoft.com/addons/detail/aojjiodaaogdbbcnbpjnojilccopgcbk' target='_blank' rel='noopener noreferrer'>Устанавливайте</a>, ставьте оценку и пишите отзыв. :)</p><p>Также была добавлена “Чёрно-белая” тема оформления.</p>",
		"description": "Новость."
	},
	"F1018":
	{
		"message": "<p>Добавлена настройка для быстрого выбора качества интернет-соединения.</p><p>Добавлена настройка для изменения цвета градиента.</p><p><cite>Chrome</cite>: добавлена поддержка расширения <a href='https://chrome.google.com/webstore/detail/aiimboljphncldaakcnapfolgnjonlea' target='_blank' rel='noopener noreferrer'><cite>FFZ Add-On Pack</cite></a>.</p>",
		"description": "Новость."
	},
	"F1020":
	{
		"message": "<p>Добавлена краткая информация о просматриваемом канале, с возможностью управлять слежением. Для просмотра этой информации, щёлкните значок в правом верхнем углу проигрывателя или нажмите клавишу <kbd>I</kbd> на клавиатуре. Для слежения за своими любимыми каналами, а также для поиска новых каналов, я рекомендую установить расширение браузера <a href='https://chrome.google.com/webstore/detail/nlmbdmpjmlijibeockamioakdpmhjnpk' target='_blank' rel='noopener noreferrer'><cite>Twitch\u00A0Now</cite></a>.</p><p>Добавлен индикатор типа трансляции: значок в левом верхнем углу проигрывателя.</p><p>Касание сенсорного экрана показывает интерфейс проигрывателя.</p>",
		"description": "Новость."
	},
	"F1023":
	{
		"message": "<p>В левый верхний угол проигрывателя добавлен индикатор прямой трансляции. Щёлкните его, чтобы посмотреть трансляцию с самого начала. Такая возможность есть не на всех каналах.</p>",
		"description": "Новость."
	},
	"J1030":
	{
		"message": "Создавайте клипы и делитесь ими с кем попало",
		"description": "Заголовок новости."
	},
	"J1031":
	{
		"message": "Раскрасьте проигрыватель по своему вкусу",
		"description": "Заголовок новости."
	},
	"J1035":
	{
		"message": "Расширение “Alternate Player for Twitch.tv” доступно для браузера Microsoft Edge",
		"description": "Заголовок новости."
	},
	"J1036":
	{
		"message": "Чиним чат",
		"description": "Заголовок новости."
	},
	"F1037":
	{
		"message": "<p>Добавлена возможность перемещать чат на левую сторону проигрывателя.</p>",
		"description": "Новость."
	},
	"F1038":
	{
		"message": "<p>Браузер Chrome 62 (и его клоны) не полностью совместим с Windows 10: после сворачивания окна или переключения вкладки может произойти ошибка воспроизведения видео. В этом случае я рекомендую отключить аппаратное декодирование видео пока Google не устранит проблему.</p>",
		"description": "Новость."
	},
	"J1039":
	{
		"message": "Расширение стало совместимо с будущими версиями Firefox",
		"description": "Заголовок новости."
	},
	"F1040":
	{
		"message": "<p>С этим переходом связаны некоторые неудобства:</p><ul><li>Изменился адрес проигрывателя (проверьте свои закладки). Адрес проигрывателя будет меняться после каждой переустановки расширения.<li>В проигрывателе могли слететь ваши настройки.<li>Могли появиться новые ошибки.</ul>",
		"description": "Новость."
	},
	"J1041":
	{
		"message": "Изменилось имя расширения",
		"description": "Заголовок новости."
	},
	"F1042":
	{
		"message": "<p>Некоторое время назад компания Google удалила расширение из своего Интернет-магазина, потому что владельцам сайта Twitch.tv не понравилось имя расширения. Поэтому я изменил имя расширения с <cite>Twitch 5</cite> на <cite>Alternate Player for Twitch.tv</cite>. Это единственное изменение. Разрабатывает расширение по-прежнему <cite>Alexander Choporov (CoolCmd)</cite>. Расширение ждёт вас в Интернет-магазине Google по <a href='https://chrome.google.com/webstore/detail/bhplkbgoehhhddaoolmakpocnenplmhf' target='_blank' rel='noopener noreferrer'>новому адресу</a>.</p>",
		"description": "Новость."
	},
	"F1043":
	{
		"message": "<p>Добавлена возможность экспорта и импорта настроек расширения в файл. Теперь вы не потеряете настройки после переустановки расширения или перехода на другой браузер. Также вы можете поделиться своими настройками с другими людьми.</p>",
		"description": "Новость."
	},
	"F1044":
	{
		"message": "<p>Добавлены настройки для изменения размера интерфейса и отключения анимации.</p><p>Щелчок по продолжительности трансляции показывает состояние проигрывателя.</p><p>На сайте Twitch.tv две кнопки объединены в одну, которая по-прежнему находится в правом верхнем углу сайта. Правый щелчок по кнопке переключает автоматический запуск проигрывателя. Левый щелчок запускает проигрыватель (если возможно).</p><p>Добавлена поддержка <a href='https://m.twitch.tv/' target='_blank' rel='noopener noreferrer'>сайта для мобильных устройств</a>. На данный момент только <a href='https://play.google.com/store/apps/details?id=org.mozilla.firefox' target='_blank' rel='noopener noreferrer'>Firefox for Android</a> умеет запускать моё расширение. Поддержка сенсорного экрана пока не идеальна. В любом случае, на планшетах люди смотрят трансляции в Twitch App, а не в браузере (я так думаю).</p>",
		"description": "Новость."
	},
	"F1046":
	{
		"message": "<p>Добавлена настройка, которая позволяет включить затемнённый режим в чате. Эта настройка влияет только на чат, который встроен в проигрыватель.</p><p>Также в Firefox исправлена ошибка, из-за которой иногда вместо чата отображалась белая страница.</p>",
		"description": "Новость."
	},
	"F1047":
	{
		"message": "<p>Добавлена настройка положения чата: вы можете прикрепить его к любой стороне окна браузера.</p><p>Добавлена настройка способа закрытия чата: выгружать или скрывать. Отличия расписаны во всплывающей подсказке.</p><p>Добавлена настройка времени автоскрытия интерфейса. Кроме того, теперь интерфейс будет сразу скрываться, если мышь выйдет за пределы проигрывателя.</p><p>Исправлена работа расширения бразера <cite>FFZ Add-On Pack</cite> в Chrome. Исправлено скрытие закрепленного внизу чата в Firefox.</p>",
		"description": "Новость."
	},
	"F1048":
	{
		"message": "<p>Встроенный чат разрабатывает Twitch.tv. Расширение просто вставляет готовый чат в свой проигрыватель. Пару дней назад Twitch.tv заменил старый встроенный чат на новый. Новый чат — это немного урезанная версия чата с их сайта. Оптимизации чата, которые я недавно добавил в расширение, пока не работают с новым чатом. Также с новым встроенным чатом могут быть не полностью совместимы другие расширения браузера, такие как <cite>BetterTTV</cite> и <cite>FrankerFaceZ</cite>. Я почти не тестировал работу нового чата, потому что из-за Роскомпозора у меня отвалилась половина сайта Twitch.tv, включая чат.</p>",
		"description": "Новость."
	},
	"F1049":
	{
		"message": "<p>В расширение добавлен полнофункциональный чат, который аналогичен чату во всплывающем окне сайта Twitch.tv. Заработали следующие возможности: комнаты, модерирование, рейды, Bits, открытие в окне, не требуется подтверждать посылку первого сообщения. В чате пока не работают приватные сообщения (Whispers). Настраивать затемнённый режим нужно на сайте Twitch.tv. Полнофункциональный чат недоступен в Microsoft Edge.</p><p>Теперь в чат небольшой высоты (например, прикреплённого к нижней или верхней стороне окна) влезет намного больше <a href='https://coolcmd.github.io/img/tw5/messages.png' target='_blank' rel='noopener noreferrer'>сообщений</a> и <a href='https://coolcmd.github.io/img/tw5/emotes.png' target='_blank' rel='noopener noreferrer'>смайликов</a>. Эта оптимизация совместима с текущими версиями расширений браузера <cite>BetterTTV</cite> и <cite>FrankerFaceZ</cite>. Эта оптимизация недоступна в Microsoft Edge.</p><p>В настройки проигрывателя добавлены тема оформления “Инкогнито” и выбор версии чата.</p>",
		"description": "Новость."
	},
	"J1054":
	{
		"message": "Важная информация",
		"description": "Заголовок новости для первого запуска проигрывателя."
	},
	"J1055":
	{
		"message": "Версия для браузера Firefox for Android пока экспериментальная",
		"description": "Заголовок новости для планшета."
	},
	"F1056":
	{
		"message": "<p>Расширение мало тестируется в этом браузере. Расширение пока неполностью поддерживает сенсорный экран: не видны всплывающие подсказки. Браузер содержит несколько неприятных ошибок.</p>",
		"description": "Новость для планшета."
	},
	"F1057":
	{
		"message": "<p>Добавлено меню со ссылками и командами. Одна из команд позволяет просматривать трансляцию в другом проигрывателе, например <cite>Media Player Classic</cite>, <cite>VLC Media Player</cite> или <cite>MX Player</cite>.</p><p>Нажатие клавиши <kbd>Esc</kbd> на клавиатуре скрывает интерфейс проигрывателя, включая окна и меню.</p><p>Добавлена настройка, которая запрещает растягивать размер видео до размера проигрывателя.</p><p>Добавлена настройка для выбора устройства, через которое будет воспроизводиться звук трансляции: динамики, наушники, телевизор и т.д. Настройка скрыта если браузеру доступно только одно аудиоустройство. Из-за ошибки браузера, настройка пока недоступна в режиме инкогнито. Эта настройка недоступна в Firefox (но скорее всего появится в этом году) и Microsoft Edge.</p>",
		"description": "Новость."
	},
	"F1058":
	{
		"message": "<p>Чат доступен в полноэкранном режиме.</p><p>В меню проигрывателя добавлена ссылка “Пересмотреть эту трансляцию”. Используйте её, чтобы позже продолжить просмотр трансляции или чтобы поделиться интересным моментом с другими людьми.</p>",
		"description": "Новость. Копия F0664."
	},
	"F1059":
	{
		"message": "<p>Ваша авторизация на сайте Twitch.tv снова видна в проигрывателе (она нужна для создания клипов). Для этого расширению было разрешено читать файлы cookie сайта.</p>",
		"description": "Новость."
	},
	"F1060":
	{
		"message": "<p>Улучшена поддержка сенсорного экрана: теперь можно изменять размер чата, перетаскивать статистику и быстро изменять настройки. Однако по-прежнему для чтения всплывающих подсказок нужна мышь.</p>",
		"description": "Новость."
	},
	"F1062":
	{
		"message": "<p>Добавлено качество трансляции “Только звук”. В этом режиме видео не скачивается и не показывается. Это уменьшает потребление ресурсов (процессор, память, интернет-соединение) проигрывателем. Идеален для прослушивания музыки.</p><p>Улучшена настройка изменения громкости колесом мыши. Теперь вы можете задать шаг изменения громкости.</p>",
		"description": "Новость."
	},
	"F1063":
	{
		"message": "<p>В некоторых случаях во время трансляции появлялась реклама. Теперь эта реклама будет заблокирована.</p>",
		"description": "Новость."
	},
	"F1064":
	{
		"message": "<p>Добавлена поддержка <a href='https://help.twitch.tv/s/article/channel-points-guide' target='_blank' rel='noopener noreferrer'>Channel Points</a>. Для их получения вы должны быть авторизованы на сайте Twitch.tv. Проверить состояние авторизации вы можете щёлкнув значок канала в правом верхнем углу моего проигрывателя.</p>",
		"description": "Новость."
	},
	"F1065":
	{
		"message": "<p>Расширение открывает за вас сундуки с бонусными очками. Это происходит как в чате проигрывателя, так и на сайте. Вам больше не нужно устанавливать для этого отдельное расширение. Читайте во всплывающей подсказке настройки “Закрытый чат”, как открывать сундуки даже если чат закрыт.</p>",
		"description": "Новость. Копия F0629."
	},
	"J1066":
	{
		"message": "О рекламе",
		"description": "Заголовок новости."
	},
	"F1067":
	{
		"message": "<p>В начале сентября компания Twitch стала активно бороться с блокировщиками рекламы, включая моё расширение. Для блокировки рекламы расширение использует особые трюки. В свою очередь Twitch блокирует каждый замеченный трюк. После этого мне нужно искать новый, на что уходит несколько дней. Плюс нужно ждать, пока новая версия расширения будет опубликована в магазине. У Google и Microsoft на это уходит до 7 дней, у Mozilla 1 день. Всё это время вы видите рекламу в проигрывателе расширения.</p><p>Количество трюков ограничено и на данный момент Twitch заблокировала почти все. Поэтому в следующей версии расширения я добавлю более надёжный, хотя и менее эффективный способ скрытия рекламы. Во время рекламы, воспроизведение может быть приостановлено на несколько секунд и вы увидите надпись “Пропускаю рекламу”.</p><p>К сожалению, в моём регионе Twitch показывает рекламу очень редко, поэтому я сам не могу протестировать функцию скрытия рекламы. Мне нужны добровольцы для тестирования бета-версий расширения. Они должны: уметь логически мыслить, часто видеть рекламу в расширении, устанавливать расширения не из магазина (я дам инструкцию), подробно описывать результаты тестирования. Если вы хотите помочь мне в этом нудном, но важном деле, то в меню проигрывателя щёлкните “Пожаловаться разработчику” и сообщите мне. Спасибо!</p>",
		"description": "Новость. Копия F0528."
	},
	"F1068":
	{
		"message": "<p>Добавлена кнопка для переключения режима Картинка в картинке. Вы также можете нажать комбинацию клавиш <kbd>Shift</kbd>+<kbd>Enter</kbd>. Пауза в этом окне пока недоступна.</p>",
		"description": "Новость. См. также F1584."
	},
	"F1069":
	{
		"message": "<p>Улучшена настройка проигрывателя “Интервал опроса”. Я рекомендую переключить её на “Авто” (это значение по умолчанию). В следующей версии расширения эта настройка будет удалена.</p>",
		"description": "Новость."
	},
	"F1070":
	{
		"message": "<p>В этой версии расширения улучшено скрытие рекламы: теперь во время рекламы вместо чёрного экрана вы увидите трансляцию в низком разрешении. Также уменьшена частота появления рекламы: теперь вы будете видеть рекламу в расширении не чаще, чем на сайте twitch.tv (тестировал недолго).</p>",
		"description": "Новость."
	},
	"F1072":
	{
		"message": "Будущее расширения",
		"description": "Заголовок новости."
	},
	"F1073":
	{
		"message": "<p>С июня 2024 года браузер Chrome <a href='https://developer.chrome.com/docs/extensions/develop/migrate/mv2-deprecation-timeline?hl=ru' target='_blank' rel='noopener noreferrer'>начнёт</a> самостоятельно отключать моё расширение и запретит устанавливать его из Интернет-магазина Chrome. Какое-то время вы сможете включить расширение вручную.</p><p>Чтобы расширение заработало в браузере Chrome, мне нужно будет его серьёзно переписать. На это уйдёт несколько месяцев. Новая версия расширения будет работать только на <b>современных версиях</b> браузеров.</p>",
		"description": "Новость."
	},
	"F1074":
	{
		"message": "<ul><li>Исправлено начисление Channel Points и Drops.<li>Частично исправлено скрытие рекламы.<li>Исправлены отслеживание канала и создание клипа.<li>Исправлен автозапуск проигрывателя.<li>Дополнена настройка изменения громкости колесом мыши.<li>Изменены некоторые комбинации клавиш.<li>Кнопка статистики перенесена в меню. Кнопка меню добавлена на нижнюю панель проигрывателя.<li>Размер шрифта в верхней панели проигрывателя меняется динамически.<li>Несколько других исправлений и улучшений.</ul>",
		"description": "Новость."
	},
	"F1076":
	{
		"message": "<p>Исправлена ошибка, которая препятствовала просмотру трансляции на некоторых каналах (Twitch использует новый CDN). Для этого расширению потребовались новые разрешения.</p>",
		"description": "Новость."
	},
	"F1077":
	{
		"message": "<p>В меню проигрывателя исправлена работа команды “Копировать адрес записи”. Также она переименована в “Пересмотреть эту трансляцию” и для вашего удобства преобразована в обычную ссылку. Используйти эту ссылку вместо недавно удалённой в левом верхнем углу.</p><p>Исправлена загрузка чата во время рейда.</p><p>Если вы не можете включить в чате затемнённый режим, то <b>выключите и включите</b> его на сайте Twitch.tv.</p>",
		"description": "Новость."
	},
	"F1078":
	{
		"message": "<p>Исправлено создание клипа.</p>",
		"description": "Новость."
	},
	"J1500":
	{
		"message": "Полезная информация",
		"description": "Раздел справки."
	},
	"F1501":
	{
		"message": "<p>Чтобы открыть справку, нажмите в правом нижнем углу кнопку, которая открывает меню проигрывателя, и в меню щёлкните “Справка”. Также настоятельно рекомендую читать <b>всплывающие подсказки</b>, которые есть у большинства элементов интерфейса проигрывателя (кнопки, ссылки, меню и т.д.). Подсказки автоматически появляются под не двигающимся мышиным курсором.</p>",
		"description": "Часть справки, часть формы отзыва, новость для первого запуска проигрывателя."
	},
	"F1502":
	{
		"message": "<p>Чтобы открыть канал или категорию на сайте Twitch.tv, щёлкните название трансляции или категории в верхней части проигрывателя. Остальные ссылки находятся в меню проигрывателя.</p>",
		"description": "Часть справки."
	},
	"F1503":
	{
		"message": "<p>На сайте Twitch.tv в правом верхнем углу находится логотип расширения “5”. Правый щелчок по логотипу переключает автоматический запуск проигрывателя. Левый щелчок запускает проигрыватель (если возможно). Автозапуск проигрывателя автоматически отключается на каналах с закодированной трансляцией.</p>",
		"description": "Часть справки."
	},
	"F1504":
	{
		"message": "<p>Часто используемые команды, такие как <i>приглушить звук</i>, проще отдавать нажимая клавиши на клавиатуре. Клавиши перечислены во всплывающих подсказках.</p>",
		"description": "Часть справки."
	},
	"F1506":
	{
		"message": "<p data-image=\"svg-fail\">В проигрывателе недоступны следующие возможности сайта Twitch.tv: просмотр видеоматериалов, просмотр закодированных трансляций, приватные сообщения (Whispers), расширения Twitch (не путать с расширениями браузера), субтитры.</p>",
		"description": "Часть справки."
	},
	"F1507":
	{
		"message": "<p>Чтобы открыть проигрыватель в отдельном окне, схватите вкладку с проигрывателем и перенесите её за пределы окна браузера.</p>",
		"description": "Часть справки."
	},
	"F1509":
	{
		"message": "<p>Для уменьшения задержки трансляции (чтобы облегчить общение в чате) попробуйте в настройках проигрывателя изменить “Качество соединения” на “Хорошее”.</p>",
		"description": "Часть справки."
	},
	"F1510":
	{
		"message": "<p>Если вас не устраивает работа расширения <cite>Alternate Player for Twitch.tv</cite>, то сообщите об этом разработчику расширения. Для этого в меню проигрывателя щёлкните “Пожаловаться разработчику”.</p>",
		"description": "Часть справки. Копия F0528 и description_xx.txt."
	},
	"F1511":
	{
		"message": "<p>Красный значок с изображением ножниц в правом верхнем углу проигрывателя означает, что несколько секунд трансляции были по какой-то причине пропущены. Смотрите описание настройки “Переполнение буфера”.</p>",
		"description": "Часть справки."
	},
	"J1513":
	{
		"message": "Устранение проблем",
		"description": "Раздел справки."
	},
	"F1514":
	{
		"message": "<p>Некоторые пользователи просят меня добавить возможность включения рекламы в расширении, чтобы поддержать стримера или уменьшить частоту появления рекламы. В этом нет смысла, потому что Twitch отслеживает просмотр рекламы на основе данных, которые расширение отправляет в Twitch. Расширение всегда отправляет эти данные, даже когда вместо рекламы вы смотрите трансляцию в низком разрешении. Формат данных не документирован и может меняться время от времени, поэтому я не могу гарантировать, что Twitch верит этим данным.</p>",
		"description": "Часть справки."
	},
	"F1515":
	{
		"message": "<p>Если вам очень нужны смайлики <b>7TV</b> в чате расширения, то сделайте следующее. Удалите расширение браузера <cite>7TV</cite>. Установите расширение браузера <cite>FrankerFaceZ</cite>. В настройках расширения <cite>FrankerFaceZ</cite> включите дополнение <cite>7TV</cite>. Таким же образом вы можете включить смайлики BetterTTV.</p>",
		"description": "Часть справки и новость."
	},
	"F1570":
	{
		"message": "<p>Встроенный чат разрабатывает Twitch.tv. Расширение просто вставляет готовый чат в свой проигрыватель (и <a href='https://coolcmd.github.io/img/tw5/messages.png' target='_blank' rel='noopener noreferrer'>оптимизирует</a> <a href='https://coolcmd.github.io/img/tw5/emotes.png' target='_blank' rel='noopener noreferrer'>высоту</a> содержимого). Этот чат имеет некоторые ограничения по сравнению с версией, используемой на сайте Twitch.tv. Смотрите описание версии чата в настройках проигрывателя.</p>",
		"description": "Часть справки для Chrome."
	},
	"F1571":
	{
		"message": "<p>Если у вас не работает чат, то попробуйте сделать следущее:</p><ul><li>В настройках браузера разрешите сохранять и читать файлы cookie, в том числе сторонние.<li>Зайдите на сайт <a href='https://www.twitch.tv/' rel='noopener noreferrer'>Twitch.tv</a> и удалите его файлы cookie.<li>В настройках проигрывателя выберите другую версию чата.<li>Работе чата также могут мешать другие расширения браузера, блокировщики рекламы, фаерволы, антивирусы. Чтобы найти причину проблемы, временно отключите вышеперечисленное. Вот <a href='https://coolcmd.github.io/img/tw5/privacy%20badger%20options.png' target='_blank' rel='noopener noreferrer'>настройки расширения Privacy Badger</a>, которые не мешают работе чата.</ul>",
		"description": "Часть справки для Chrome."
	},
	"F1572":
	{
		"message": "<p>Из-за ограничений браузера, в чате могут работать только расширения браузера <cite>BetterTTV</cite> и <cite>FrankerFaceZ</cite>. Расширение <cite>Alternate Player for Twitch.tv</cite> во время своей установки требовало у вас разрешение на <b>чтение</b> списка установленных расширений. Это необходимо, чтобы загружать в чат только те расширения, которые вы самостоятельно установили в свой браузер.</p>",
		"description": "Часть справки для Chrome. Копия description_xx.txt."
	},
	"F1573":
	{
		"message": "<p>Настраивать затемнённый режим для “полнофункциональной” версии чата нужно на сайте Twitch.tv.</p>",
		"description": "Часть справки для Chrome и Firefox."
	},
	"F1574":
	{
		"message": "<p>Чтобы в “урезанной” версии чата у каждого сообщения были значки модераторов, перейдите на сайт Twitch.tv и в настройках чата своего канала включите <a href='https://discuss.dev.twitch.tv/uploads/default/original/2X/f/f3049202b1456ee758ea81487a193ee540c84e7e.gif' target='_blank' rel='noopener noreferrer'>Значки модераторов</a>.</p>",
		"description": "Часть справки для Chrome и Firefox."
	},
	"F1575":
	{
		"message": "<p>Для слежения за своими любимыми каналами, быстрого переключения между ними, а также для поиска новых каналов, я рекомендую установить расширение браузера <a href='https://chrome.google.com/webstore/detail/nlmbdmpjmlijibeockamioakdpmhjnpk' target='_blank' rel='noopener noreferrer'><cite>Twitch\u00A0Now</cite></a>.</p>",
		"description": "Часть справки для Chrome."
	},
	"F1581":
	{
		"message": "<p>Если у вас не работает чат, то попробуйте сделать следущее:</p><ul><li>В настройках браузера не блокируйте сторонние куки (cookie) и куки с непосещённых сайтов, или добавьте в исключения адрес <b>https://twitch.tv</b>.<li>Зайдите на сайт <a href='https://www.twitch.tv/' rel='noopener noreferrer'>Twitch.tv</a> и удалите его файлы cookie (щёлкните значок в адресной строке).<li>В настройках проигрывателя выберите другую версию чата.<li>Откройте вкладку с адресом <b>about:config</b>, найдите настройку <b>privacy.firstparty.isolate</b> и убедитесь, что её значение равно <b>false</b>.<li>Работе чата также могут мешать другие расширения браузера, блокировщики рекламы, фаерволы, антивирусы. Чтобы найти причину проблемы, временно отключите вышеперечисленное. Вот <a href='https://coolcmd.github.io/img/tw5/privacy%20badger%20options.png' target='_blank' rel='noopener noreferrer'>настройки расширения Privacy Badger</a>, которые не мешают работе чата.</ul>",
		"description": "Часть справки для Firefox."
	},
	"F1582":
	{
		"message": "<p>Нельзя запрещать выполнение JavaScript на сайте Twitch.tv, например в расширении <cite>NoScript</cite>. Также нельзя блокировать загрузку HTML5-видео, например в расширении <cite>Flashblock</cite>.</p>",
		"description": "Часть справки для Firefox."
	},
	"F1583":
	{
		"message": "<p>Для слежения за своими любимыми каналами, быстрого переключения между ними, а также для поиска новых каналов, я рекомендую установить расширение браузера <a href='https://addons.mozilla.org/firefox/addon/twitch-now/' target='_blank' rel='noopener noreferrer'><cite>Twitch\u00A0Now</cite></a>.</p>",
		"description": "Часть справки для Firefox."
	},
	"F1584":
	{
		"message": "<p>Чтобы перейти в режим <a href='https://support.mozilla.org/kb/about-picture-picture-firefox' target='_blank'>Картинка в картинке</a>, щёлкните соответствующий значок, расположенный в правой части адресной строки браузера, или зажмите клавишу <kbd>Shift</kbd>, щёлкните правой кнопкой мыши по области просмотра, и в появившемся меню браузера щёлкните соответствующий пункт. Вы также можете нажать комбинацию клавиш <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>]</kbd> в английской раскладке. Вы можете открыть одновременно несколько окон Картинка в картинке. Пауза в этом окне пока недоступна.</p>",
		"description": "Часть справки для Firefox. См. также F1068."
	},
	"F1590":
	{
		"message": "<p>Встроенный чат разрабатывает Twitch.tv. Расширение просто вставляет готовый чат в свой проигрыватель. Этот чат имеет следующие ограничения: нет настроек модерирования, нет рейдов, нет Bits, иногда требуется подтвердить посылку первого сообщения.</p>",
		"description": "Часть справки для Edge."
	},
	"F1591":
	{
		"message": "<p>Из-за ограничений браузера, в проигрывателе не работают расширения браузера, улучшающие чат, такие как <cite>BetterTTV</cite> и <cite>FrankerFaceZ</cite>.</p>",
		"description": "Часть справки для Edge."
	},
	"F1592":
	{
		"message": "<p>Чтобы в чате проигрывателя у каждого сообщения были значки модераторов, перейдите на сайт Twitch.tv и в настройках чата своего канала включите <a href='https://discuss.dev.twitch.tv/uploads/default/original/2X/f/f3049202b1456ee758ea81487a193ee540c84e7e.gif' target='_blank' rel='noopener noreferrer'>Значки модераторов</a>.</p>",
		"description": "Часть справки для Edge."
	}
}



================================================
FILE: sources/README
================================================
To build wasm.wasm file:
1. Download "The WebAssembly Binary Toolkit" from https://github.com/WebAssembly/wabt/releases
2. Run "wat2wasm wasm.wat --output wasm.wasm"


================================================
FILE: sources/wasm.wat
================================================
;;
;; WebAssembly implementation for SearchStartCodePrefix() in asmjs.js
;;
(module
(import "i" "m" (memory 1))
(export "SearchStartCodePrefix" (func $SearchStartCodePrefix))
(func $SearchStartCodePrefix
	(param $pStream i32) (param $pStreamEnd i32) (result i32)
	(local $pTemp i32) (local $uByte i32)

	block $Return

	(br_if $Return (i32.gt_s
		(get_local $pStream)
		(tee_local $pTemp (i32.add (get_local $pStreamEnd) (i32.const -3)))))

	loop $LSearchStart

		(if (i32.gt_u
			(tee_local $uByte (i32.load8_u offset=2 (get_local $pStream)))
			(i32.const 1))
		(then
			;; Chrome 71 теряет скорость если эту проверку оформить по другому.
			(br_if $LSearchStart (i32.le_s
				(tee_local $pStream (i32.add (get_local $pStream) (i32.const 3)))
				(get_local $pTemp)))
			br $Return
		))
		(if (i32.load8_u offset=1 (get_local $pStream)) (then
			(br_if $LSearchStart (i32.le_s
				(tee_local $pStream (i32.add (get_local $pStream) (i32.const 2)))
				(get_local $pTemp)))
			br $Return
		))
		(if (i32.load8_u (get_local $pStream)) (then
			(br_if $LSearchStart (i32.le_s
				(tee_local $pStream (i32.add (get_local $pStream) (i32.const 1)))
				(get_local $pTemp)))
			br $Return
		))

	end

	(set_local $pTemp (get_local $pStream))
	;; Chrome 71 теряет скорость если прибавить 3.
	(set_local $pStream (i32.add (get_local $pStream) (i32.const 2)))

	(if (i32.eqz (get_local $uByte)) (then
		loop  $LSearchEnd
			(br_if $Return (i32.eq
				(tee_local $pStream (i32.add (get_local $pStream) (i32.const 1)))
				(get_local $pStreamEnd)))
			(br_if $LSearchEnd (i32.eqz (tee_local $uByte (i32.load8_u (get_local $pStream)))))
		end
	))

	(if (i32.ne (get_local $uByte) (i32.const 1)) (then
		(return (i32.const -2))
	))
 
	(i32.store (i32.const 0)
		(i32.add
			(i32.const 1)
			(i32.sub
				(get_local $pStream)
				(get_local $pTemp))))
	;; Firefox 64 теряет скорость если выполнить return $pTemp.
	;; https://bugzilla.mozilla.org/show_bug.cgi?id=1512148
	(set_local $pStreamEnd (get_local $pTemp))

	end $Return
	(return (get_local $pStreamEnd))
))


